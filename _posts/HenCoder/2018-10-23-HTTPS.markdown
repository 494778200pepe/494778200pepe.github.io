---
layout: post
title:  "HTTPS"
date:   2018-10-23 13:56:00 +0800
categories: HenCoder
tags: HenCoder_plus
author: pepe
description: 『 HTTPS 』
---

### **非对称加密(签名)是如何防止篡改的**

> 由于私钥只在某一个体手中，因此可以通过这一点来进行身份识别。比如用户A和B分别有一对密钥中的私钥和公钥，现在A向B发送消息”abc”，可进行如下操作：A用私钥对该文本进行加密之后变成密文”#￥%”，并附加上原文，组合成文本”#￥%：abc”(冒号起分隔作用，并无其他含义，具体实现中可自行处理)一起发送，B接收到该文本之后利用公钥对密文进行解密，将得到的解密后文本与传送过来的文本”abc”之间进行比对，如果一切正常，那么公钥解密之后的文本就是私钥加密之前的文本”abc”，比对结果一致，因此可以说明这段”abc”文本确实是A发送过来的，因为只有A才有对文本进行签名的私钥。能得到这个结论的前提是——A所用的私钥跟B所用的公钥确实是一对。

假如在传送途中别人篡改了”abc”，改成”aaa”，由于中间人没有A所持有的私钥，因此无法对篡改之后的数据生成新的正确签名，那么B在收到数据之后用公钥进行解密，再与传送的文本进行比对的话就不会一致。或者中间人篡改了数据之后用另一私钥对篡改之后的数据进行签名，同样由于B没有中间人的私钥对应的公钥，因此比对也不会一致。记住一点：B的公钥所对应的私钥只在A的手中，因此比对一致就说明该文本来自A。



### **如何保证客户端所持有的公钥就是某合法服务器声明的公钥？**

> 如果不能保证这一点，那么客户端发送的信息就有可能存在被窃听的危险，因为用此公钥加密的数据可以被其对应的私钥拥有者获取，而该私钥并不在客户端所认为的服务器上。 
因此可采用一个权威机构进行证书的颁发，所谓证书就是包含了服务器声明的公钥以及组织名称等信息，这里我们只考虑最关键的公钥信息。该权威机构会对申请证书的组织进行审核，确保其身份合法，然后将服务器公钥信息发布给客户端，客户端可利用该公钥与对应的服务器进行通信。整个过程可归纳为以下几步： 
1、服务器生成一对密钥，私钥自己留着，公钥交给数字证书认证机构（CA） 
2、CA进行审核，并用CA自己的私钥对服务器提供的公钥进行签名（参照上文RSA签名） 
3、客户端从CA获取证书（即服务器端公钥），用CA的公钥对签名的证书进行验证，比对一致，说明该服务器公钥确实是CA颁发的（得此结论有一个前提就是：客户端的CA公钥确实是CA的公钥，即该CA的公钥与CA对证书进行签名的私钥确实是一对。参照上文RSA签名中所论述的情况），而CA又作为权威机构保证该公钥的确是服务器端提供的，从而可以确认该证书中的公钥确实是合法服务器端提供的

注：为保证第3步中提到的前提条件，CA的公钥必须要安全地转交给客户端，因此，CA的公钥一般来说由浏览器开发商内置在浏览器的内部。于是，该前提条件在各种信任机制上，基本保证成立。


[https中的数字证书认证过程解析 - Just Do IT - CSDN博客](https://blog.csdn.net/abinge317/article/details/51791856?utm_source=blogxgwz6)

由此可见：所谓的安全的HTTP，其实也是要建立在信任的机制上。

> 总结：整个过程涉及2对公私密钥对，一对由服务器产生，用于加密，一对由CA产生，用于签名。 
整个过程还涉及2个信任：客户端信任CA，CA发布的证书中的公钥就是合法服务器的公钥。客户端信任浏览器内置的CA公钥就是与CA私钥对应的公钥。最后要说明的是，非对称加密在https中只是用来对对称加密密钥进行协商的过程才使用，在两端协商完对称加密的密钥之后，数据的加密传输均采用对称加密的方式。

### **证书信息**

> 对于每个证书，会有一对公钥&私钥，公钥加密的数据只有私钥可以解密，私钥加密的数据只有公钥可以解密。私钥由证书所有者保留并且严格保密，公钥则公开使用。 
此外，每个证书中还会包含很多信息，比如颁发机构，有效期等，其中最为重要的一个是签名。 
签名是指利用上一层证书的私钥，加密一些元信息（证书所有者的信息，包括基本信息，公钥，证书生效域名等）。这样，当收到签名证书时，只需要根据CA提供的公钥对签名解密，验证元信息是否一致，就可以判断当前证书是否合法。一句话来说就是，每个证书会对下一层的证书合法性做担保 

[https之证书验证 - Doarcutine的专栏 - CSDN博客](https://blog.csdn.net/u012852986/article/details/78873387?utm_source=blogxgwz0)

### **详细过程**

* 1、三次握手

* 2、建立连接(客户端与小区，服务端的网关、代理、隧道等)

* 3、Client hello(客户端随机数random_C，客户端支持的TSL版本(1.0,2.0)和密文族Cipher Suites[密钥交换(非对称加密)算法-对称加密算法-哈希算法])

* 4、Server hello(服务端随机数ramdom_S，服务端选择的TSL版本(2.0)和密文族Cipher Suites[密钥交换(非对称加密)算法-对称加密算法-哈希算法])

* 5、Server Certificate(服务端证书(包含签名，及证书机构的相关信息)，核心是服务端的(证书)公钥，以及服务器地址)

* 6、Server Key Exchange Generation，服务端创建密钥对

* 7、Server Key Exchange，服务端向客户端发送公钥

* 8、Server Hello Done，服务端告知客户端，发送信息结束

* 9、Server certificate validation，客户端验证证书

* 10、Client Key Exchange Generation，客服端端创建密钥对

* 11、Client Key Exchange，客服端向服务端发送公钥

* 12、Client Encryption Keys Calculation，客服端计算得到 Master key = Fuc(random_C, random_S, pre-Master key)，作为对称加密的秘钥

* 13、Client Change Cipher Spec，客服端通知服务端，表示随后的信息都将用双方商定的加密方法和密钥发送。

* 14、Client Handshake Finished，客户端握手结束通知，表示客户端的握手阶段已经结束。这一项同时也是前面发送的所有内容的hash值，用来供服务器校验。

* 15、客服端用「服务端公钥」加密传输一个pre-master key 给服务端

* 16、Server Encryption Keys Calculation，客服端计算得到 Master key = Fuc(random_C, random_S, pre-Master key)，作为对称加密的秘钥

* 17、Server Change Cipher Spec，服务端通知客户端，表示随后的信息都将用双方商定的加密方法和密钥发送。

* 18、Server Handshake Finished，服务器握手结束通知，表示服务器的握手阶段已经结束。这一项同时也是前面发送的所有内容的hash值，用来供客户端校验。


引用：

[关于HTTPS一篇文章就够了 - chiclaim - CSDN博客](https://blog.csdn.net/johnny901114/article/details/54754921?utm_source=blogxgwz3)

[HTTPS为什么安全 &分析 HTTPS 连接建立全过程 - 腾讯WeTest](https://wetest.qq.com/lab/view/110.html)

[SSL/TLS协议运行机制的概述 - 阮一峰的网络日志](http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html)

[The Illustrated TLS Connection: Every Byte Explained](https://tls.ulfheim.net/)

[HTTPS 原理浅析及其在 Android 中的使用 - 腾讯Bugly的专栏 - CSDN博客](https://blog.csdn.net/tencent_bugly/article/details/72626127)

[SSL协议详解_知识库_博客园](https://kb.cnblogs.com/page/162080/)