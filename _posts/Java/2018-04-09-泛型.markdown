---
layout: post
title:  "泛型"
date:   2018-04-09 13:13:00 +0800
categories: Java
tags: Java基础
author: pepe
description: 『 泛型 』
---

### **泛型**

* 泛型，即“参数化类型”。一提到参数，最熟悉的就是定义方法时有形参，然后调用此方法时传递实参。
* 那么参数化类型怎么理解呢？顾名思义，就是将类型由原来的具体的类型参数化。
* 类似于方法中的变量参数，此时类型也定义成参数形式（可以称之为类型形参），然后在使用/调用时传入具体的类型（类型实参）。

### **泛型本质**

* 在使用泛型类时，虽然传入了不同的泛型实参，但并没有真正意义上生成不同的类型。
* 传入不同泛型实参的泛型类在内存上只有一个，即还是原来的最基本的类型。
* 当然，在逻辑上我们可以理解成多个不同的泛型类型。
* 究其原因，在于Java中的泛型这一概念提出的目的，只是作用于代码编译阶段，在编译过程中，对于正确检验泛型结果后，会将泛型的相关信息擦。
* 也就是说，成功编译过后的class文件中是不包含任何泛型信息的。泛型信息不会进入到运行时阶段。

对此总结成一句话：泛型类型在逻辑上看以看成是多个不同的类型，实际上都是相同的基本类型。

### **泛型和子类型**
为了彻底理解泛型，这里看个例子：（Apple为Fruit的子类）

```
List<Apple> apples = new ArrayList<Apple>(); //1  
List<Fruit> fruits = apples; //2 
``` 
 
* 第1行代码显然是对的，但是第2行是否对呢？
* 我们知道`Fruit fruit = new Apple()`，这样肯定是对的，即苹果肯定是水果，但是第2行在编译的时候会出错。
* 这会让人比较纳闷的是一个苹果是水果，为什么一箱苹果就不是一箱水果了呢？
* 可以这样考虑，我们假定第2行代码没有问题，那么我们可以使用语句
* `fruits.add(new Strawberry())`（Strawberry为Fruit的子类）在fruits中加入草莓了，
* 但是这样的话，一个List中装入了各种不同类型的子类水果，这显然是不可以的。
* 因为我们在取出List中的水果对象时，就分不清楚到底该转型为苹果还是草莓了。

通常来说，如果 Apple 是 Fruit 的子类型，G是一种带泛型的类型，则`G<Apple>`不是`G<Fruit>`的子类型。这也许是泛型学习里面最让人容易混淆的一点。

### **泛型类**
```
public class Container<K, V> {
    private K key;
    private V value;

    public Container(K k, V v) {
        key = k;
        value = v;
    }

    public K getKey() {
        return key;
    }

    public void setKey(K key) {
        this.key = key;
    }

    public V getValue() {
        return value;
    }

    public void setValue(V value) {
        this.value = value;
    }
}
```

### **泛型接口**
在泛型接口中，生成器是一个很好的理解，看如下的生成器接口定义：
```
public interface Generator<T> {
    public T next();
}
```
然后定义一个生成器类来实现这个接口：
```
public class FruitGenerator implements Generator<String> {

    private String[] fruits = new String[]{"Apple", "Banana", "Pear"};

    @Override
    public String next() {
        Random rand = new Random();
        return fruits[rand.nextInt(3)];
    }
}
```
调用：
```
public class Main {

    public static void main(String[] args) {
        FruitGenerator generator = new FruitGenerator();
        System.out.println(generator.next());
        System.out.println(generator.next());
        System.out.println(generator.next());
        System.out.println(generator.next());
    }
}
```
输出：
```
Banana
Banana
Pear
Banana
```

### **泛型方法**

* 一个基本的原则是：无论何时，只要你能做到，你就应该尽量使用泛型方法。
* 也就是说，如果使用泛型方法可以取代将整个类泛化，那么应该有限采用泛型方法。

下面来看一个简单的泛型方法的定义：
```
public class Main {

    public static <T> void out(T t) {
        System.out.println(t);
    }

    public static void main(String[] args) {
        out("findingsea");
        out(123);
        out(11.11);
        out(true);
    }
}
```

### **通配符？**

先看一个打印集合中所有元素的代码。
```
//不使用泛型  
void printCollection(Collection c) {                  
    Iterator i=c.iterator();  
    for (k=0;k < c.size();k++) {  
        System.out.println(i.next());  
    }  
}  

//使用泛型  
void printCollection(Collection<Object> c) {  
    for (Object e:c) {  
        System.out.println(e);  
    }  
} 
``` 
 
* 很容易发现，使用泛型的版本只能接受元素类型为Object类型的集合如`ArrayList<Object>()`;
* 如果是`ArrayList<String>`，则会编译时出错。
* 因为我们前面说过，`Collection<Object>`并不是所有集合的超类。
* 而老版本可以打印任何类型的集合，那么如何改造新版本以便它能接受所有类型的集合呢？
* 这个问题可以通过使用通配符来解决。修改后的代码如下所示：

```
//使用通配符？，表示可以接收任何元素类型的集合作为参数  
void printCollection(Collection<?> c) {  
    for (Object e:c) {  
        System.out.println(e);  
    }  
}  
```

* 这里使用了通配符？指定可以使用任何类型的集合作为参数。
* 读取的元素使用了Object类型来表示，这是安全的，因为所有的类都是Object的子类。
* 这里就又出现了另外一个问题，如下代码所示，如果试图往使用通配符？的集合中加入对象，就会在编译时出现错误。
* 需要注意的是，这里不管加入什么类型的对象都会出错。
* 这是因为通配符？表示该集合存储的元素类型未知，可以是任何类型。
* 往集合中加入元素需要是一个未知元素类型的子类型，正因为该集合存储的元素类型未知，所以我们没法向该集合中添加任何元素。
* 唯一的例外是null，因为null是所有类型的子类型，所以尽管元素类型不知道，但是null一定是它的子类型。

```
Collection<?> c=new ArrayList<String>();  
c.add(newObject()); //compile time error，不管加入什么对象都出错，除了null外。  
c.add(null); //OK  
```
 
* 另一方面，我们可以从`List<?> lists`中获取对象，虽然不知道List中存储的是什么类型，但是可以肯定的是存储的类型一定是Object的子类型，
* 所以可以用Object类型来获取值。如`for(Object obj: lists)`，这是合法的。

### **`<? extends T>`**

`<? extends T>`表示类型的上界，表示参数化类型的可能是T 或是 T的子类

```
public abstract class Shape {  
    public abstract void draw(Canvas c);  
}  
  
public class Circle extends Shape {  
    private int x,y,radius;  
    public void draw(Canvas c) { ... }  
}  
  
public class Rectangle extends Shape  
    private int x,y,width,height;  
    public void draw(Canvasc) { ... }  
} 

//原始版本:只能接收元素类型为Shape的List对象
public void drawAll(List<Shape> shapes) {  
    for (Shapes:shapes) {  
        s.draw(this);  
    }  
}  

//使用边界通配符的版本：可以接收元素类型为Shape子类型的列表作为参数了
public void drawAll(List<？exends Shape> shapes) {  
    for (Shapes:shapes) {  
        s.draw(this);  
    }  
} 
```

* 这里就又有个问题要注意了，如果我们希望在`List<？exends Shape> shapes`中加入一个矩形对象，
* 如下所示：`shapes.add(0, new Rectangle()); //compile-time error`
* 那么这时会出现一个编译时错误，原因在于：我们只知道shapes中的元素时Shape类型的子类型，
* 具体是什么子类型我们并不清楚，所以我们不能往shapes中加入任何类型的对象。
* 不过我们在取出其中对象时，可以使用Shape类型来取值，
* 因为虽然我们不知道列表中的元素类型具体是什么类型，但是我们肯定的是它一定是Shape类的子类型。

### **`<? super T>`**

`<? super T>`表示类型下界（Java Core中叫超类型限定），表示参数化类型是此类型的超类型（父类型），直至Object

```
List<Shape> shapes = new ArrayList<Shape>();  
List<? super Cicle> cicleSupers = shapes;  
cicleSupers.add(new Cicle()); //OK, subclass of Cicle also OK  
cicleSupers.add(new Shape()); //ERROR  
```

* 这表示cicleSupers列表存储的元素为Cicle的超类，因此我们可以往其中加入Cicle对象或者Cicle的子类对象，
* 但是不能加入Shape对象。这里的原因在于列表cicleSupers存储的元素类型为Cicle的超类，
* 但是具体是Cicle的什么超类并不清楚。但是我们可以确定的是只要是Cicle或者Circle的子类，则一定是与该元素类别兼容。

```
// compile error:
List<? super Shape> shapes = new ArrayList<Cicle>();
```
* `List<? super Shape>` 示“具有任何 Shape 超类型的列表”，列表的类型至少是一个 Shape 类型，
* 因此可以安全的向其中添加 Shape 及其子类型。
* 由于`List<? super Shape>`中的类型可能是任何 Shape 的超类型，无法赋值为 Shape 的子类型 Cicle 的`List<Cicle>`.

```
// compile error:
Shape item = shapes.get(0);
```

* 因为，List<? super Shape>中的类型可能是任何 Shape 的超类型，
* 所以编译器无法确定get返回的对象类型是 Shape ,还是 Shape 的父类 或 Object.
   
### **边界通配符总结**

* 如果你想从一个数据类型里获取数据，使用` ? extends `通配符
* 如果你想把对象写入一个数据结构里，使用` ? super `通配符
* 如果你既想存，又想取，那就别用通配符。 
  
### **注意**

1、`List<String>`和`List<Integer>`是同一类型
```
/*会导致编译时错误*/   
public class Erasure{  
    public void test(List<String> ls){  
        System.out.println("Sting");  
    }  
    
    public void test(List<Integer> li){  
        System.out.println("Integer");  
    }  
}  
```
2、泛型类型是被所有调用共享的

* 所有泛型类的实例都共享同一个运行时类，类型参数信息会在编译时被擦除。
* 因此考虑如下代码，虽然`ArrayList<String>`和`ArrayList<Integer>`类型参数不同，
* 但是他们都共享ArrayList类，所以结果会是true。

```
List<String>l1 = new ArrayList<String>();  
List<Integer>l2 = new ArrayList<Integer>();  
System.out.println(l1.getClass() == l2.getClass()); //True  
```

3、instanceof

不能对确切的泛型类型使用instanceOf操作。如下面的操作是非法的，编译时会出错。

```
Collection cs = new ArrayList<String>();  
if (cs instanceof Collection<String>){…}// compile error.如果改成instanceof Collection<?>则不会出错。  
```

4、泛型数组

不能创建一个确切泛型类型的数组。

5、反射的话还是能用分辨出对象的类型并且调用相应的方法

* 对于泛型，只是允许程序员在编译时检测到非法的类型而已。
* 但是在运行期时，其中的泛型标志会变化为 Object 类型。

```
List<Integer> list = new ArrayList<>();
list.add(12);
//这里直接添加会报错
list.add("a");
Class<? extends List> clazz = list.getClass();
Method add = clazz.getDeclaredMethod("add", Object.class);
//但是通过反射添加，是可以的
add.invoke(list, "kl");

System.out.println(list)
```

参考：

[Java泛型编程最全总结 - 切梦 - ITeye博客](http://qiemengdao.iteye.com/blog/1525624)

[Java泛型简明教程](http://www.vaikan.com/java-generics-quick-tutorial/)

[Java深度历险（五）——Java泛型](http://www.infoq.com/cn/articles/cf-java-generics)

[JAVA泛型中的有界类型(extends super) - CSDN博客](https://blog.csdn.net/daniel_h1986/article/details/5708605)

[Effective Java (泛型) - Stephen_Liu - 博客园](http://www.cnblogs.com/stephen-liu74/archive/2012/01/20/2228938.html)

[？super T 和? extends T区别 - wf110 - 博客园](http://www.cnblogs.com/friends-wf/p/3582841.html)

[《站在巨著之上谈泛型》系列内容公告 – 金丝燕网](http://swiftlet.net/archives/1964)

[Java泛型让声明方法返回子类型 – 编码人生](http://codelife.me/blog/2014/03/05/returning-subtype-of-declared-type-from-method-by-java-generics/?utm_source=tuicool&utm_medium=referral)