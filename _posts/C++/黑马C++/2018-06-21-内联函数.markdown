---
layout: post
title:  "内联函数"
date:   2018-06-21 14:33:00 +0800
categories: C++
tags: 黑马C++
author: pepe
description: 『 内联函数 』
---

> C语言中有宏函数的概念。宏函数的特点是内嵌到调用代码中去，避免了函数调用的开销。但是由于宏函数的处理发生在预处理阶段，确实了语法检测和有可能带来的语意差错。

### 基本概念
C++提供了inline关键字，实现了真正的内嵌。
```
#include <iostream>
using namespace std;

inline void func(int a)
{
    a = 20;
    cout << a << endl;
}

int main(void)
{
    func(10);
    /*
        // 编译器将内联函数的函数体直接展开
    {
        a = 20;
        cout << a << endl;
    }
    
    */
    
    return 0;
}
```
特点：

* 1、内联函数声明时，inline关键字必须和函数定义(即使函数声明了inline，函数定义也要声明inline)结合在一起，否则编译器会直接忽略内联请求。
* 2、`C++编译器直接将函数体插入在函数调用的地方。`
* 3、内联函数没有普通函数调用时的额外开销(压栈，跳转，返回)。
* 4、内联函数是一种特殊的函数，具有普通函数的特征(参数检查，返回类型等)。
* 5、`内联函数由编译器处理`，直接将编译后的函数体插入调用的地方，`宏代码片段由预处理器处理`，进行简单的文本替换，没有任何编译过程。
* 6、C++中内联编译的限制：
    
    。 不能存在任何形式的循环语句
    。 不能存在过多条件判断语句
    。 函数体不能过于庞大
    。 不能对函数进行取址操作
    。 函数内联声明必须在调用语句之前

* 7、编译器对于内联函数的限制并不是绝对的，内联函数相对于普通函数的优势只是省去了函数调用时压栈，跳转和返回的开销。因此，`当函数体的执行开销大于压栈，挑战和返回所用的开销时，那么内联将无意义。`

总结：

* 优点：避免调用时的额外开销(入栈和出栈操作)
* 代价：由于内联函数的函数体在代码段中会出现多个“副本”，因此会增加代码段的空间。
* 本质：以牺牲代码段空间为代价，提高程序的运行时间的效率。
* 适用场景：函数体很“小”，且被“频繁”调用。




    
    
    
    
    
    
    
    
    
    
    
    
    














