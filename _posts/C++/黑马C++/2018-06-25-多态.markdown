---
layout: post
title:  "多态"
date:   2018-06-25 18:29:00 +0800
categories: C++
tags: 黑马C++
author: pepe
description: 『 多态 』
---

### **多态的实现效果**
> 多态：同样的调用语句有多重不同的表现形态。

### **多态实现的三个条件**

* 1、要有继承
* 2、要有虚函数重写
* 3、要有父类指针(父类引用)指向子类对象

### **多态的C++实现**
> virtual关键字，告诉编译器这个函数要支持多态；不是根据指针类型判断如何调用；而是要根据指针所指向的实际对象类型来判断如何调用。

* C++中通过virtual关键字对多态进行支持
* 使用virtual声明的函数被重写后即可展现多态特性

### **多态的理论基础**
> 动态联编PK静态联编。根据实际的对象类型来判断重写函数的调用。

#### 静态联编和动态联编

* 1、联编是指一个程序模块、代码之间互相关联的过程。
* 2、静态联编(static binding)，是程序的匹配、连接在编译阶段实现，也称为早期匹配。`重载函数使用静态联编。`
* 3、动态联编是指程序联编推迟到运行时进行，所以又称为晚期联编(迟绑定)。`switch语句和if语句是动态联编的例子。` 

> 1、C++与C相同，是静态联编型语言

> 2、在编译时，编译器自动根据指针的类型判断指向的是一个什么样的对象；所以编译器认为父类指针指向的是父类对象。

> 3、由于程序没有运行，所以不可能知道父类指针指向的具体是父类对象还是子类对象，从程序安全的角度，编译器假设父类指针只指向父类对象，因此编译的结果为调用父类的成员函数。这种特性就是静态联编。

> 4、多态的发生是动态联编，是在程序执行的时候判断具体父类指针应该调用的方法。

### 重载、重写、重定义

#### 重载(添加)

* a 相同的范围(在同一个类中)
* b 函数名字相同
* c 参数不同
* d virtual关键字可有可无

#### 重写(覆盖)

> 重写是值子类函数覆盖基类的函数

* a 不同的范围，分别位于基类和子类中
* b 函数的名字相同
* c 参数相同
* d 基类函数必须有virtual关键字

#### 重定义(隐藏)

> 重定义是指子类的函数屏蔽了与其同名的基类函数

* a 如果子类的函数和基类的函数同名，但是`参数不同`，此时不管有无virtual，基类的函数被隐藏
* b 如果子类的函数和基类的函数同名，并且参数也相同，但是`基类函数没有virtual`关键字，此时基类的函数被隐藏

### **多态的重要意义**
> 设计模式的基础，是框架的基石。

### **多态原理探究**
> 虚函数表和vptr指针。





    

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    












