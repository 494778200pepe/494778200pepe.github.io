---
layout: post
title:  "C++对C语言的加强三：const 增强"
date:   2018-06-20 13:43:00 +0800
categories: C++
tags: 黑马C++
author: pepe
description: 『 C++对C语言的加强三：const 增强 』
---

### const基础
```
// const 定义常量 ---> const 意味着「只读」

const int a;
int const b;
// 第一个第二个意思一样，代表一个常量整数

const int* c;
// 第三个 C是一个指向常量整数的指针(所指向的内存数据不能被修改，但是指针本身可以修改)

int* const d;
// 第四个 d是常量指针(指针常量不能被修改，但是它指向的内存空间可以被修改)

const int* const e;
// 第五个 e是一个指向常量整数的常量指针(指针和它指向的内存空间，均不能被修改)
```
合理的利用const的好处

* 1、指针做函数参数，可以有效的提高代码的可读性，减少bug
* 2、清楚的分清参数的输入和输出特性
```
int setTeacher_err(const Teacher* p)
// const修饰形参的时候，不能利用形参修改指针所向的内存空间
```

### C语言中的"冒牌货"
```
#include <stdio.h>

int main()
{
    const int a = 10;
    int* p = (int*)&a;
    printf("a===>%d\n",a);
    
    *p = 11;
    // 虽然a有const修饰，不过仍然可以通过指针p来修改a的值
    printf("a===>%d\n",a);
    
    return 0;
}
```

> C++中的常量(a)是在常量区，是无法改变的,没有内存空间也没有地址。如果用指针去赋值(int* p = (int*)&a;)，那么编译器会临时开辟一个空间，让p存放临时空间的地址。

### const 和 #define 的相同点

C++中的const，是一个真正的常量，而不是c中的「只读」。const修改的常量，在编译期间就已经确定下来了。

### const 和 #define 的不同点

* C++中的const常量 类似于 宏定义：const int c = 5; ≈ #define c 5
* const常量是由编译器处理的，提供类型检查和作用域检查
* 宏定义有预处理器处理，单纯的文本替换

C语言中的const变量

    * C语言中const变量是只读变量，有自己的存储空间。
    
C++中的const常量

    * 可能分配存储空间，也可能不分配存储空间
    * 当const常量为全局，并且需要在其他文件中使用，会分配存储空间
    * 当使用&操作符，取const常量的地址时，会分配存储空间
    * 当const int &a = 10;const修饰引用时，也会分配存储空间


### 真正的枚举

> C语言中的枚举本质就是整型，枚举变量可以用任意整型赋值。而C++中枚举变量，只能用枚举元素来初始化。    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    














