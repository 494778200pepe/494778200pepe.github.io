---
layout: post
title:  "引用"
date:   2018-06-20 14:38:00 +0800
categories: C++
tags: 黑马C++
author: pepe
description: 『 引用 』
---

### 引用的概念

> 变量名，本身是一段内存的引用，即别名(alias)。引用可以看作一个`已定义变量`的别名。

### 规则

* 1、引用没有定义，是一种关系型声明。声明它与原有某一变量(实体)的关系。
* 2、引用的类型和原类型保持一致，且不分配内存。
* 3、引用与被引用的变量有相同的地址。
* 4、引用声明的时候必须初始化，一经声明，不可变更。
* 5、可以对引用，再次引用。多次引用的结果，是某一变量具有多个别名。
* 6、&符号前有数据类型时，是引用。其它都是取地址。

### 引用作为函数参数

> 普通引用在声明时必须用其它的变量进行初始化，引用作为函数参数声明时不进行初始化。

### 引用的意义

* 1、引用作为其它变量的别名而存在，因此在一些场合可以代替指针
* 2、引用相对于指针来说具有更好的可读性和实用性
* 3、C++中引入引用后，可以用引用解决的问题。避免用指针来解决。

### 引用的本质

> 引用有两个特点：1、引用声明的时候必须初始化，一经声明，不可变更，说明是常量;2、引用所占用内存大小和指针是相等的;3、引用作为函数参数时，可以用来修改变量，也就是或能拿到变量的地址，说明是指针。

所以:

* 1、引用在C++的内部实现是一个常量指针(`int* const p`)。
```
Type& name <===> Type* const name
```
* 2、C++编译器在编译过程中使用常量指针作为引用的内部实现，因此`引用所占用的空间大小与指针相同`。
* 3、从使用的角度，引用会让人误会其只是一个别名，没有自己的存储空间。这是C++为了实用性而做出的细节隐藏。
* 4、赋值的时候隐藏了一个取地址&的操作，使用的时候隐藏了一个取值*的操作。
* 5、数组名也是常量指针。
    
间接赋值的3个必要条件：

* 1、定义两个变量(一个实参一个形参)
* 2、建立关联，实参取地址传给形参
* 3、*p形参去间接的修改实参的值

> 引用在实现上，只不过是把：`间接赋值成立在三个条件后后两步合二为一。`当实参传给形参引用的时候，只不过是C++编译器帮我们程序员手工取了一个实参地址，传给了形参引用(常量指针)。
    
### 引用作为函数的返回值(引用当左值)

* 1、当函数返回值为引用时，`若返回栈变量，不能成为其它引用的初始值(不能作为左值使用)。`

```
include <iostream>
using namespace std;

int getA1()
{
    int a = 10;
    return a;
}

int& getA2()
{
    int a = 10;
    return a;
}

int& getA3()
{
    static int a = 10;
    return a;
}

int main(void)
{
    int a1 = 0;
    int a2 = 0;
    
    // 值拷贝
    a1 = getA1();
    
    // 将一个引用赋给一个变量，会有拷贝动作
    // 理解：编译器类似做了如下隐藏操作，a2 = *(getA2());
    a2 = getA2();
    
    // 将一个引用赋给另一个引用作为初始值，`由于是栈的引用，内存非法`
    int &a3 = getA2();
    
    // 将一个引用赋给另一个引用作为初始值，`由于是静态区域，内存合法`
    int &a4 = getA3();

    cout << "a1 = " << a1 << endl;
    cout << "a2 = " << a2 << endl;
    cout << "a3 = " << a3 << endl;
    cout << "a4 = " << a4 << endl;
    
    return 0;
}
```  
* 2、当函数返回值为引用时，`若返回静态变量或全局变量，可以成为其它引用的初始值(可作为右值使用，也可以作为左值使用)`。  
* 3、引用作为函数返回值，如果返回值为引用可以当左值，如果返回值为普通变量不可以当左值。

### 指针引用
```
#include <iostream>
using namespace std;

struct Teacher
{
    char name[64];
    int age;
}

// 被函数调用 获取资源
int getTeacher(Teacher **p)
{
    Teacher *tmp = NULL;
    if(p == NULL){
        return -1;
    }
    tmp = (Teacher *)malloc(sizeof(Teacher));
    if(tmp == NULL){
        return -2;
    }
    tmp->age = 33;
    // p是实参的地址 *实参的地址  去间接的修改实参的值
    *p = tmp;
    
    return 0;
}

//指针的引用 做函数参数
int getTeacher2(Teacher* &myp)
{
    //给myp赋值 相当于给main函数中的pT1赋值
    myp = (Teacher *)malloc(sizeof(Teacher));
    if(myp == NULL){
    return -1;
    }
    myp->age = 36;
    
    return 0;
}

void FreeTeacher(Teacher *pT1)
{
    if(pT1 == NULL){
        return;
    }
    free(pT1);
}

int main(void)
{
    Teacher *pT1 = NULL;
    
    //1 C语言中的二级指针
    getTeacher(&pT1);
    cout << "age:" << pT1->age << endl;
    FreeTeacher(pT1);
    
    //2 C++中的引用 (指针的引用)
    // 引用的本质 间接赋值后2个条件 让C++编译器帮我们程序员做了
    getTeacher2(pT1);
    cout << "age:" << pT1->age << endl;
    FreeTeacher(pT1);
    
    return 0;
}
```

### const引用

const引用有较多使用。它可以防止对象的值被随意修改。因而具有一定特性。
    。(1)`const对象的引用必须是const的，将普通引用绑定到const对象是不合法的。`这个原因比较简单，既然对象是const的，表示不能被修改，引用当然也不能修改，必须使用const引用。实际上，`cosnt int a = 1; int &b = a;`这种写法是不合法的，编译不过。
    。(2)`const引用可使用相关类型的对象(常量，非同类型的变量或表达式)初始化。`这个是const引用与普通引用最大的区别。`const int &a = 2;`是合法的。`double x = 3.14;const int &b = x;`也是合法的。
    
### const引用的原理
    



    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    














