---
layout: post
title:  "引用"
date:   2018-06-20 14:38:00 +0800
categories: C++
tags: 黑马C++
author: pepe
description: 『 引用 』
---

### 引用的概念

> 变量名，本身是一段内存的引用，即别名(alias)。引用可以看作一个`已定义变量`的别名。

### 规则

* 1、引用没有定义，是一种关系型声明。声明它与原有某一变量(实体)的关系。
* 2、引用的类型和原类型保持一致，且不分配内存。
* 3、引用与被引用的变量有相同的地址。
* 4、引用声明的时候必须初始化，一经声明，不可变更。
* 5、可以对引用，再次引用。多次引用的结果，是某一变量具有多个别名。
* 6、&符号前有数据类型时，是引用。其它都是取地址。

### 引用作为函数参数

> 普通引用在声明时必须用其它的变量进行初始化，引用作为函数参数声明时不进行初始化。

### 引用的意义

* 1、引用作为其它变量的别名而存在，因此在一些场合可以代替指针
* 2、引用相对于指针来说具有更好的可读性和实用性
* 3、C++中引入引用后，可以用引用解决的问题。避免用指针来解决。

### 引用的本质

> 引用有两个特点：1、引用声明的时候必须初始化，一经声明，不可变更，说明是常量;2、引用作为函数参数时，可以用来修改变量，也就是或能拿到变量的地址，说明是指针。

所以:

* 1、引用在C++的内部实现是一个常量指针。
```
Type& name <===> Type* const name
```
* 2、C++编译器在编译过程中使用常量指针作为引用的内部实现，因此`引用所占用的空间大小与指针相同`。
* 3、从使用的角度，引用会让人误会其只是一个别名，没有自己的存储空间。这是C++为了实用性而做出的细节隐藏。
    
间接赋值的3个必要条件：

* 1、定义两个变量(一个实参一个形参)
* 2、建立关联，实参取地址传给形参
* 3、*p形参去间接的修改实参的值

> 引用在实现上，只不过是把：`间接赋值成立在三个条件后后两步合二为一。`当实参传给形参引用的时候，只不过是C++编译器帮我们程序员手工取了一个实参地址，传给了形参引用(常量指针)。
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    














