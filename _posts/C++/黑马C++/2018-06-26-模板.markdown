---
layout: post
title:  "模板"
date:   2018-06-26 15:09:00 +0800
categories: C++
tags: 黑马C++
author: pepe
description: 『 模板 』
---

### **函数模板**
```
template<typename T>
template<class T>

template<typename 类型参数表>
返回类型    函数模板名(函数参数列表)
{
    函数模板体
}

template<typename T>
void myswap(T &a,T &b)
{
    T t = a;
    a = b;
    b = t;
}
```

> template的语义是模板的意思，尖括号中先写关键字 typename 或者 clas ，后面跟一个类型 T，此类即是虚拟的类型。

* 1、当函数模板和普通函数都符合调用时，优先选择普通函数 


### **编译器对模板机制剖析**

* 1、编译器并不是把函数模板处理成能够处理任意类的函数
* 2、编译器从函数模板通过具体类型产生不同的函数
* 3、编译器会对函数模板进行`两次编译`，在声明的地方对模板代码本身进行编译;在调用的地方对参数替换后的代码进行编译。
    
### **类模板** 
```
template<typename T>
template<class T>

template<class T>
class A
{
public:
    A(T a)
    {
        this->a = a;
    }
protected:
    T a;
}
```   

#### 模板类的派生
```
#include <iostream>
using namespace std;

template<class T>
class A
{
public:
    A(T a)
    {
        this->a = a;
    }
protected:
    T a;
};

// 模板类派生普通类
// 结论：子类从模板类继承的时候，需要让编译器知道  父类的数据类型具体是什么(数据类型的本质：固定大小内存块的别名)A<int>
class B:public A<int>
{
public:
    B(int a,int b):A<int>(a)
    {
        this->b = b;
    }
    
    void printB()
    {
        cout << "b:     " << b << endl;
    }
private:
    int b;
};

// 模板类派生模板类
template<class T>
class C:public A<T>
{
public:
    C(T a,T c):A<T>(a)
    {
        this->c = c;
    }
    
    void printC()
    {
        cout << "C:     " << c << endl;
    }
private:
    T c;
}
```

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    












