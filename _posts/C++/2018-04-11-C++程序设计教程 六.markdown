---
layout: post
title:  "C++程序设计教程 六"
date:   2018-04-11 22:25:00 +0800
categories: C++
tags: C++程序设计教程
author: pepe
description: 『 程序结构 』
---
## **学习目标**

* 1、外部存储类型和静态存储类型在多文件程序中的联络作用。
* 2、作用域、可见性与生命期的概念。
* 3、使用头文件、理解多文件结构和编译预处理概念。

### 一：**外部存储类型 extern**

* 1、默认的函数声明或定义总是`extern`的。
* 2、`extern`用于修饰函数，相当于告诉连接程序，在所有组成该程序的文件中搜索该函数的定义。
* 3、所以在`c1.cpp`中声明`func1()`和`func2()`，相当于在所有文件中搜索两个函数的定义。
* 4、`extern`用于修饰变量，仅仅是变量声明，而不是变量定义。
* 5、在外部存储变量定义时，是不需要加`extern`的，使用的外部文件才需要加。

### 二、**静态存储类型 static**

* 1、`static`用于修饰变量，使该变量只在这个源文件中可用。
* 2、静态全局变量对组成该程序的其他源文件是无效的，同时不同文件中同名的变量不冲突。
* 3、`static`用于修饰函数，使该函数只在这个源文件中可用。
* 4、静态全局函数允许其他源文件建立并使用同名的函数，而不互相冲突。

### 三、**作用域**

* 1、局部作用域(块作用域)：{}以内的变量在{}以内、if或者switch()内的变量在条件表达式语句以内。
* 2、函数作用域：         
* 3、函数原型作用域：函数原型声明中的参数，开始于声明的左括号，结束语右括号。
* 4、文件作用域：在函数定义之外的变量，其作用域从说明点开始，到源文件结束。
* 5、类作用域

### 四：**生命期**

* 1、静态生命期：与程序的运行期相同。
* 2、全局变量、静态全局变量、静态局部变量，都具有全局生命期。
* 3、换句话说：具有文件作用域的变量具有静态生命期。
* 4、局部生命期：程序经过声明点时开始，作用域结束时结束。
* 5、局部变量(函数参数，函数内部声明的变量，块中声明的变量)，具有局部生命期。
* 6、动态生命期：malloc()和free(),new 和delete。

### 五、**头文件**
头文件一般可包含：

* 类型声明，如`enum CLOLOR{//...}`
* 函数声明，如`extern int fn(char s);`
* 内联函数定义，如`inline char fn(char p){return *p++;}`
* 常量定义，如`const float pi = 3.14;`
* 数据声明，如`extern int m; extern int a[];`
* 枚举，如`enum BOOLEAN{false ,true};`
* 包含指令(可嵌套)，如`#include<iostream.h>`
* 宏定义，如`#define Case break;case`
* 注释，如`//check for end of file`

头文件不宜包含：

* 一般函数定义，如`char fn(char p){return *p++};`
* 数据定义，如`int a; int b[5];`
* 常量聚集定义，如`const int c[] = {1,2,3};`

### 六、**编译预处理**

* 1、`#include`，两种格式:`#include<文件名>`和`#include "文件名"`
* 2、`#define`，建立常量被`const`取代，定义带参数的宏，被inline内联函数取代。
* 3、条件编译指令：`#if,#else,#elif,#endif,#ifdef,#ifndef,#undef`












