---
layout: post
title:  "C++程序设计教程 八"
date:   2018-04-13 23:32:01 +0800
categories: C++
tags: C++程序设计教程
author: pepe
description: 『 指针 』
---
### **定义指针**

* 1、`int* p;`和`int * p;`以及`int *p;`意义相同
* 2、指针的类型是地址，不是整数型，所以`*p = &count;`会引起类型转换的错误。
* 3、但强制转换是合法的。允许语句`*p = (int)&count;`，其赋值的意义：将地址值作为整型赋给变量。
* 4、`指针初始化时没有赋值将非常危险`。因为没有赋初值的指针是一个随机地址，后面的赋值操作很有可能引起错误。
* 5、`指针是有类型的。它是值为地址的变量，该地址是内存中另一个类型变量的存储位置。或者说指针是具有某个类型的地址。`
* 6、只有加法和减法可用于指针运算。

### **数组指针**

* 1、数组名可以拿来初始化指针，数组名就是数组第一个元素的地址。`int a[100]; int* p = a;`
* 2、`a[i] <=> *(a+i) <=> p[i] <=> *(p+i)`
* 3、指针表示`*(a+i)`效率 >= `a[i]`，但后者可读性更好。
* 4、`数组名是指针常量，区别于指针变量，所以，给数组名赋值是错误的。`


### **const指针**

* 1、`在指针定义语句的类型前加const，表示指向的对象是常量。`
* 2、`说白了，就是限制用指针去修改指向的值。指针的指向可以改，指向的值可以改，但就是不能通过指针改。`
* 3、`定义指向常量的指针只限制指针的间接访问操作，而不能规定指针指向的值本身的操作规定性。`
* 4、`在指针定义语句的指针名前加const，表示指针本身是常量。`例如：

```
char* const pc = "asdf";        // 指针名前加const定义指针常量   
pc = "dfgh";                    // error:指针常量不能改变其指针值
*pc = 'b';                      // ok:pc内容为"bsdf"
*(pc+1) = 'c';                  // ok:pc内容为"bcdf"
*pc++ = 'y';                    // error:指针常量不能改变其指针值
const int b = 28;               // 
int* const pi = &b;             // error:不能将const int* 转换成 int*
```

* 5、指向常量的指针常量：`const int* const cpc = &ci;`

```
const int ci = 7;
int ai;
const int* const cpc = &ci;     // 指向常量的指针常量
const int* const cpi = &ai;     // ok
cpi = &ai;                      // error:指针值不能修改
*cpi = 39;                      // error:不能修改所指向的对象
ai = 39;                        // ok

//说明：
// 1、const int* const cpc = &ci; 等同于 
// 2、const int *cpc; 第一个 const 修饰 *pc，表示不能不能通过 *pc来改变 该 int值。
// 3、int* const cpc; 第二个 const 修饰 cpc，表示该指针是常量，不能+-，不能修改其指针值。
```

* 6、常量指针常量定义`const int * const cpc = &b;`告诉编译，`cpc`和`*cpc`都是常量，它们都不能作为左值进行操作。 

### **参数指针**

* 1、数组作为函数参数时，实质上是一个指针。
* 2、`Sum(int array[],int n)`和`Sum(int* array,int n)` 是等价的。
* 3、由于形参 array 是指针变量而不是数组，所以它占的空间大小是指针变量大小而不是数组空间大小。
* 4、不能`sizeof(array)/sizeof(*array)`来求取数组元素个数。
* 5、由于指针可以间接访问变量，使得函数调用中值的返回变得灵活多样，可以更方便地实现函数之间的数据传递。
* 6、但是，指针的灵活是以破坏函数的黑盒特性为代价的。

### **指针函数**

* 1、返回指针的函数称为指针函数。
* 2、`指针函数不能把在它内部说明的具有局部作用域的数据地址作为返回值。`
* 3、局部作用域的变量，存在于栈中，随时可能被回收，然后替换。
* 4、可以返回堆地址，可以返回全局或静态变量的地址，但不要返回局部变量的地址。

### **void指针**

* 1、







