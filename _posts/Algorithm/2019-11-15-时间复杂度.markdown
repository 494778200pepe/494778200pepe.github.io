---
layout: post
title:  "时间复杂度"
date:   2019-11-15 09:25:00 +0800
categories: Algorithm
tags: Algorithm
author: pepe
description: 『 时间复杂度 』
---

> 算法（Algorithm）是指用来操作数据、解决程序问题的一组方法。对于同一个问题，使用不同的算法，也许最终得到的结果是一样的，但在过程中消耗的资源和时间却会有很大的区别。

那么我们应该如何去衡量不同算法之间的优劣呢？

主要还是从算法所占用的「时间」和「空间」两个维度去考量。

* 时间维度：是指执行当前算法所消耗的时间，我们通常用「时间复杂度」来描述。

* 空间维度：是指执行当前算法需要占用多少内存空间，我们通常用「空间复杂度」来描述。

因此，评价一个算法的效率主要是看它的时间复杂度和空间复杂度情况。然而，有的时候时间和空间却又是「鱼和熊掌」，不可兼得的，那么我们就需要从中去取一个平衡点。


### **常见的时间复杂度量级有：**

* 常数阶O(1)

* 对数阶O(logN)

* 线性阶O(n)

* 线性对数阶O(nlogN)

* 平方阶O(n²)

* 立方阶O(n³)

* K次方阶O(n^k)【n的k次方，符号不会敲】

* 指数阶(2^n)

上面从上至下依次的时间复杂度越来越大，执行的效率越来越低。

评估算法时间复杂度的具体步骤是：

（1）找出算法中重复执行次数最多的语句的频度来估算算法的时间复杂度；

（2）保留算法的最高次幂，忽略所有低次幂和高次幂的系数；

（3）将算法执行次数的数量级放入大Ο记号中。

以下对常见的算法时间复杂度度量进行举例说明：

#### **（1）O(1)：常量阶，操作的数量为常数，与输入的数据的规模无关。n = 1,000,000 -> 1-2 operations**

```
temp=a;
a=b;
b=temp;
```

**用常数1来取代运行时间中所有加法常数**；

上面语句共三条操作，单条操作的频度为1，即使他有成千上万条操作，也只是个较大常数，这一类的时间复杂度为O(1)；

#### **（2）O(logn)：对数阶，如二分搜索算法。操作的数量与输入数据的规模 n 的比例是 log2 (n)。n = 1,000,000 -> 30 operations**

比如: 1,3,5,6,7,9；找出7
如果全部遍历时间频度为n；
二分查找每次砍断一半，即为n/2；
随着查询次数的提升，频度变化作表：

<table width="400" border="3" cellspacing="0" cellpadding="0">
    <tr>
        <td>查询次数</td>
        <td>时间频度</td>
    </tr>
    <tr>
        <td>1</td>
        <td>n/2</td>
    </tr>
    <tr>
        <td>2</td>
        <td>n/2^2</td>
    </tr>
    <tr>
        <td>3</td>
        <td>n/2^3</td>
    </tr>  
	<tr>
        <td>k</td>
        <td>n/2^k</td>
    </tr> 	
</table>

当最后找到7的时候时间频度则是1；
也就是:
n/2^k = 1;
n = 2^k；
k则是以2为底，n的对数，就是Log2N；
那么二分查找的时间复杂度就是O(Log2N)；
 
#### **（3）O(n)：线性阶，如n个数内找最大值。操作的数量与输入数据的规模 n 成正比。n = 10,000 -> 5000 operations**

![Algorithm_time1]({{ site.baseurl }}/assets/images/Algorithm/Algorithm_time1.png)

这一类算法中操作次数和n正比线性增长。

#### **（4）O(nlogn)：对数阶，如快速排序算法**

上面看了二分查找，是LogN的（LogN没写底数默认就是Log2N)；
线性对数阶就是在LogN的基础上多了一个线性阶；
比如这么一个算法流程：
数组a和b，a的规模为n，遍历的同时对b进行二分查找，如下代码：

```
for(int i =0;i<n;i++){
    binary_search(b);
}
```

#### **（5）O(n^2)：平方阶，如选择排序，冒泡排序。操作的数量与输入数据的规模 n 的比例为二次平方。n = 500 -> 250,000 operations**

```
    private static void 等差数列平方阶() {
        int n = 100;
        for (int i = 0; i < n; i++) {//执行n次
            for (int j = i; j < n; j++) {//执行n - i次
                System.out.println("哈哈");
            }
        }
    }
```

#### **（6）O(n^3)：立方阶，如两个n阶矩阵的乘法运算。操作的数量与输入数据的规模 n 的比例为三次方。n = 200 -> 8,000,000 operations**

```
long SumMNK(int n, int m,int k){
      long sum = 0;
      for (int x = 0; x < n; x++)
        for (int y = 0; y < m; y++)
          for(int z=0;z<k;z++)

           sum += x * y*z;
      return sum;
    }
```

#### **（7）O(2^n)：指数阶，如n个元素集合的所有子集的算法。指数级的操作，快速的增长。n = 20 -> 1048576 operations**

```
long Fib(long long N){
	return (N < 3) ? 1 : Fib(N - 1) + Fib(N - 2);
}
```

![Algorithm_time2]({{ site.baseurl }}/assets/images/Algorithm/Algorithm_time2.png)

#### **（8）O(n!)：阶乘阶，如n个元素全部排列的算法**



```
O(1) 常数阶 < O(logn) 对数阶 < O(n) 线性阶 < O(nlogn) < O(n^2) 平方阶 < O(n^3) < { O(2^n) < O(n!) < O(n^n) }
```

> 最后三项用大括号把他们括起来是想要告诉大家，如果日后大家设计的算法推导出的“大O阶”是大括号中的这几位，那么趁早放弃这个算法，在去研究新的算法出来吧。因为大括号中的这几位即便是在 n 的规模比较小的情况下仍然要耗费大量的时间，算法的时间复杂度大的离谱，基本上就是“不可用状态”。






参考：

[算法的时间与空间复杂度（一看就懂） - 不止思考 - CSDN博客](https://blog.csdn.net/jsjwk/article/details/84315770)

[算法时间复杂度计算方式 - yq272393925的博客 - CSDN博客](https://blog.csdn.net/yq272393925/article/details/89146451)

[算法—时间复杂度 - 千里android - CSDN博客](https://blog.csdn.net/user11223344abc/article/details/81485842)

[算法复杂度分析 - 匠心十年 - 博客园](https://www.cnblogs.com/gaochundong/p/complexity_of_algorithms.html)

[评估算法及算法的时间复杂度](https://baijiahao.baidu.com/s?id=1609024533531824968&wfr=spider&for=pc)

[算法系列之六 算法时间复杂度计算 - reposkeeper - 博客园](https://www.cnblogs.com/reposkeeper-wx/p/suan-fa-xi-lie-zhi-liu-suan-fa-shi-jian-fu-za-du-j.html)

















