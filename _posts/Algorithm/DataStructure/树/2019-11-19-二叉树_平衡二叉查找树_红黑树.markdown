---
layout: post
title:  "二叉树_平衡二叉查找树_红黑树"
date:   2019-11-19 10:06:00 +0800
categories: Algorithm
tags: DataStructure
author: pepe
description: 『 平衡二叉查找树_红黑树 』
---

### **红黑树定义和性质**
红黑树是一种含有红黑节点并能自平衡的二叉查找树。它必须满足下面性质：

* 性质1：每个节点要么是黑色，要么是红色。
* 性质2：根节点是黑色。
* 性质3：每个叶子节点（NIL）是黑色。
* 性质4：每个红色节点的两个子节点一定都是黑色。
* 性质5：任意一节点到每个叶子节点的路径都包含数量相同的黑节点。

从性质5又可以推出：

* 性质5.1：如果一个节点存在黑子节点，那么该节点肯定有两个子节点

图1就是一颗简单的红黑树。其中Nil为叶子节点，并且它是黑色的。(值得提醒注意的是，在Java中，叶子节点是为null的节点。)

![rbt1]({{ site.baseurl }}/assets/images/Algorithm/tree/rbt1.png)

图1 一颗简单的红黑树

红黑树并不是一个完美平衡二叉查找树，从图1可以看到，根节点P的左子树显然比右子树高，但左子树和右子树的黑节点的层数是相等的，也即任意一个节点到到每个叶子节点的路径都包含数量相同的黑节点(性质5)。所以我们叫红黑树这种平衡为**黑色完美平衡**。

红黑树一些节点的叫法，如图2所示：

![rbt2]({{ site.baseurl }}/assets/images/Algorithm/tree/rbt2.png)

### **红黑树的自平衡**

红黑树能自平衡，它靠的是什么？三种操作：左旋、右旋和变色。

* **左旋**：以某个节点作为支点(旋转节点)，其右子节点变为旋转节点的父节点，右子节点的左子节点变为旋转节点的右子节点，左子节点保持不变。如图3。

* **右旋**：以某个节点作为支点(旋转节点)，其左子节点变为旋转节点的父节点，左子节点的右子节点变为旋转节点的左子节点，右子节点保持不变。如图4。

* **变色**：节点的颜色由红变黑或由黑变红。

![rbt3]({{ site.baseurl }}/assets/images/Algorithm/tree/rbt3.png)

![rbt4]({{ site.baseurl }}/assets/images/Algorithm/tree/rbt4.png)

### **红黑树查找**

因为红黑树是一颗二叉平衡树，并且查找不会破坏树的平衡，所以查找跟二叉平衡树的查找无异：

* 1.从根节点开始查找，把根节点设置为当前节点；
* 2.若当前节点为空，返回null；
* 3.若当前节点不为空，用当前节点的key跟查找key作比较；
* 4.若当前节点key等于查找key，那么该key就是查找目标，返回当前节点；
* 5.若当前节点key大于查找key，把当前节点的左子节点设置为当前节点，重复步骤2；
* 6.若当前节点key小于查找key，把当前节点的右子节点设置为当前节点，重复步骤2；

如图5所示。

![rbt5]({{ site.baseurl }}/assets/images/Algorithm/tree/rbt5.png)


### **红黑树插入**

插入操作包括两部分工作：一查找插入的位置；二插入后自平衡。查找插入的父节点很简单，跟查找操作区别不大：

* 1.从根节点开始查找；
* 2.若根节点为空，那么插入节点作为根节点，节束。
* 3.若根节点不为空，那么把根节点作为当前节点；
* 4.若当前节点为null，返回当前节点的父节点，节束。
* 5.若当前节点key等于查找key，那么该key所在节点就是插入节点，更新节点的值，节束。
* 6.若当前节点key大于查找key，把当前节点的左子节点设置为当前节点，重复步骤4；
* 7.若当前节点key小于查找key，把当前节点的右子节点设置为当前节点，重复步骤4；

如图6所示。

![rbt6]({{ site.baseurl }}/assets/images/Algorithm/tree/rbt6.png)

ok，插入位置已经找到，把插入节点放到正确的位置就可以啦，但**插入节点是应该是什么颜色呢？答案是红色。**理由很简单，红色在父节点（如果存在）为黑色节点时，红黑树的黑色平衡没被破坏，不需要做自平衡操作。但如果插入节点是黑色，那么插入位置所在的子树黑色节点总是多1，必须做自平衡。

所有插入情景如图7所示。

![rbt7]({{ site.baseurl }}/assets/images/Algorithm/tree/rbt7.png)

![rbt8]({{ site.baseurl }}/assets/images/Algorithm/tree/rbt8.png)

#### **插入情景1：红黑树为空树**

处理：把插入节点作为根节点，并把节点设置为黑色。

#### **插入情景2：插入节点的Key已存在**

处理：

* 把I设为当前节点的颜色
* 更新当前节点的值为插入节点的值

#### **插入情景3：插入节点的父节点为黑色**

处理：直接插入。

#### **插入情景4：插入节点的父节点为红色**

再次回想下红黑树的性质2：根节点是黑色。**如果插入的父节点为红节点，那么该父节点不可能为根节点，所以插入节点总是存在祖父节点**。这点很重要，因为后续的旋转操作肯定需要祖父节点的参与。

情景4又分为很多子情景：

* 插入情景4.1：叔叔节点不存在

	* 4.1.1：父节点在左
	
		* 4.1.1.1：插入节点是左节点
		* 4.1.1.2：插入节点是右节点
		
	* 4.1.2：父节点在右
	
		* 4.1.2.1：插入节点是左节点
		* 4.1.2.2：插入节点是右节点

* 插入情景4.2：叔叔节点存在,红色

	* 4.2.1：父节点在左
	
		* 4.2.1.1：插入节点是左节点
		* 4.2.1.2：插入节点是右节点
		
	* 4.2.2：父节点在右
	
		* 4.2.2.1：插入节点是左节点
		* 4.2.2.2：插入节点是右节点
	
* 插入情景4.3：叔叔节点存在，黑色

	* 4.3.1：父节点在左
		
		* 4.3.1.1：插入节点是左节点
		* 4.3.1.2：插入节点是右节点
		
	* 4.3.2：父节点在右
	
		* 4.3.2.1：插入节点是左节点
		* 4.3.2.2：插入节点是右节点

##### **插入情景4.1：叔叔节点不存在**

情况一：父节点在左

![rbt4.1.1_left]({{ site.baseurl }}/assets/images/Algorithm/tree/rbt4.1.1_left.png)
![rbt4.1.1_right]({{ site.baseurl }}/assets/images/Algorithm/tree/rbt4.1.1_right.png)

情况二：父节点在右

![rbt4.1.2_left]({{ site.baseurl }}/assets/images/Algorithm/tree/rbt4.1.2_left.png)
![rbt4.1.2_right]({{ site.baseurl }}/assets/images/Algorithm/tree/rbt4.1.2_right.png)
	
##### **插入情景4.2：叔叔节点存在，红色**

情况一：父节点在左

![rbt4.2.1_left]({{ site.baseurl }}/assets/images/Algorithm/tree/rbt4.2.1_left.png)

情况二：父节点在右

![rbt4.2.2_right]({{ site.baseurl }}/assets/images/Algorithm/tree/rbt4.2.2_right.png)

##### **插入情景4.3：叔叔节点存在，黑色**

如果叔叔节点为黑色，而父节点为红色，那么叔叔节点所在的子树的黑色节点就比父节点所在子树的多了，这不满足红黑树的性质5。

所以对于一个正常的红黑树来说，这种情况是不存在的。

### **红黑树删除**

二叉树删除节点找**替代节点**有3种情情景：

* 情景1：若删除节点无子节点，直接删除
* 情景2：若删除节点只有一个子节点，用子节点替换删除节点
* 情景3：若删除节点有两个子节点，用后继节点（大于删除节点的最小节点）替换删除节点


![rbt9]({{ site.baseurl }}/assets/images/Algorithm/tree/rbt9.png)

![rbt10]({{ site.baseurl }}/assets/images/Algorithm/tree/rbt10.png)

#### **删除情景1：替换节点是红色节点**

处理：替换节点颜色变为删除节点的颜色

#### **删除情景2：替换节点是黑色节点**

这里首先要明确：

* 如果删除节点没有子节点，那么简单，直接删除[不存在替换节点]
* 如果删除节点有一个子节点，那也简单，子节点顶上[替换节点：唯一的子节点]
* 如果删除节点有两个子节点，那么，用后继节点（大于删除节点的最小节点）替换删除节点 [替换节点：后继节点]

情景2又分为很多子情景：

* 删除情景2.1：替换节点是其父节点的左子节点

	* 2.1.0：替换节点没有兄弟节点[不存在这种可能，替换节点本身是黑色的，没有兄弟节点，另一边岂不是少一个子树]

	* 2.1.1：替换节点的兄弟节点是红节点[既然是红节点，一定有相应的黑色子节点了，毕竟替换节点是黑色的]    ？？？？？？？？？？？？？？？？
		
	* 2.1.2：替换节点的兄弟节点是黑节点，父节点可红可黑
	
		* 2.1.2.0：兄弟节点没有子节点[如果父节点是红色，那么兄弟节点和父节点互换颜色，如果父节点是黑色，？？？？？？？？]
		* 2.1.2.1：兄弟节点只有一个子节点，那必然是红的[如果父节点是红色，左旋，兄红父子黑，如果父节点是黑色，左旋，都变黑色]
		* 2.1.2.2：兄弟节点右红，左任意[要么是红色，要么是没有，不可能是黑色]
		* 2.1.2.3：兄弟节点右黑，左红
		* 2.1.2.4：兄弟节点右黑，左黑

* 删除情景2.2：替换节点是其父节点的右子节点

	* 2.2.0：替换节点没有兄弟节点[不存在这种可能，替换节点本身是黑色的，没有兄弟节点，那边岂不是少一个子树]

	* 2.2.1：替换节点的兄弟节点是红节点[既然是红节点，一定有相应的黑色子节点了]
		
	* 2.2.2：替换节点的兄弟节点是黑节点
	
		* 2.2.2.0：兄弟节点没有子节点
		* 2.2.2.1：兄弟节点右红，左任意
		* 2.2.2.2：兄弟节点右黑，左红
		* 2.2.2.3：兄弟节点右黑，左黑

##### **删除情景2.1：替换节点是其父节点的左子节点**		
		
情况2.1.1：替换节点的兄弟节点是红节点

![rbt2.1.1]({{ site.baseurl }}/assets/images/Algorithm/tree/rbt2.1.1.png)

情况二：替换节点的兄弟节点是黑节点















参考：

[30张图带你彻底理解红黑树 - 简书](https://www.jianshu.com/p/e136ec79235c)

[《红黑树》学习心得 - AlanTu - 博客园](https://www.cnblogs.com/alantu2018/p/8985743.html)


































