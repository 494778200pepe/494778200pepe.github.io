---
layout: post
title:  "二叉树_平衡二叉查找树_红黑树"
date:   2019-11-19 10:06:00 +0800
categories: Algorithm
tags: DataStructure
author: pepe
description: 『 平衡二叉查找树_红黑树 』
---

### **红黑树定义和性质**
红黑树是一种含有红黑结点并能自平衡的二叉查找树。它必须满足下面性质：

* 性质1：每个节点要么是黑色，要么是红色。
* 性质2：根节点是黑色。
* 性质3：每个叶子节点（NIL）是黑色。
* 性质4：每个红色结点的两个子结点一定都是黑色。
* 性质5：任意一结点到每个叶子结点的路径都包含数量相同的黑结点。

从性质5又可以推出：

* 性质5.1：如果一个结点存在黑子结点，那么该结点肯定有两个子结点

图1就是一颗简单的红黑树。其中Nil为叶子结点，并且它是黑色的。(值得提醒注意的是，在Java中，叶子结点是为null的结点。)

![rbt1]({{ site.baseurl }}/assets/images/Algorithm/tree/rbt1.png)

图1 一颗简单的红黑树

红黑树并不是一个完美平衡二叉查找树，从图1可以看到，根结点P的左子树显然比右子树高，但左子树和右子树的黑结点的层数是相等的，也即任意一个结点到到每个叶子结点的路径都包含数量相同的黑结点(性质5)。所以我们叫红黑树这种平衡为**黑色完美平衡**。

红黑树一些结点的叫法：

![rbt2]({{ site.baseurl }}/assets/images/Algorithm/tree/rbt2.png)

### **红黑树的自平衡**

红黑树能自平衡，它靠的是什么？三种操作：左旋、右旋和变色。

* **左旋**：以某个结点作为支点(旋转结点)，其右子结点变为旋转结点的父结点，右子结点的左子结点变为旋转结点的右子结点，左子结点保持不变。如图3。

* **右旋**：以某个结点作为支点(旋转结点)，其左子结点变为旋转结点的父结点，左子结点的右子结点变为旋转结点的左子结点，右子结点保持不变。如图4。

* **变色**：结点的颜色由红变黑或由黑变红。

![rbt3]({{ site.baseurl }}/assets/images/Algorithm/tree/rbt3.png)

![rbt4]({{ site.baseurl }}/assets/images/Algorithm/tree/rbt4.png)



























参考：

[30张图带你彻底理解红黑树 - 简书](https://www.jianshu.com/p/e136ec79235c)

[《红黑树》学习心得 - AlanTu - 博客园](https://www.cnblogs.com/alantu2018/p/8985743.html)


































