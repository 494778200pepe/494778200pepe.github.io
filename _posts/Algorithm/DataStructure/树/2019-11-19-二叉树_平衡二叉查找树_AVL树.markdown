---
layout: post
title:  "二叉树_平衡二叉查找树_AVL树"
date:   2019-11-19 10:05:00 +0800
categories: Algorithm
tags: DataStructure
author: pepe
description: 『 平衡二叉查找树_AVL树 』
---

### **AVL树**

AVL树，也称平衡二叉搜索树，AVL是其发明者姓名简写。AVL树属于树的一种，而且它也是一棵二叉搜索树，不同的是他通过一定机制能保证二叉搜索树的平衡，平衡的二叉搜索树的查询效率更高。

### **AVL树特点**

* AVL树是一棵二叉搜索树。

* AVL树的左右子节点也是AVL树。

* AVL树拥有二叉搜索树的所有基本特点。

* 每个节点的左右子节点的高度之差的绝对值最多为1，即平衡因子为范围为[-1,1]。

![BinaTree7]({{ site.baseurl }}/assets/images/Algorithm/tree/BinaTree7.png)

![BinaTree8]({{ site.baseurl }}/assets/images/Algorithm/tree/BinaTree8.png)

### **平衡因子**

将二叉树上节点的左子树高度减去右子树高度的值称为该节点的平衡因子BF(Balance Factor)。

在图二右边的AVL树上

* 节点50的左子树高度为3，右子树高度为2，BF= 3-2 = 1；

* 节点45的左子树高度为2，右子树高度为1，BF= 2-1 = 1；

* 节点46的左子树高度为0，右子树高度为0，BF= 0-0 = 0；

* 节点65的左子树高度为0，右子树高度为1，BF= 0-1 = -1；

* 对于平衡二叉树，BF的取值范围为[-1,1]。如果发现某个节点的BF值不在此范围，则需要对树进行调整。

### **最小不平衡子树**

距离插入节点最近的，且平衡因子的绝对值大于1的节点为根的子树.。

![BinaTree9]({{ site.baseurl }}/assets/images/Algorithm/tree/BinaTree9.png)

 在图三中，左边二叉树的节点45的BF = 1，插入节点43后，节点45的BF = 2。节点45是距离插入点43最近的BF不在[-1,1]范围内的节点，因此以节点45为根的子树为最小不平衡子树。




















参考：

[平衡二叉树 - 月雲之霄的博客 - CSDN博客](https://blog.csdn.net/isunbin/article/details/81707606)

[看图轻松理解数据结构与算法系列(AVL树) - 掘金](https://juejin.im/post/5b6b897df265da0fab404318)



































