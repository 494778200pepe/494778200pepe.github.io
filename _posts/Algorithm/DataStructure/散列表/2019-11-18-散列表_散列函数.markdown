---
layout: post
title:  "散列表_散列函数"
date:   2019-11-18 10:01:00 +0800
categories: Algorithm
tags: DataStructure
author: pepe
description: 『 散列函数 』
---


散列表用的就是数组支持按照下标随机访问的时候，时间复杂度是O(1)的特性。我们通过散列函数把元素的键值映射为下标，然后将数据存储在数组中对应下标的位置。当我们按照键值查询元素时，我们用同样的散列函数，将键值转化数组下标，从对应的数组下标的位置取数据。

散列函数，顾名思义，它是一个函数。我们可以把它定义成hash(key)，其中 key 表示元素的键值，hash(key)的值表示经过散列函数计算得到的散列值。

散列函数设计的基本要求： 

* 1. 散列函数计算得到的散列值是一个非负整数； 

* 2. 如果 key1 = key2，那 hash(key1) == hash(key2)； 

* 3. 如果 key1 ≠ key2，那 hash(key1) ≠ hash(key2)。


### **散列冲突**

第三点要求看起来合情合理，但是在真实的情况下，要想找到一个不同的 key 对应的散列值都不一样的散列函数，几乎是不可能的。即使像业界著名的MD5、SHA、CRC等哈希算法，也无法完全避免这种散列冲突。而且，因为数组的存储 空间有限，也会加大散列冲突的概率。所以我们几乎无法找到一个完美的无冲突的散列函数，即使能找到，付出的时间成本、计算成本 也是很大的，所以针对散列冲突问题，我们需要通过其他途径来解决。

再好的散列函数也无法避免散列冲突。那究竟该如何解决散列冲突问题呢？我们常用的散列冲突 解决方法有两类，开放寻址法（open addressing）和链表法（chaining）。























