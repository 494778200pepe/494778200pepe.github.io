---
layout: post
title:  "链表_双向链表"
date:   2019-11-16 10:23:00 +0800
categories: Algorithm
tags: DataStructure
author: pepe
description: 『 双向链表 』
---

> 双向链表属于链表的一种，也叫双链表双向即是说它的链接方向是双向的，它由若干个节点组成，每个节点都包含下一个节点和上一个节点的指针，所以从双向链表的任意节点开始，都能很方便访问他的前驱结点和后继节点。

### **双链表特点**

* 创建双链表时无需指定链表的长度。

* 比起单链表，双链表需要多一个指针用于指向前驱节点，所以需要存储空间比单链表多一点。

* 双链表的插入和删除需要同时维护 next 和 prev 两个指针。

* 双链表中的元素访问需要通过顺序访问，即要通过遍历的方式来寻找元素。

### **实现**

```
// 节点
public class TwoWayNode<T> extends Node<T> {

    private T data;
    private TwoWayNode<T> pre;
    private TwoWayNode<T> next;

    public TwoWayNode() {
    }

    public TwoWayNode(T data) {
        this.data = data;
    }

    public TwoWayNode(T data, TwoWayNode<T> pre, TwoWayNode<T> next) {
        this.data = data;
        this.pre = pre;
        this.next = next;
    }

    public T getData() {
        return data;
    }

    public void setData(T data) {
        this.data = data;
    }

    public TwoWayNode<T> getPre() {
        return pre;
    }

    public void setPre(TwoWayNode<T> pre) {
        this.pre = pre;
    }

    public TwoWayNode<T> getNext() {
        return next;
    }

    public void setNext(TwoWayNode<T> next) {
        this.next = next;
    }
}
```

```
// 实现双向链表
public class TwoWayLinkedList<T> implements ILink<T> {

    private TwoWayNode<T> header;
    private TwoWayNode<T> tail;
    private int length;

    public TwoWayLinkedList() {
        header = new TwoWayNode<>(null);
        tail = new TwoWayNode<>(null);
        header.setNext(tail);
        tail.setPre(header);
    }

    public TwoWayLinkedList(T element) {
        header = new TwoWayNode<>(null);
        tail = new TwoWayNode<>(null);
        TwoWayNode node = new TwoWayNode<>(element, header, tail);
        header.setNext(node);
        tail.setPre(node);
        length++;
    }

    @Override
    public int size() {
        return length;
    }

    @Override
    public boolean isEmpty() {
        return length == 0;
    }

    @Override
    public void add(T element) {
        TwoWayNode node = new TwoWayNode<>(element);
        if (length == 0) {
            node.setNext(tail);
            node.setPre(header);
            header.setNext(node);
            tail.setPre(node);
            length++;
        } else {
            TwoWayNode pre = tail.getPre();
            pre.setNext(node);
            node.setPre(pre);
            node.setNext(tail);
        }
        length++;
    }

    @Override
    public void set(int index, T element) {
        // index 的范围是 0 - length，length为最后一个，等同于add
        if (index < 0 || index > length) {
            throw new IndexOutOfBoundsException("删除索引超出边界！");
        }
        TwoWayNode<T> node = new TwoWayNode<>(element);
        if (index == 0) {
            if(isEmpty()){
                node.setNext(tail);
                node.setPre(header);
                header.setNext(node);
                tail.setPre(node);
            }else{
                TwoWayNode<T> next = header.getNext();
                next.setPre(node);
                node.setNext(next);
                node.setPre(header);
                header.setNext(node);
            }
        } else if (index == length) {
            TwoWayNode<T> pre = tail.getPre();
            pre.setNext(node);
            node.setPre(pre);
            node.setNext( tail);
            tail.setPre(node);
        } else {
            TwoWayNode<T> pre = getNodeByIndex(index - 1);
            TwoWayNode<T> next = getNodeByIndex(index);
            pre.setNext(node);
            next.setPre(node);
            node.setPre(pre);
            node.setNext(next);
        }
        length++;
    }

    @Override
    public boolean remove(T element) {
        int index = getDataIndex(element);
        if (index == -1) {
            return false;
        }
        remove(index);
        return true;
    }

    @Override
    public void remove(int index) {
        if (index < 0 || index > length - 1) {
            throw new IndexOutOfBoundsException("删除索引超出边界！");
        }
        if (isEmpty()) {
            throw new NullPointerException("链表为空！");
        }
        if (index == 0) {
            TwoWayNode<T> node = header.getNext();
            TwoWayNode<T> next = node.getNext();
            header.setNext(next);
            next.setPre(header);
        } else if (index == length - 1) {
            TwoWayNode<T> node = tail.getPre();
            TwoWayNode<T> pre = node.getPre();
            tail.setPre(pre);
            pre.setNext(tail);
        } else {
            TwoWayNode<T> pre = getNodeByIndex(index - 1);
            TwoWayNode<T> del = getNodeByIndex(index);
            TwoWayNode<T> next = del.getNext();
            pre.setNext(next);
            next.setPre(pre);
        }
        length--;
    }

    @Override
    public int getDataIndex(T element) {
        if (element == null) {
            throw new NullPointerException("元素为空！");
        }
        if (isEmpty()) {
            throw new NullPointerException("链表为空！");
        }
        TwoWayNode<T> curr = header.getNext();
        for (int i = 0; i < length; i++, curr = curr.getNext()) {
            if (curr.getData().equals(element)) {
                return i;
            }
        }
        return -1;
    }

    @Override
    public T get(int index) {
        return getNodeByIndex(index).getData();
    }

    @Override
    public TwoWayNode<T> getNodeByIndex(int index) {
        if (index < 0 || index > length - 1) {
            throw new IndexOutOfBoundsException("索引越界！");
        }
        if (isEmpty()) {
            throw new NullPointerException("链表为空！");
        }
        TwoWayNode<T> curr = header.getNext();
        for (int i = 0; i < length; i++, curr = curr.getNext()) {
            if (i == index) {
                return curr;
            }
        }
        return null;
    }

    @Override
    public boolean contains(T element) {
        if (element == null) {
            throw new NullPointerException("元素为空！");
        }
        if (isEmpty()) {
            return false;
        }
        TwoWayNode<T> curr = header.getNext();
        for (int i = 0; i < length; i++, curr = curr.getNext()) {
            if (element.equals(curr.getData())) {
                return true;
            }
        }
        return false;
    }

    @Override
    public Object[] toArray() {
        Object[] array = new Objects[length];
        TwoWayNode<T> node = header.getNext();
        for (int i = 0; i < length; i++) {
            array[i] = node.getData();
            node = node.getNext();
        }
        return array;
    }

    @Override
    public void printLink() {
        System.out.println("打印链表");
        TwoWayNode<T> node = header.getNext();
        for (int i = 0; i < length; i++) {
            System.out.print("[");
            System.out.print(node.getData().toString());
            System.out.print("]");
            System.out.println("");
            node = node.getNext();
        }
    }

    @Override
    public void clear() {
        header.setNext(tail);
        tail.setPre(header);
        length = 0;
    }
}
```




参考：

[看图轻松理解数据结构与算法系列(双向链表) - 掘金](https://juejin.im/post/5b5d1a9af265da0f47352f14)

[双向链表-java实现 - cai.zhiming的日志 - 网易博客](http://ahcaizhiming.blog.163.com/blog/static/13676545220148216355600/)







































