---
layout: post
title:  "链表_单向链表"
date:   2019-11-16 10:21:00 +0800
categories: Algorithm
tags: DataStructure
author: pepe
description: 『 单向链表 』
---


> 单向链表属于链表的一种，也叫单链表，单向即是说它的链接方向是单向的，它由若干个节点组成，每个节点都包含下一个节点的指针。

![SingleLinkedList]({{ site.baseurl }}/assets/images/Algorithm/DataStructure/SingleLinkedList.png)

### **单链表特点**

* 创建单链表时无需指定链表的长度，这个比起数组结构更加有优势，而数组纵使实现成动态数组也是需要指定一个更大的数组长度，而且要把原来的数组元素一个个复制到新数组中。

* 单链表中的节点添加/删除操作很方便，它可以直接改变指针指向来实现添加/删除操作，而某些场景下数组的添加/删除会导致移动剩下的元素。

* 单链表中的元素访问需要通过顺序访问，即要通过遍历的方式来寻找元素，而数组则可以使用随机访问，这点算是单链表的缺点，随机访问慢。

### **实现**

```
// 节点
public class Node<T> {
 
	public T getData() {
		return data;
	}
 
	public void setData(T data) {
		this.data = data;
	}
 
	public Node getNext() {
		return next;
	}
 
	public void setNext(Node next) {
		this.next = next;
	}
 
	//存储数据
	private T data;
	//下一个节点
	private Node<T> next;
	
	//定义构造方法
	public Node(T data,Node<T> next){
		this.data=data;
		this.next=next;
	}
	
	public Node(){
		
	}
}
```


```
//实现单向链表
public class SingleLinkedList<T> implements ILink<T>{

    private Node<T> header;
    private Node<T> tail;
    private int length;

    public SingleLinkedList() {
        header = tail = null;
    }

    public SingleLinkedList(T element) {
        header = new Node<>(element, null);
        tail = header;
        length++;
    }

    public int size() {
        return length;
    }

    public boolean isEmpty() {
        return length == 0;
    }

    public void add(T element) {
        if (header == null) {
            header = new Node<>(element, null);
            tail = header;
        } else {
            Node node = new Node<>(element, null);
            tail.setNext(node);
            tail = node;
        }
        length++;
    }

    public void set(int index, T element) {
        if (index < 0 || index > length - 1) {
            throw new IndexOutOfBoundsException("删除索引超出边界！");
        }
        Node<T> node = new Node<>(element);
        if (index == 0) {
            node.setNext(header);
            header = node;
        } else {
            Node<T> pre = getNodeByIndex(index - 1);
            Node<T> next = getNodeByIndex(index);
            pre.setNext(node);
            node.setNext(next);
        }
        length++;
    }

    public boolean remove(T element) {
        int index = getDataIndex(element);
        if (index == -1) {
            return false;
        }
        remove(index);
        return true;
    }

    public void remove(int index) {
        if (index < 0 || index > length - 1) {
            throw new IndexOutOfBoundsException("删除索引超出边界！");
        }
        if (header == null) {
            throw new NullPointerException("链表为空！");
        }
        if (index == 0) {
            header = header.getNext();
        } else {
            Node<T> pre = getNodeByIndex(index - 1);
            Node<T> del = getNodeByIndex(index);
            pre.setNext(del.getNext());
        }
        length--;
    }

    public int getDataIndex(T element) {
        if (element == null) {
            throw new NullPointerException("元素为空！");
        }
        if (header == null) {
            throw new NullPointerException("链表为空！");
        }
        Node<T> curr = header;
        for (int i = 0; i < length; i++, curr = curr.getNext()) {
            if (curr.getData().equals(element)) {
                return i;
            }
        }
        return -1;
    }

    public T get(int index) {
        return getNodeByIndex(index).getData();
    }

    public Node<T> getNodeByIndex(int index) {
        if (index < 0 || index > length - 1) {
            throw new IndexOutOfBoundsException("索引越界！");
        }
        Node<T> curr = header;
        for (int i = 0; i < length; i++, curr = curr.getNext()) {
            if (i == index) {
                return curr;
            }
        }
        return null;
    }

    public boolean contains(T element) {
        if (element == null) {
            throw new NullPointerException("元素为空！");
        }
        if (header == null) {
            return false;
        }
        Node<T> curr = header;
        for (int i = 0; i < length; i++, curr = curr.getNext()) {
            if (curr.getData().equals(element)) {
                return true;
            }
        }
        return false;
    }

    public Object[] toArray() {
        Object[] array = new Objects[length];
        Node<T> node = header;
        int index = 0;
        while (node != null) {
            array[index] = node.getData();
            node = node.getNext();
            index++;
        }
        return array;
    }

    public void printLink() {
        Node<T> node = header;
        while (node != null) {
           System.out.println(node.getData().toString());
            node = node.getNext();
        }
    }

    public void clear(){
        header = tail = null;
        length = 0;
    }

    public static void main(String[] args) {

        SingleLinkedList<String> myTest=new SingleLinkedList();
        myTest.add("123");
        myTest.add("234");
        myTest.add("wang");
        System.out.println(myTest.size());
        myTest.printLink();
        myTest.set(2,"test");
        myTest.remove(3);
        myTest.printLink();
        System.out.println(myTest.get(2));
        System.out.println(myTest.getDataIndex("wangpeili"));
    }
    
}
```

参考：

[看图轻松理解数据结构与算法系列(单向链表) - 掘金](https://juejin.im/post/5b5914b26fb9a04fda4e1fef)

[单向链表的Java实现，以及相关函数。 - CSDN博客](https://blog.csdn.net/daguairen/article/details/52738510)





































