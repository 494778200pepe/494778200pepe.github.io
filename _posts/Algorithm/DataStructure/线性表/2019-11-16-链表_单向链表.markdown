---
layout: post
title:  "链表_单向链表"
date:   2019-11-16 10:21:00:00 +0800
categories: Algorithm
tags: DataStructure
author: pepe
description: 『 单向链表 』
---


> 单向链表属于链表的一种，也叫单链表，单向即是说它的链接方向是单向的，它由若干个节点组成，每个节点都包含下一个节点的指针。

![SingleLinkedList]({{ site.baseurl }}/assets/images/Algorithm/DataStructure/SingleLinkedList.png)

### **单链表特点**

* 创建单链表时无需指定链表的长度，这个比起数组结构更加有优势，而数组纵使实现成动态数组也是需要指定一个更大的数组长度，而且要把原来的数组元素一个个复制到新数组中。

* 单链表中的节点删除操作很方便，它可以直接改变指针指向来实现删除操作，而某些场景下数组的删除会导致移动剩下的元素。

* 单链表中的元素访问需要通过顺序访问，即要通过遍历的方式来寻找元素，而数组则可以使用随机访问，这点算是单链表的缺点。

### **实现**

```
// 节点
public class Node<T> {
 
	public T getData() {
		return data;
	}
 
	public void setData(T data) {
		this.data = data;
	}
 
	public Node getNext() {
		return next;
	}
 
	public void setNext(Node next) {
		this.next = next;
	}
 
	//存储数据
	private T data;
	//下一个节点
	private Node<T> next;
	
	//定义构造方法
	public Node(T data,Node<T> next){
		this.data=data;
		this.next=next;
	}
	
	public Node(){
		
	}
}
```

```
//实现单向链表
public class SingleLinkImpl<T> {
 
	//保存链表的头节点
	private Node<T> header;
	
	//保存链表的尾节点
	private Node<T> tail;
	
	//保存节点数
	int length=0;
	
	//创建一个空的单向链表
	public SingleLinkImpl(){
		header=null;
		tail=null;
	}
	
	//指定某一个元素创建一个单向链表
	public SingleLinkImpl(T element){
		header=new Node<T>(element, null);
		//头和尾都是指向同一个
		tail=header;
		length++;
	}
	
	//返回链表的长度
	public int getLength(){
		return length;
	}
	
	//采用尾插入法为链表添加新的节点
	public void add(T data){
		
		//判断此时是否为空链表
		if(header==null){
			header=new Node<T>(data, null);
			//头和尾指向同一个节点
			tail=header;
		}else{
			
			//创建新的节点
			Node<T> newNode=new Node<T>(data,null);
			//尾部节点next指向新增的节点
			tail.setNext(newNode);
			//新的节点作为尾部节点
			tail=newNode;
		}
		length++;
	}
	
	
	//获取链表中索引为index出的元素
	public T getData(int index){
		return getNodeByIndex(index).getData();
	}
	
	private Node<T> getNodeByIndex(int index){
		if(index<0||index>length-1){
			throw new IndexOutOfBoundsException("索引越界！");
		}
		//从头节点开始
		Node<T> current=header;
		for(int i=0;i<length&¤t!=null;i++,current=current.getNext()){
			if(i==index){
				return current;
			}
		}
		return null;
	}
	
	
	//查询指定元素的索引哈
	public int getDataIndex(T data){
		Node<T> current=header;
		for(int i=0;i<length&¤t!=null;i++,current=current.getNext()){
			if(current.getData().equals(data)){
				return i;
			}
		}
		return -1;
	}
	
	//向单向链表中指定位置插入一个元素
	public void insertDataByIndex(T data,int index){
		if(index<0||index>length-1){
			throw new IndexOutOfBoundsException("插入的位置有错误！");
		}
		//如果链表还是空的话，这个是要考虑的哈
		if(header==null){
			add(data);
			length++;
		}else{
			
			//考虑好是否是在链表头插入的哈
			if(index==0){
				header=new Node<T>(data,header);
				length++;
			}else{
				
				//获取前一个节点
				Node<T> prev=getNodeByIndex(index-1);
				//改变指向
				prev.setNext(new Node<T>(data,prev.getNext()));
				length++;
			}
		}
	}
	
	//删除索引中的指定的节点
	public void myDelete(int index){
		if(index<0||index>length-1){
			throw new IndexOutOfBoundsException("删除索引超出边界！");
		}
		if(header==null){
			throw new NullPointerException("链表为空！");
		}
		
		//判断是不是删除第一个节点
		if(index==0){
			//改变头节点 哈！
			header=header.getNext();
			length--;
		}else{
			//获取删除的节点哈！
			Node<T> del=getNodeByIndex(index);
			//获取删除节点的前一个节点
			Node<T> prev=getNodeByIndex(index-1);
			
			prev.setNext(del.getNext());
			length--;
		}
	}
	
	public static void main(String[] args) {
		
		SingleLinkImpl myTest=new SingleLinkImpl();
		myTest.add("123");
		myTest.add("234");
		myTest.add("wang");
		myTest.add(123);
		System.out.println(myTest.getLength());
		myTest.insertDataByIndex("test", 2);
		myTest.myDelete(4);
		System.out.println(myTest.getData(2));
		System.out.println(myTest.getDataIndex("wangpeili"));
	}
}
```

参考：

[看图轻松理解数据结构与算法系列(单向链表) - 掘金](https://juejin.im/post/5b5914b26fb9a04fda4e1fef)

[单向链表的Java实现，以及相关函数。 - CSDN博客](https://blog.csdn.net/daguairen/article/details/52738510)





































