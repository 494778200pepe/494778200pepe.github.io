---
layout: post
title:  "时间复杂度与空间复杂度的取舍问题"
date:   2019-11-15 10:56:00 +0800
categories: Algorithm
tags: DataStructure
author: pepe
description: 『 时间复杂度与空间复杂度的取舍问题 』
---



查阅了诸多资料，最后还是感觉这段解释比较靠谱，下面摘出这篇博客的观点：
https://blog.csdn.net/qiumengchen12/article/details/45697405

就目前来说，**除了在一些特殊情况下，我们都是更加注重时间复杂度，而不是空间复杂度。注意，这里我们强调了，除了一些特殊情况外，有些特殊情况下，空间复杂度可能会更加重要。**

那么，究竟什么时候应该着重考虑时间复杂度，什么时候应该着重考虑空间复杂度呢？我们来看一个例子：

> 设想现在需要由你来完成一个程序设计，程序要求是这样的：要求输入年份，返回该年份是否是闰年。

一提到这个问题，我想如果你学习过任何一门语言，你可能都做过类似的题目。你可能思路已经非常清晰了，满百除四百，不满除以4。

额，先不要急。我们来看看还能不能进一步提高性能，降低时间复杂度。也就是用空间复杂度来换取时间复杂度。比如，如果使用我们程序的用户，只会查看当前年份未来几年和过去几年的日历的话，我们完全可以使用一个比如：2100个元素的数组，每个元素为0或1，分别表示平年和闰年。这样当用户查询的时候，就不需要再进行复杂的逻辑判断，而只需要取出对应下标位置的元素即可。
反过来，如果我们的用户经常查询跨度上万年的日历信息（万年历），那么，我们肯定不能使用上面牺牲空间复杂度来换取时间复杂度的方案解决。因为如此巨大的空间消耗是我们损失不起的。

**而，编程的精髓和美，并不在于一方的退让和妥协。而是在于如何在二者之间取一个平衡点，完成华丽变身。那么，对于我们这种程序应该如何权衡呢？**

我想到的一种方案是：将与当前年份相近的几年存为固定数据，查询时只需要读取即可。而对于那些和当前年份相距较远的年份的数据，在用户请求查询时动态生成。

这样，既能**在损失可接受空间的情况下，大幅度提高性能，又能保证空间的损失不至于太大而无法接受。我想当用户查询据今较远的数据时，有一些时间上的等待，也是可以接受的。**

<font color="#dd0000">总结下这一段的核心思想：不能简单的说时间复杂度就比空间复杂度重要，在特定场景下空间复杂度反而比时间复杂度重要，在程序中我们需要综合考虑让时间和空间的消耗达到一个平衡点，从上面平闰年计算的例子来看，我们可以缓存前后几年间的平润年，因为内存开销在可控范围内，至少是在现有条件下能够体验到的可接受范围，所以这几年的数据我们可以用增大空间消耗来减少时间的消耗，如果说要将一万年的所有平闰年数据都存上，那么即便是内存能撑得住也是得不偿失的，所以这时候我们用增大时间开销（网络请求，动态加载）去交换减少空间的开销（省去了万级数据的存储空间）； 所以综上，这就是个综合考量的问题；</font><br />  

**另外我总是在想一个牛角尖问题，时间和空间都是算法复杂度的考量标准，但是现在说算法好坏好像更多的人关注的时间复杂度，空间复杂度却不去考虑，或者说空间复杂度不是那么重要？这是为什么呢？**

上面也分析了，时间换空间或空间换时间都是根据现实情况来分析，而目前的现实情况就是，硬件内存这些东西的成本与极致的用户体验，比如更快的响应，操作的流畅感比起来，就目前的条件来看，重要程度是更低的，随着空间可接受度增大，时间可接受程度相对变小，说白了，就是现在空间条件宽裕了（各大设备厂家无脑怼硬件，说明目前空间资源成本相对较低），大家拼的就是速度，谁的算法执行快，谁的产品用户体验更好，谁在竞争中更有优势；




参考：

[算法—时间复杂度 - 千里android - CSDN博客](https://blog.csdn.net/user11223344abc/article/details/81485842)



















