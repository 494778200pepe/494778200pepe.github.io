---
layout: post
title:  "排序算法"
date:   2018-01-30 13:28:00 +0800
categories: Other
tags: 排序算法
author: pepe
description: 『 排序算法 』
---


![排序算法]({{ site.baseurl }}/assets/images/sort1.png)
![算法比较]({{ site.baseurl }}/assets/images/sort2.png)

相关概念：

1、时间复杂度

     * 时间复杂度可以认为是对排序数据的总的操作次数。反映当n变化时，操作次数呈现什么规律。
     * 常见的时间复杂度有：常数阶O(1),对数阶O(log2n),线性阶O(n), 线性对数阶O(nlog2n),平方阶O(n2)
     * 时间复杂度O(1)：算法中语句执行次数为一个常数，则时间复杂度为O(1),

2、空间复杂度

    * 空间复杂度是指算法在计算机内执行时所需存储空间的度量，它也是问题规模n的函数
    * 空间复杂度O(1)：当一个算法的空间复杂度为一个常量，即不随被处理数据量n的大小而改变时，可表示为O(1)
    * 空间复杂度O(log2N)：当一个算法的空间复杂度与以2为底的n的对数成正比时，可表示为O(log2n)
                                 ax=N，则x=logaN，
    * 空间复杂度O(n)：当一个算法的空间复杂度与n成线性比例关系时，可表示为0(n).

3、排序算法稳定性：

    * 假定在待排序的记录序列中，存在多个具有相同的关键字的记录，
    * 若经过排序，这些记录的相对次序保持不变，
    * 即在原序列中，ri=rj，且ri在rj之前，而在排序后的序列中，ri仍在rj之前，
    * 则称这种排序算法是稳定的；否则称为不稳定的。

* 堆排序、快速排序、希尔排序、直接选择排序不是稳定的排序算法
* 基数排序、冒泡排序、直接插入排序、折半插入排序、归并排序是稳定的排序算法。

### 冒泡排序
```
    public static void bubbleSort(int[] array) {
        if (null == array || array.length == 0) {
            return;
        }
        int j;
        int temp;
        for (int i = 0; i < array.length - 1; i++) {
            for (j = 0; j < array.length - 1; j++) {
                if (array[j] > array[j + 1]) {
                    temp = array[j + 1];
                    array[j + 1] = array[j];
                    array[j] = temp;
                }
            }
        }
    }
```

### 选择排序
```
    public static void selectSort(int[] data) {
        if (null == data || data.length == 0) {
            return;
        }
        int k;
        int j;
        for (int i = 0; i < data.length; i++) {
            k = i;
            for (j = i + 1; j < data.length; j++) {
                if (data[k] > data[j]) {
                    k = j;
                }
            }
            if (k != i) {
                int temp = data[i];
                data[i] = data[k];
                data[k] = temp;
            }
        }
    }
```

### 插入排序
```
    public static void insertSort(int[] data) {
        if (null == data || data.length == 0) {
            return;
        }
        int j;
        int target;
        for (int i = 1; i < data.length; i++) {
            j = i;
            target = data[i];
            while (j > 0 && target < data[j - 1]) {
                data[j] = data[j - 1];
                j--;
            }
            data[j] = target;
        }
    }
```

### 折半插入排序
```
    public static void binaryInsertSort(int[] data) {
        for (int i = 1; i < data.length; i++) {
            int temp = data[i];
            int low = 0;
            int high = i - 1;
            while (low <= high) {
                int mid = (low + high) / 2;
                if (temp < data[mid]) {
                    high = mid - 1;
                } else {
                    low = mid + 1;
                }
            }
            for (int j = i; j >= low + 1; j--) {
                data[j] = data[j - 1];
            }
            data[low] = temp;
        }
    }
```

### 快速排序
```
     public static void fastSort(int[] array, int l, int r) {
        if (l < r) {
            int left = l;
            int right = r;
            int midValue = array[left + (right - left) / 2];
            do {
                while (array[right] > midValue) {
                    right--;
                }
                while (array[left] < midValue) {
                    left++;
                }
                if (left <= right) {
                    int temp = array[left];
                    array[left] = array[right];
                    array[right] = temp;
                    right--;
                    left++;
                }else{
                    break;
                }
            } while (left <= right);
            fastSort(array, l, right);
            fastSort(array, left, r);
        }
```

参考：

[各类排序算法的对比及实现 - CSDN博客](http://blog.csdn.net/wangiijing/article/details/51485119)

[排序算法稳定性_百度百科](https://baike.baidu.com/item/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%A8%B3%E5%AE%9A%E6%80%A7/9763250?fr=aladdin)

[各种排序算法比较 - IT-驿站 - 博客园](https://www.cnblogs.com/lizr-ithouse/p/5839384.html)

[MoreWindows Blog - CSDN博客](http://blog.csdn.net/morewindows/article/category/859207)






