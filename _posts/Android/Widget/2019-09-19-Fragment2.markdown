---
layout: post
title:  "Fragement2"
date:   2019-09-19 14:55:00 +0800
categories: Android
tags: Widget
author: pepe
description: 『 Fragement2 』
---

### **Fragment Arguments**

```
starter和newInstance:快捷创建启动方法

setArguments方法必须在fragment创建以后，Activity add 前完成。
```

### **Fragment的startActivityForResult**

> 调用 getActivity().setResult(ListTitleFragment.REQUEST_DETAIL, intent);

### **SingleFragmentActivity**

抽象一个Activity出来，托管我们的Single Fragment，抽象出来的Activity的代码为：
```
import android.os.Bundle;
import androidx.appcompat.app.AppCompatActivity;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;
import com.pepe.widget.R;

/**
 * @author 1one
 * @date 2019/9/19.
 */
public abstract class SingleFragmentActivity extends AppCompatActivity {

    protected abstract Fragment createFragment();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_fragment_result);

        FragmentManager fm = getSupportFragmentManager();
        Fragment fragment = fm.findFragmentById(R.id.id_fragment_container);

        if (fragment == null) {
            fragment = createFragment();
            fm.beginTransaction().add(R.id.id_fragment_container, fragment).commit();
        }
    }
}
```

那么，有了这个SingleFragmentActivity，我们的 SingleContentActivity 和 SingleListActivity 也能大变身了~

```
public class SingleContentActivity extends SingleFragmentActivity {

    private ResultContentFragment mContentFragment;

    @Override
    protected Fragment createFragment() {
        String title = getIntent().getStringExtra(ResultContentFragment.ARGUMENT);
        mContentFragment = ResultContentFragment.newInstance(title);
        return mContentFragment;
    }
}

public class SingleListActivity extends SingleFragmentActivity {

    private ResultListFragment mListFragment;

    @Override
    protected Fragment createFragment() {
        mListFragment = new ResultListFragment();
        return mListFragment;
    }
}
```

### **FragmentPagerAdapter与FragmentStatePagerAdapter**

* FragmentPagerAdapter：对于不再需要的fragment，选择调用detach方法，仅销毁视图，并不会销毁fragment实例。

* FragmentStatePagerAdapter：会销毁不再需要的fragment，当前事务提交以后，会彻底的将fragmeng从当前Activity的FragmentManager中移除，
  state标明，销毁时，会将其onSaveInstanceState(Bundle outState)中的bundle信息保存下来，
  当用户切换回来，可以通过该bundle恢复生成新的fragment，
  也就是说，你可以在onSaveInstanceState(Bundle outState)方法中保存一些数据，在onCreate中进行恢复创建。

> 如上所说，使用FragmentStatePagerAdapter当然更省内存，但是销毁新建也是需要时间的。
  一般情况下，如果你是制作主页面，就3、4个Tab，那么可以选择使用FragmentPagerAdapter，
  如果你是用于ViewPager展示数量特别多的条目时，那么建议使用FragmentStatePagerAdapter。





参考：

[Android Fragment 你应该知道的一切 - Hongyang - CSDN博客](https://blog.csdn.net/lmj623565791/article/details/42628537)

[FragmentActivity的简单使用 - 王丰蛋哥 - 博客园](https://www.cnblogs.com/wangfengdange/p/4918323.html)

[Android--Fragment你应该明白的一些疑难点](https://mp.weixin.qq.com/s/EYSGI0iX0etNLlKItM7HLw)

Fragment全解析系列（一）：那些年踩过的坑 - 简书
https://www.jianshu.com/p/d9143a92ad94
Fragment全解析系列（二）：正确的使用姿势 - 简书
https://www.jianshu.com/p/fd71d65f0ec6

