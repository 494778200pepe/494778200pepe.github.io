---
layout: post
title:  "Proguard混淆"
date:   2017-11-28 17:23:00 +0800
categories: Android
tags: Android
author: pepe
description: 『 Proguard混淆 』
---

混淆为什么要保留类名或方法名？
    
    1、让C/C++程序可以通过 jni 使用对应的 java 方法
    2、四大组件由于在Android Manifest.xml 里面注册了，防止系统找不到
    3、R文件混淆会导致引用错误
 
[ProGuard manual](https://www.guardsquare.com/en/products/proguard/manual/usage)
 
### **Proguard介绍** 
   
> Proguard，翻译过来是“护卫兵” 。包含四个功能：

* 压缩(Shrink):检测和删除没有使用的类，字段，方法和特性

* 优化(Optimize):分析和优化Java字节码

* 混淆(Obfuscate):使用简短的无意义的名称，对类、字段和方法进行重命名

* 预检(Preveirfy):用来对Java class进行预验证(预验证主要是针对JME开发来说的，Android中没有预验证过程，默认是关闭)
   
```
buildTypes {
    release {
        // minifyEnabled 为true是开启Proguard的功能，false是关闭
        minifyEnabled true
        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
}
```
 
### **Proguard工作流程** 

![proguard1]({{ site.baseurl }}/assets/images/android/Proguard/proguard1.png)

#### **Shrink** 

* 1、检测并移除没有用到的类，变量，方法和属性

* 2、Proguard 把 `Entry Points` 作为搜索的入口，进行递归检索，以此来确定哪些部分未使用到

#### **Optimize** 

* 1、分析和优化Java字节码

* 2、针对那些非 `Entry Points` 的类和方法会被设置成 `private`，`static` 或 `final`，没有使用到的参数会被移除，有些方法可能会被标记为内联的

#### **Obfuscate** 

* 1、使用简短的无意义的名称，对类，字段和方法进行重命名

* 2、对非EntryPoint的类和类的成员进行重命名，也就是用其它无意义的名称代替

* 3、为什么需要保留一些类和类的成员(方法和变量)不被重命名呢 ?

    原因是 Proguard 对 class 文件经过一系列处理后，能保证功能上和原来是一样的，但有些情况它却不能良好的处理，比如我们代码中有些功能依赖于它们原来的名字，如反射功能，native 调用(函数签名)等，如果换成其它名字，会出现找不到，不对应的情况，可能引起程序崩溃，或者我们的对外提供了一些功能，必须保持原来的名字，才能保证其它依赖这些功能的模块能正确的运行等。

#### **Preveirfy** 

* 用来对 Java class 进行预验证（预验证主要是针对 JME 开发来说的，Android 中没有预验证过程，默认是关闭）

### **keep配置**

<table width="800" border="2" cellspacing="0" cellpadding="2">
<tbody>
    <tr>
        <td>保留</td>
        <td>防止被移除或者被重命名</td>
        <td>防止被重命名</td>
    </tr>
    <tr>
        <td>类和类成员</td>
        <td><font color="Hotpink">-keep</font></td>
        <td><font color="Hotpink">-keepnames</font></td>
    </tr>
    <tr>
        <td>仅类成员</td>
        <td><font color="Hotpink">-keepmembers</font></td>
        <td><font color="Hotpink">-keepmembernames</font></td>
    </tr>
    <tr>
        <td>如果拥有某成员，保留类和类成员</td>
        <td><font color="Hotpink">-keepclasseswithmembers</font></td>
        <td><font color="Hotpink">-keepclasseswithmembernames</font></td>
    </tr>
</tbody>
</table>

### **Keep配置的修饰符**

#### `includedescriptorclasses`
它是用来声明描述目标成员的元素也应当被保护。它在**保护 native **方法时特别有效。因为它可以同时保证参数类型，返回类型不被混淆。保证最终的方法签名保持一致。
例子：
```
-keepclasseswithmembernames,includedescriptorclasses class * {
    native <methods>;
}
```

`-keepclasseswithmembernames` 是保护符合条件的含有 `native` 方法的类。附加的 `includedescriptorclasses` 是保证参数和返回类型的类同样不被混淆。这样就可以做到这些类的方法签名与调试时完全一致。

#### `allowshrinking`
修饰 `-keep`, 声明一个元素可以被移除，即使它已经声明了被保护。意味着它有可能在压缩阶段被删除，但是它又是必须的入口，所以它有可能不参与优化和混淆阶段。
（这里我也看不太懂，压缩阶段不是依赖 keep 声明的入口节点吗？）

#### `allowoptimization`
修饰 `-keep`, 声明一个元素可以被优化，即使它已经声明被保护。这意味着该元素参与优化阶段，但是不参与压缩和混淆阶段。特殊用途的时候使用。

#### `allowobfuscation`
与前几个类似，修饰 `-keep`,只参与混淆阶段，但是不参与压缩和优化阶段。

### **类的匹配**

`Class Specification` 是指一个类和类成员的模板。它一般跟在各种 `-keep` 配置或者 `assumenosideeffects` 配置之后，只有匹配到的类和类成员会受到影响。

`Class Specification` 的形式与 java 的类的形式很像，只是而外加了几个通配符。如果想要清晰的看它的形式，最好看例子。但这里还是给出了通用的模型：

```
[@annotationtype] [[!]public|final|abstract|@ ...] [!]interface|class|enum classname
    [extends|implements [@annotationtype] classname]
[{
    [@annotationtype] [[!]public|private|protected|static|volatile|transient ...] <fields> |
                                                                      (fieldtype fieldname);
    [@annotationtype] [[!]public|private|protected|static|synchronized|native|abstract|strictfp ...] <methods> |
                                                                                           <init>(argumenttype,...) |
                                                                                           classname(argumenttype,...) |
                                                                                           (returntype methodname(argumenttype,...));
    [@annotationtype] [[!]public|private|protected|static ... ] *;
    ...
}]
```
> * `[]` 代表可选可不选；
> * `···` 代表还有更多选项可以配置；
> * `|` 分隔的部分代表多选一；
> * `()` 括起来的部分代表是一个整体，不能分割。

* class 关键字可以匹配 class 类或 interface 类,但是 `interface` 关键字只能匹配interface类，`enum` 关键字只能匹配enum类。在 `interface` 或 `enum` 关键字前加一个 `!`，可以表示非这种类型的类。

* classname 必须写全名，比如 `java.lang.String`。内部类用 `$` 间隔，例如，`java.lang.Thread$State`。类名可以用含有下面这些通配符的正则表达式匹配：

    。? 匹配类名中的一个字符，不包括文件分隔符。例如，`mypackage.Test?` 可以匹配 `mypackage.Test1,mypackage.Test2`，但不能匹配 `mypackage.Test12`。

    。*匹配类名中的0到多个字符但不包括文件分隔符。例如，`mypackage.*Test*` 可以匹配到 `mypackage.Test` 和 `mypackage.YourTestApplication` 但是不能匹配 `mypackage.mysubpackage.MyTest`。一种常用的写法 `mypackage.*` 就是匹配 `mypackage` 下的所有子文件。

    。** 可以匹配类名中的所有字符，可能包含多个分隔符。例如，`**.Test`就是匹配所有目录下的 `Test` 类，`mypackage.**` 就是匹配 mypackage 及其子目录下的所有类。


* extend 与 implements 关键字是用来限制类的范围的。他们目前是等价的，用来匹配某些类的子类。需要注意的是，这个指定的类并不包括在匹配结果中，如果想要该类也被匹配到，就需要额外声明一项配置。

* @ 符号匹配那些注解标志的类或类成员，它的通配符形式与classname的形式一样。

* 成员变量和成员方法的匹配形式与java非常像，只是方法的参数不带参数名。此外，他们还可以使用通配符：

> 变量名和方法名可以使用的通配符：
> * <init> 匹配一个类的所有构造函数
> * <fields> 匹配一个类中的所有成员变量
> * <methods> 匹配一个类中的所有方法
> * * 匹配类中的所有成员
    
    列表

> * `?` 匹配一个字符
> * `*` 匹配0到多个字符

    注意上述通配符并不能设置返回类型，并且只有<init>方法带有参数
    
    修饰符中可以使用以下通配符匹配：

> * `%` 匹配java中的初始类型(int, boolean, long, float,double等)
> * `?`
> * `*`
> * `**` （这三个不解释了，同上）
> * `***` 匹配所有类型，包括初始类型和非初始类型，数组和非数组。
> * `...` 匹配任意参数列表

    需要注意的是 `?`, `*`, `**`不能够匹配初始类型和数组。`***` 可以匹配到数组。例子：

```
** get*() 
```
上面的例子可以匹配到 `java.lang.Object getObject()`,但是不能匹配 `float getFloat()` 或者 `java.lang.Object[] getObjects()`。

* 构造函数也可以使用简单类名或全类名来指定。就像java中的构造函数一样有参数列表但是没有返回类型。

* 类或者类成员的修饰符也是匹配类的限制条件。通过修饰符限制，可以缩小匹配的范围。修饰符组合也是可以的，就像 java 中的 `public static` 一样，但是不能冲突, 比如 `public private`。











参考：

[Android混淆你该知道的事](https://www.jianshu.com/p/60e82aafcfd0)

[Android 开发应该掌握的 Proguard 技巧](https://mp.weixin.qq.com/s/sFPnK_nvNQOWRK3rd3XnZw)

[android 防破解, 代码混淆，代码保护 - 晕菜一员 - 博客园](https://www.cnblogs.com/CharlesGrant/p/7544311.html)

[关于Android代码混淆的详细讲解 - 码农教程](http://www.manongjc.com/article/1598.html)



[美团Android资源混淆保护实践 - 美团技术团队](https://tech.meituan.com/2015/09/30/mt-android-resource-obfuscation.html)

[Android 高级混淆和代码保护技术 · Drakeet 的个人博客](https://blog.csdn.net/hqiangtai/article/details/76037244)

[混淆的另一重境界](https://mp.weixin.qq.com/s/rpDFA-h5t2RA9Dih3gVqVA)

[Android 混淆那些事儿](https://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&mid=2653579150&idx=1&sn=66a14b3f6de5cf0468c0e3cb2d3e065d&chksm=84b3b589b3c43c9fd2856c017e8adff1bc0d9af570257af1c6fa634f967aa7f787b7115c3b32&scene=0&key=0b0fcc6d62e4018dbdac99df5c1a2a072ff5578f482b7a616deeb71b2fa3b2c17949e887b90755a1b454e4f9bff56e2dc272976d6f70d7410c393a13380771cd7b177f4cf9d741adef4b94a7156e3ab9&ascene=0&uin=MTQ4ODkwNDM4MQ%3D%3D&devicetype=iMac+MacBookPro9%2C2+OSX+OSX+10.11.6+build(15G31)&version=12020810&nettype=WIFI&fontScale=100&pass_ticket=QH%2BwRdvo34Di57OWLkiq8nPiUiLLKTNPwXSHWtGMpJFaKX6sn6BsKfSK2Ub8SyLm)

[一篇文章带你领略Android混淆的魅力](https://www.jianshu.com/p/2fab1510eef8)

[Android 字符串及字典混淆开源实现](https://mp.weixin.qq.com/s/SRv1Oar87w1iKuDXS4oaew?)

[安装包立减1M--微信Android资源混淆打包工具](https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&mid=208135658&idx=1&sn=ac9bd6b4927e9e82f9fa14e396183a8f#rd)

[Mess](https://github.com/eleme/Mess)

[AndResGuard](https://github.com/shwenzhang/AndResGuard/blob/master/README.zh-cn.md)

[ButterMess](https://github.com/peacepassion/ButterMess)


[Android代码混淆与加固技术](https://www.imooc.com/learn/879)

[Android 反编译利器，jadx 的高级技巧](https://mp.weixin.qq.com/s/8ayLeGavaYfMxqLoTxFIlQ)