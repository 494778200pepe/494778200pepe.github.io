---
layout: post
title:  "Proguard混淆"
date:   2017-11-28 17:23:00 +0800
categories: Android
tags: Android
author: pepe
description: 『 Proguard混淆 』
---

混淆为什么要保留类名或方法名？
    
    1、让C/C++程序可以通过 jni 使用对应的 java 方法
    2、四大组件由于在Android Manifest.xml 里面注册了，防止系统找不到
    3、R文件混淆会导致引用错误
 
[ProGuard manual](https://www.guardsquare.com/en/products/proguard/manual/usage)
 
### **Proguard介绍** 
   
> Proguard，翻译过来是“护卫兵” 。包含四个功能：

* 压缩(Shrink):检测和删除没有使用的类，字段，方法和特性

* 优化(Optimize):分析和优化Java字节码

* 混淆(Obfuscate):使用简短的无意义的名称，对类、字段和方法进行重命名

* 预检(Preveirfy):用来对Java class进行预验证(预验证主要是针对JME开发来说的，Android中没有预验证过程，默认是关闭)
   
```
buildTypes {
    release {
        // minifyEnabled 为true是开启Proguard的功能，false是关闭
        minifyEnabled true
        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
}
```
 
### **Proguard工作流程** 

![proguard1]({{ site.baseurl }}/assets/images/android/Proguard/proguard1.png)

#### **Shrink** 

* 1、检测并移除没有用到的类，变量，方法和属性

* 2、Proguard 把 `Entry Points` 作为搜索的入口，进行递归检索，以此来确定哪些部分未使用到

#### **Optimize** 

* 1、分析和优化Java字节码

* 2、针对那些非 `Entry Points` 的类和方法会被设置成 `private`，`static` 或 `final`，没有使用到的参数会被移除，有些方法可能会被标记为内联的

#### **Obfuscate** 

* 1、使用简短的无意义的名称，对类，字段和方法进行重命名

* 2、对非EntryPoint的类和类的成员进行重命名，也就是用其它无意义的名称代替

* 3、为什么需要保留一些类和类的成员(方法和变量)不被重命名呢 ?

    原因是 Proguard 对 class 文件经过一系列处理后，能保证功能上和原来是一样的，但有些情况它却不能良好的处理，比如我们代码中有些功能依赖于它们原来的名字，如反射功能，native 调用(函数签名)等，如果换成其它名字，会出现找不到，不对应的情况，可能引起程序崩溃，或者我们的对外提供了一些功能，必须保持原来的名字，才能保证其它依赖这些功能的模块能正确的运行等。

#### **Preveirfy** 

* 用来对 Java class 进行预验证（预验证主要是针对 JME 开发来说的，Android 中没有预验证过程，默认是关闭）

### **keep配置**

<table width="800" border="2" cellspacing="0" cellpadding="2">
<tbody>
    <tr>
        <td>保留</td>
        <td>防止被移除或者被重命名</td>
        <td>防止被重命名</td>
    </tr>
    <tr>
        <td>类和类成员</td>
        <td><font color="Hotpink">-keep</font></td>
        <td><font color="Hotpink">-keepnames</font></td>
    </tr>
    <tr>
        <td>仅类成员</td>
        <td><font color="Hotpink">-keepmembers</font></td>
        <td><font color="Hotpink">-keepmembernames</font></td>
    </tr>
    <tr>
        <td>如果拥有某成员，保留类和类成员</td>
        <td><font color="Hotpink">-keepclasseswithmembers</font></td>
        <td><font color="Hotpink">-keepclasseswithmembernames</font></td>
    </tr>
</tbody>
</table>

### **Keep配置的修饰符**

#### includedescriptorclasses
它是用来声明描述目标成员的元素也应当被保护。它在**保护 native **方法时特别有效。因为它可以同时保证参数类型，返回类型不被混淆。保证最终的方法签名保持一致。
例子：
```
-keepclasseswithmembernames,includedescriptorclasses class * {
    native <methods>;
}
```

`-keepclasseswithmembernames` 是保护符合条件的含有 `native` 方法的类。附加的 `includedescriptorclasses` 是保证参数和返回类型的类同样不被混淆。这样就可以做到这些类的方法签名与调试时完全一致。

#### allowshrinking
修饰 `-keep`, 声明一个元素可以被移除，即使它已经声明了被保护。意味着它有可能在压缩阶段被删除，但是它又是必须的入口，所以它有可能不参与优化和混淆阶段。
（这里我也看不太懂，压缩阶段不是依赖 keep 声明的入口节点吗？）

#### allowoptimization
修饰 `-keep`, 声明一个元素可以被优化，即使它已经声明被保护。这意味着该元素参与优化阶段，但是不参与压缩和混淆阶段。特殊用途的时候使用。

#### allowobfuscation
与前几个类似，修饰 `-keep`,只参与混淆阶段，但是不参与压缩和优化阶段。
类的匹配













参考：

[Android混淆你该知道的事](https://www.jianshu.com/p/60e82aafcfd0)

[Android 开发应该掌握的 Proguard 技巧](https://mp.weixin.qq.com/s/sFPnK_nvNQOWRK3rd3XnZw)

[android 防破解, 代码混淆，代码保护 - 晕菜一员 - 博客园](https://www.cnblogs.com/CharlesGrant/p/7544311.html)

[关于Android代码混淆的详细讲解 - 码农教程](http://www.manongjc.com/article/1598.html)



[美团Android资源混淆保护实践 - 美团技术团队](https://tech.meituan.com/2015/09/30/mt-android-resource-obfuscation.html)

[Android 高级混淆和代码保护技术 · Drakeet 的个人博客](https://blog.csdn.net/hqiangtai/article/details/76037244)

[混淆的另一重境界](https://mp.weixin.qq.com/s/rpDFA-h5t2RA9Dih3gVqVA)

[Android 混淆那些事儿](https://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&mid=2653579150&idx=1&sn=66a14b3f6de5cf0468c0e3cb2d3e065d&chksm=84b3b589b3c43c9fd2856c017e8adff1bc0d9af570257af1c6fa634f967aa7f787b7115c3b32&scene=0&key=0b0fcc6d62e4018dbdac99df5c1a2a072ff5578f482b7a616deeb71b2fa3b2c17949e887b90755a1b454e4f9bff56e2dc272976d6f70d7410c393a13380771cd7b177f4cf9d741adef4b94a7156e3ab9&ascene=0&uin=MTQ4ODkwNDM4MQ%3D%3D&devicetype=iMac+MacBookPro9%2C2+OSX+OSX+10.11.6+build(15G31)&version=12020810&nettype=WIFI&fontScale=100&pass_ticket=QH%2BwRdvo34Di57OWLkiq8nPiUiLLKTNPwXSHWtGMpJFaKX6sn6BsKfSK2Ub8SyLm)

[一篇文章带你领略Android混淆的魅力](https://www.jianshu.com/p/2fab1510eef8)

[Android 字符串及字典混淆开源实现](https://mp.weixin.qq.com/s/SRv1Oar87w1iKuDXS4oaew?)

[安装包立减1M--微信Android资源混淆打包工具](https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&mid=208135658&idx=1&sn=ac9bd6b4927e9e82f9fa14e396183a8f#rd)

[Mess](https://github.com/eleme/Mess)

[AndResGuard](https://github.com/shwenzhang/AndResGuard/blob/master/README.zh-cn.md)

[ButterMess](https://github.com/peacepassion/ButterMess)


[Android代码混淆与加固技术](https://www.imooc.com/learn/879)

[Android 反编译利器，jadx 的高级技巧](https://mp.weixin.qq.com/s/8ayLeGavaYfMxqLoTxFIlQ)