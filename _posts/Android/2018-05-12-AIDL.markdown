---
layout: post
title:  "AIDL"
date:   2018-05-12 11:27:00 +0800
categories: Android
tags: Android
author: pepe
description: 『 AIDL 』
---
> AIDL是一个缩写，全称是Android Interface Definition Language，也就是Android接口定义语言。设计这门语言的目的是为了实现进程间通信，尤其是在涉及多进程并发情况下的进程间通信。

### **最简单的实现**
 
第一步，定义AIDL文件：
    
```
//IAirService.aidl
package com.hopechart.airservice;
interface IAirService {

    void sendSocketMessage(String msg1,String msg2);

}
```

第二步，服务端(Service)：
    
```
    private final IAirService.Stub mBinder = new IAirService.Stub() {

        @Override
        public void sendSocketMessage(String msg1, String msg2) throws RemoteException {
           // do something...
        }
    };
    
    // 同时在绑定成功时，返回 Binder 对象
    @Override
    public IBinder onBind(Intent intent) {
        return mBinder;
    }
```

第三步，客户端(前台APP)：
    
```
    public void sendSocketMessage(String[] msg) {
        Logger.d("===> sendSocketMessage  msg = " + msg);
        if (iAirService != null) {
            try {
                iAirService.sendSocketMessage(msg[0], msg[1]);
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            connectAirService();
        }
    }

    private void connectAirService() {
        if (System.currentTimeMillis() - lastToBindAirService > AIDL_BIND_CONN_INTV) {
            startAirService();
            bindAirService();
        }
    }

    private void bindAirService() {
        Intent intent = new Intent(ACTION_BIND_AIRS);
        intent.setPackage(PKG_AIR_SERVICE);
        mContext.bindService(intent, new AirServiceConnection(), Service.BIND_AUTO_CREATE);
        lastToBindAirService = System.currentTimeMillis();
    }

    private void startAirService() {
        Intent intent = new Intent();
        intent.setAction(ACTION_START_AIRS);
        mContext.sendBroadcast(intent);
    }

    private final class AirServiceConnection implements ServiceConnection {

        @Override
        public void onServiceConnected(ComponentName name, IBinder service) {
            iAirService = IAirService.Stub.asInterface(service);        
        }

        @Override
        public void onServiceDisconnected(ComponentName name) {
            iAirService = null;           
        }
    }
```

    这样，一个简单的AIDL调用就完成了，客服端(前台APP)可以调用服务端(Service)的方法了。

### **双向通信**

    通过在服务端(Service)注册一个回调，实现双向通信。
    
第一步，定义AIDL文件：
    
```
//IAirService.aidl
package com.hopechart.airservice;
import com.hopechart.airservice.ICallback;
interface IAirService {

    void sendSocketMessage(String msg1,String msg2);
    
    void registerCallback(ICallback cb);

    void unregisterCallback();

}
//ICallback.aidl
package com.hopechart.airservice;
interface ICallback {
	  
	void sendKeyData(int what);  

    void sendBackOff(int seconds);

    void sendForward(int seconds);
}
  
```

第二步，服务端(Service)：
    
```
    private ICallback mCallback;
    private final IAirService.Stub mBinder = new IAirService.Stub() {

        @Override
        public void sendSocketMessage(String msg1, String msg2) throws RemoteException {
           // do something...
        }
        
        @Override
        public void registerCallback(ICallback cb) throws RemoteException {
            if (cb != null) {
                mCallback = cb;
                // 之后就可以通过 mCallback 直接调用 客服端的方法了
                // 如果有多个客户端，可以对 Callback 做标记
            }
        }

        @Override
        public void unregisterCallback() throws RemoteException {
            mCallback = null;
        }
    };
    
    // 同时在绑定成功时，返回 Binder 对象
    @Override
    public IBinder onBind(Intent intent) {
        return mBinder;
    }
    
```

第三步，客户端(前台APP)：
    
```
    // 连接服务端
    public void sendSocketMessage(String[] msg) {
        Logger.d("===> sendSocketMessage  msg = " + msg);
        if (iAirService != null) {
            try {
                iAirService.sendSocketMessage(msg[0], msg[1]);
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            connectAirService();
        }
    }
    
    /**
     * 注册后台服务回调
     */
    public void registerCallback(Handler handler) {
        if (iFloatMediaPlayer != null) {
            try {
                iFloatMediaPlayer.registerCallback(Callback.getInstance().setHandler(handler));
            } catch (Exception e) {
            }
        } else {
            connectFloatMediaPlayer();
        }
    }

    /**
     * 取消后台服务的回调
     */
    public void unregisterCallback() {
        if (iFloatMediaPlayer != null) {
            try {
                iFloatMediaPlayer.unregisterCallback();
            } catch (Exception e) {
            }
        } else {
            connectFloatMediaPlayer();
        }
    }

    private void connectAirService() {
        if (System.currentTimeMillis() - lastToBindAirService > AIDL_BIND_CONN_INTV) {
            startAirService();
            bindAirService();
        }
    }

    private void bindAirService() {
        Intent intent = new Intent(ACTION_BIND_AIRS);
        intent.setPackage(PKG_AIR_SERVICE);
        mContext.bindService(intent, new AirServiceConnection(), Service.BIND_AUTO_CREATE);
        lastToBindAirService = System.currentTimeMillis();
    }

    private void startAirService() {
        Intent intent = new Intent();
        intent.setAction(ACTION_START_AIRS);
        mContext.sendBroadcast(intent);
    }

    private final class AirServiceConnection implements ServiceConnection {

        @Override
        public void onServiceConnected(ComponentName name, IBinder service) {
            iAirService = IAirService.Stub.asInterface(service);        
        }

        @Override
        public void onServiceDisconnected(ComponentName name) {
            iAirService = null;           
        }
    }
// Callback.java
public class Callback extends ICallback.Stub {
    private static Callback instance = new Callback();
    private Handler mMainHandler;

    private Callback() {
    }

    public static Callback getInstance() {
        return instance;
    }

    public Callback setHandler(Handler mainHandler) {
        mMainHandler = mainHandler;
        return this;
    }

    @Override
    public void sendKeyData(int what) throws RemoteException {
        if (null != mMainHandler) {
            mMainHandler.sendEmptyMessage(what);
        }
    }

    @Override
    public void sendBackOff(int seconds) throws RemoteException {
        // do something...
    }

    @Override
    public void sendForward(int seconds) throws RemoteException {
        // do something...
    }
}
```    
    
    
### **默认支持的数据类型**
 
 - Java中的八种基本数据类型，包括 byte，short，int，long，float，double，boolean，char。
 - String 类型。
 - CharSequence类型。
 - List类型：List中的所有元素必须是AIDL支持的类型之一，或者是一个其他AIDL生成的接口，或者是定义的parcelable（下文关于这个会有详解）。List可以使用泛型。
 - Map类型：Map中的所有元素必须是AIDL支持的类型之一，或者是一个其他AIDL生成的接口，或者是定义的parcelable。Map是不支持泛型的。

### **自定义数据类型**

```
// Book.aidl
//第一类AIDL文件的例子
//这个文件的作用是引入了一个序列化对象 Book 供其他的AIDL文件使用
//注意：Book.aidl与Book.java的包名应当是一样的
package com.lypeer.ipcclient;

//注意parcelable是小写
parcelable Book;



// BookManager.aidl
//第二类AIDL文件的例子
package com.lypeer.ipcclient;
//导入所需要使用的非默认支持数据类型的包
import com.lypeer.ipcclient.Book;

interface BookManager {

    //所有的返回值前都不需要加任何东西，不管是什么数据类型
    List<Book> getBooks();
    Book getBook();
    int getBookCount();

    //传参时除了Java基本类型以及String，CharSequence之外的类型
    //都需要在前面加上定向tag，具体加什么量需而定
    void setBookPrice(in Book book , int price)
    void setBookName(in Book book , String name)
    void addBookIn(in Book book);
    void addBookOut(out Book book);
    void addBookInout(inout Book book);
}
```
### **in、out、inout**

* in和out表示数据的流向。
* 所有的非基本参数都需要一个定向tag来指出数据的流向，不管是 in , out , 还是 inout 。基本参数的定向tag默认是并且只能是 in 。

> AIDL中的定向 tag 表示了在跨进程通信中数据的流向，其中 in 表示数据只能由客户端流向服务端， out 表示数据只能由服务端流向客户端，而 inout 则表示数据可在服务端与客户端之间双向流通。其中，数据流向是针对在客户端中的那个传入方法的对象而言的。in 为定向 tag 的话表现为服务端将会接收到一个那个对象的完整数据，但是客户端的那个对象不会因为服务端对传参的修改而发生变动；out 的话表现为服务端将会接收到那个对象的参数为空的对象，但是在服务端对接收到的空对象有任何修改之后客户端将会同步变动；inout 为定向 tag 的情况下，服务端将会接收到客户端传来对象的完整信息，并且客户端将会同步服务端对该对象的任何变动。

[你真的理解AIDL中的in，out，inout么？ - CSDN博客](https://blog.csdn.net/luoyanglizi/article/details/51958091) 

### **跨进程通信的原理**


### **Messenger与AIDL的比较**

* Messager 单线程，AIDL 多线程。

参考：

[Android：学习AIDL，这一篇文章就够了(上) - 简书](https://www.jianshu.com/p/a8e43ad5d7d2) 

[Android：学习AIDL，这一篇文章就够了(下) - 简书](https://www.jianshu.com/p/0cca211df63c) 

[AIDL 客户端与服务端的双向通信 - CSDN博客](https://blog.csdn.net/qq_26787115/article/details/78590063) 

[Android AIDL 双向调用的使用及相关原理 - CSDN博客](https://blog.csdn.net/swjtufq/article/details/52527920) 

[Android AIDL SERVICE 双向通信 详解 - 希尔瓦娜斯女神 - 博客园](https://www.cnblogs.com/punkisnotdead/p/5158016.html) 

[Android 多进程编程 15问15答！ - 希尔瓦娜斯女神 - 博客园](http://www.cnblogs.com/punkisnotdead/p/5168857.html) 






