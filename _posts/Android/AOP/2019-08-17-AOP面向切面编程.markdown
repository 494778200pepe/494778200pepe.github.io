---
layout: post
title:  "AOP面向切面编程"
date:   2019-08-17 11:12:00 +0800
categories: Android
tags: AOP
author: pepe
description: 『 AOP面向切面编程 』
---

> 定义：把某一方面的一些功能提取出来与一批对象进行隔离，提取之后我们就可以对某个单方面的功能进行编程。

说明：把众多方法中的所有共有代码全部抽取出来，放置到某个地方集中管理，然后在具体运行时，再有容器动态织入这些公有代码的话，最起码可以解决两个问题：

* 1、Android 程序员在编写具体的业务逻辑处理方法时，只需关心核心的业务逻辑处理，既提高了工作效率，又使代码更简洁优雅。

* 2、在日后的维护中由于业务逻辑代码和公有代码分开存放，而且共有代码是集中存放的，因此使维护工作变得简单轻松。

面向切面编程 AOP 技术就是为解决这个问题而诞生的，切面就是横切面，代表的是一个普遍存在的共有功能，例如，日志切面、权限切面及事务切面等。




### **Android AOP主流框架**

<table width="800" border="3" cellspacing="0" cellpadding="0">
    <tr>
        <td>名称</td>
        <td>描述</td>
    </tr>
    <tr>
        <td>Xposed</td>
        <td>ROOT社区著名开源项目，需要root权限（运行时）</td>
    </tr>
    <tr>
        <td>Dexposed</td>
        <td>阿里AOP框架，改造Xposed，只支持Android2.3 - 4.4（运行时）</td>
    </tr>
    <tr>
        <td>APT</td>
        <td>注解处理器，通过注解生成源代码，代表框架：DataBinding,Dagger2, ButterKnife, EventBus3 、DBFlow、AndroidAnnotation</td>
    </tr>   
    <tr>
        <td>AspectJ</td>
        <td>AspectJ定义了AOP语法，所以它有一个专门的编译器用来生成遵守Java字节编码规范的Class文件，在编译期注入代码。代表框架：Hugo(Jake Wharton)</td>
    </tr>  
    <tr>
        <td>Javassist、ASM</td>
        <td>执行字节码操作的库。它可以在一个已经编译好的类中添加新的方法，或者是修改已有的方法，可以绕过编译，直接操作字节码，从而实现代码注入。代表框架：热修复框架HotFix 、InstantRun</td>
    </tr>      
</table>
	
	
![AOP]({{ site.baseurl }}/assets/images/android/AOP/AOP.png)	

* Aspectj 是对 AOP 的实践，代表是 hugo，在编译期生成代码，主要用来处理跟主业务流程没太多关系的分支判断检测、统计等功能，非注入

* APT 是注解处理器，专门处理注解的，主要是注入，跟主业务联系起来，代表用 Databinding，Dragger2（依赖、注入），ButterKnife，EventBus3



* 1、AspectJ 在编译时，根据注解，将响应的代码织入到切点，

* 2、APT 是注解处理器，是在编译之前，根据注解生成相应的 Java 文件。以便之后调用。


	
	
	








参考：

[AOP 最后一块拼图 - AST 抽象语法树 —— 最轻量级的AOP方法 - 简书](https://www.jianshu.com/p/0f1c7b3e907f)

[安卓AOP三剑客:APT,AspectJ,Javassist - 简书](https://www.jianshu.com/p/dca3e2c8608a)

[AOP：APT,AspectJ,Javassist/Asm - 简书](https://www.jianshu.com/p/44d39585fc20)

[27编译插桩的三种方法： AspectJ、ASM、ReDex_long117long的专栏-CSDN博客_目标代码插桩的三种执行模式](https://blog.csdn.net/long117long/article/details/90715694)



Java-AOP:

[AOP-JDK 和CGLIB、Javassist、ASM之间的差别 (详细)_szzt_lingpeng的专栏-CSDN博客_asm和cglib](https://blog.csdn.net/szzt_lingpeng/article/details/81748396)

[Java-AOP(Hook)实现机制(JDK/cglib动态代理/ASM/Javassist/AspectJ)_http://lioil.win-CSDN博客_aspectj asm](https://blog.csdn.net/qq_32115439/article/details/78361596)

















