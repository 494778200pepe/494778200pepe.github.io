---
layout: post
title:  "Activity 生命周期"
date:   2019-07-17 15:00:00 +0800
categories: Android
tags: Android
author: pepe
description: 『 Activity 生命周期 』
---

![生命周期]({{ site.baseurl }}/assets/images/android/Activity 生命周期.png)

### **Activity 的形态**

* `Active/Running`: 
 `Activity` 处于活动状态，此时 `Activity` 处于栈顶，是可见状态，可与用户进行交互。 

* `Paused`： 
当 `Activity` 失去焦点时，或被一个新的非全屏的 `Activity` ，或被一个透明的 `Activity` 放置在栈顶时， `Activity` 就转化为 `Paused` 状态。但我们需要明白，此时 `Activity` 只是失去了与用户交互的能力，其所有的状态信息及其成员变量都还存在，只有在系统内存紧张的情况下，才有可能被系统回收掉。 

* `Stopped`： 
当一个 `Activity` 被另一个 `Activity` 完全覆盖时，被覆盖的 `Activity` 就会进入 `Stopped` 状态，此时它不再可见，但是跟 `Paused` 状态一样保持着其所有状态信息及其成员变量。 

* `Killed`： 
当 `Activity` 被系统回收掉时， `Activity` 就处于 `Killed` 状态。 
 `Activity` 会在以上四种形态中相互切换，至于如何切换，这因用户的操作不同而异。了解了 `Activity` 的4种形态后，我们就来聊聊 `Activity` 的生命周期。

### **典型的生命周期**
 所谓的典型的生命周期就是在有用户参与的情况下，Activity经历从创建，运行，停止，销毁等正常的生命周期过程。我们这里先来介绍一下几个主要方法的调用时机，然后再通过代码层面来验证其调用流程。 

* `onCreate` : 该方法是在Activity被创建时回调，它是生命周期第一个调用的方法，我们在创建Activity时一般都需要重写该方法，然后在该方法中做一些初始化的操作，如通过setContentView设置界面布局的资源，初始化所需要的组件信息等。 

* `onStart` : 此方法被回调时表示Activity正在启动，此时Activity已处于可见状态，只是还没有在前台显示，因此无法与用户进行交互。可以简单理解为Activity已显示而我们无法看见摆了。 

* `onResume` : 当此方法回调时，则说明Activity已在前台可见，可与用户交互了（处于前面所说的Active/Running形态），onResume方法与onStart的相同点是两者都表示Activity可见，只不过onStart回调时Activity还是后台无法与用户交互，而onResume则已显示在前台，可与用户交互。当然从流程图，我们也可以看出当Activity停止后（onPause方法和onStop方法被调用），重新回到前台时也会调用onResume方法，因此我们也可以在onResume方法中初始化一些资源，比如重新初始化在onPause或者onStop方法中释放的资源。 

* `onPause` : 此方法被回调时则表示Activity正在停止（Paused形态），一般情况下onStop方法会紧接着被回调。但通过流程图我们还可以看到一种情况是onPause方法执行后直接执行了onResume方法，这属于比较极端的现象了，这可能是用户操作使当前Activity退居后台后又迅速地再回到到当前的Activity，此时onResume方法就会被回调。当然，在onPause方法中我们可以做一些数据存储或者动画停止或者资源回收的操作，但是不能太耗时，因为这可能会影响到新的Activity的显示——onPause方法执行完成后，新Activity的onResume方法才会被执行。 

* `onStop` : 一般在onPause方法执行完成直接执行，表示Activity即将停止或者完全被覆盖（Stopped形态），此时Activity不可见，仅在后台运行。同样地，在onStop方法可以做一些资源释放的操作（不能太耗时）。 

* `onRestart` :表示Activity正在重新启动，当Activity由不可见变为可见状态时，该方法被回调。这种情况一般是用户打开了一个新的Activity时，当前的Activity就会被暂停（onPause和onStop被执行了），接着又回到当前Activity页面时，onRestart方法就会被回调。 

* `onDestroy` :此时Activity正在被销毁，也是生命周期最后一个执行的方法，一般我们可以在此方法中做一些回收工作和最终的资源释放。 

### **几种情况**

* AActivity 打开 BActivity，`A.onPause() -> B.onCreate() -> B.onStart() -> B.onResume() -> A.onStop()`

* CActivity 打开 CActivity ，CActivity 的启动模式为 `singleTop` ，`C.onPause() -> C.onNewIntent() -> C.onResume()`

* 灭屏时, `onPause()` 和 `onStop()` 会依次被调用

* 屏亮时, `onRestart()` ， `onStart()` ， `onResume()` 会依次被调用

### **Activity异常生命周期**

异常的生命周期是指 `Activity` 被系统回收或者当前设备的 `Configuration` 发生变化（一般指横竖屏切换）从而导致 `Activity` 被销毁重建。异常的生命周期主要分以下两种情况：

* 1、相关的系统配置发生改变导致Activity被杀死并重新创建（一般指横竖屏切换）

* 2、内存不足导致低优先级的Activity被杀死

### **屏幕旋转**

> `onPause，onSaveInstanceState，onStop，onDestroy，onCreate，onStart，onRestoreInstanceState，onResume` 依次被调用

从Log中我们可以看出当我们正常启动Activity时，onCreate，onStart，onResume方法都会依次被回调，而如果我们此时把竖屏的Activity人为的调整为横屏，我们可以发现onPause，onSaveInstanceState，onStop，onDestroy，onCreate，onStart，onRestoreInstanceState，onResume依次被调用，单从调用的方法我们就可以知道，Activity先被销毁后再重新创建。

注意：

* `onSaveInstanceState` 在 `onPause` 之后执行

* `onRestoreInstanceState` 在 `onStart` 之后执行

#### **防止Activity被重建**

* API > 12 时，`android:configChanges="orientation|screenSize"`

* API <= 12 时，`android:configChanges="orientation"`

* `orientation`：屏幕方向发生变化，配置该参数可以解决横竖屏切换时，Activity重建问题（API<13） 

* `screenSize`：当设备旋转时，屏幕尺寸发生变化，API>=13后必须配置该参数才可以保证横竖切换不会导致Activity重建。

配置完之后，旋转屏幕时，就只会执行 `onConfigurationChanged` 方法了。 

### **onSaveInstanceState和onRestoreInstanceState**

* 这里有点需要特别注意，onSaveInstanceState和onRestoreInstanceState只有在Activity异常终止时才会被调用的，正常情况是不会调用这两个方法的。

* onRestoreInstanceState和onCreate方法都可以进行数据恢复，那到底用哪个啊?其实两者都可以，两者的区别在于，onRestoreInstanceState方法一旦被系统回调，其参数Bundle一定不为空，无需额外的判断，而onCreate的Bundle却不一定有值，因为如果Activity是正常启动的话，Bundle参数是不会有值的，因此我们需要额外的判断条件，当然虽说两者都可以数据恢复，但更倾向于onRestoreInstanceState方法。 

* 最后还有点我们要知道的是，在onSaveInstanceState方法和onRestoreInstanceState方法中，android系统会自动帮我们恢复一定的数据，如当前Activity的视图结构，文本框的数据，ListView的滚动位置等，这些View相关的状态系统都会帮我们恢复，这是因为每个View也有onSaveInstanceState方法和onRestoreInstanceState方法，


### **不同启动模式下，生命周期**



参考：

[Android之Activity生命周期浅析 - Tomes.V.White - CSDN博客](https://blog.csdn.net/qq_35559358/article/details/79715222)

[Android 面试（二）：如何理解 Activity 的生命周期 - 简书](https://www.jianshu.com/p/5c32bf28b653)

[屏幕旋转时 Activity 的生命周期 —— 测试与结论 - 银色子弹 - 博客园https://www.cnblogs.com/theo/archive/2017/02/22/6428331.html)
