---
layout: post
title:  "Activity 生命周期"
date:   2019-07-17 15:00:00 +0800
categories: Android
tags: Android
author: pepe
description: 『 Activity 生命周期 』
---

![生命周期]({{ site.baseurl }}/assets/images/android/Activity 生命周期.png)

### **Activity 的形态**

* `Active/Running`: 
 `Activity` 处于活动状态，此时 `Activity` 处于栈顶，是可见状态，可与用户进行交互。 

* `Paused`： 
当 `Activity` 失去焦点时，或被一个新的非全屏的 `Activity` ，或被一个透明的 `Activity` 放置在栈顶时， `Activity` 就转化为 `Paused` 状态。但我们需要明白，此时 `Activity` 只是失去了与用户交互的能力，其所有的状态信息及其成员变量都还存在，只有在系统内存紧张的情况下，才有可能被系统回收掉。 

* `Stopped`： 
当一个 `Activity` 被另一个 `Activity` 完全覆盖时，被覆盖的 `Activity` 就会进入 `Stopped` 状态，此时它不再可见，但是跟 `Paused` 状态一样保持着其所有状态信息及其成员变量。 

* `Killed`： 
当 `Activity` 被系统回收掉时， `Activity` 就处于 `Killed` 状态。 
 `Activity` 会在以上四种形态中相互切换，至于如何切换，这因用户的操作不同而异。了解了 `Activity` 的4种形态后，我们就来聊聊 `Activity` 的生命周期。



屏幕旋转

从Log中我们可以看出当我们正常启动Activity时，onCreate，onStart，onResume方法都会依次被回调，而如果我们此时把竖屏的Activity人为的调整为横屏，我们可以发现onPause，onSaveInstanceState，onStop，onDestroy，onCreate，onStart，onRestoreInstanceState，onResume依次被调用，单从调用的方法我们就可以知道，Activity先被销毁后再重新创建。

不同启动模式下，生命周期

A启动B时，A的stop和B的start的执行顺序

灭屏时

singleTop  再次启动当前Activity

onSaveInstanceState和onRestoreInstanceState

这里有点需要特别注意，onSaveInstanceState和onRestoreInstanceState只有在Activity异常终止时才会被调用的，正常情况是不会调用这两个方法的。

onRestoreInstanceState和onCreate方法都可以进行数据恢复，那到底用哪个啊?其实两者都可以，两者的区别在于，onRestoreInstanceState方法一旦被系统回调，其参数Bundle一定不为空，无需额外的判断，而onCreate的Bundle却不一定有值，因为如果Activity是正常启动的话，Bundle参数是不会有值的，因此我们需要额外的判断条件，当然虽说两者都可以数据恢复，但更倾向于onRestoreInstanceState方法。 

最后还有点我们要知道的是，在onSaveInstanceState方法和onRestoreInstanceState方法中，android系统会自动帮我们恢复一定的数据，如当前Activity的视图结构，文本框的数据，ListView的滚动位置等，这些View相关的状态系统都会帮我们恢复，这是因为每个View也有onSaveInstanceState方法和onRestoreInstanceState方法，我们来测试一个例子，在EditText文本框中输入数据然后切换横竖屏幕，结果如下：












参考：

Android之Activity生命周期浅析 - Tomes.V.White - CSDN博客
https://blog.csdn.net/qq_35559358/article/details/79715222

[Android 面试（二）：如何理解 Activity 的生命周期 - 简书](https://www.jianshu.com/p/5c32bf28b653)

屏幕旋转时 Activity 的生命周期 —— 测试与结论 - 银色子弹 - 博客园
https://www.cnblogs.com/theo/archive/2017/02/22/6428331.html
