---
layout: post
title:  "内存优化_线上内存监控方案"
date:   2019-09-16 13:46:00 +0800
categories: Android
tags: Optimize
author: pepe
description: 『 内存优化_线上内存监控方案 』
---

### **常规方式**

最大的问题是内存泄漏，内存抖动和内存溢出大部分是由内存泄漏导致无法释放引起的。

> 方式一：设定场景线上 Dump：Debug.dumpHprofData()。将当前的内存信心保存到一个本地文件，适当的时候回传。文件会比较大，有 wifi 时回传。

* Dump文件太大(App使用时间越长，文件越大)，和对象数正相关，可剪裁，剪裁之后仍然会有几十M
* 上传失败率高，分析困难(结合 MAT[Memory Analyzer] 工具手动分析)
* 配合一定策略，有一定效果

> 方式二：

* LeakCanary 带到线上
* 预设泄漏怀疑点 [不适合所有情况，必须预设怀疑点，没有设怀疑点的地方就没法监控]
* 发现泄漏回传
* 分析比较耗时、也容易 OOM

### **LeakCanary定制**

#### **LeakCanary原理**

* 监控生命周期，onDestory 添加 RefWatcher 检测
* 二次确认断定发生内存泄漏
* 分析泄漏，找引用链
* 监控组件 + 分析组件

定制：

* 预设怀疑点 -> 自动找怀疑点
* 分析泄漏链路慢 -> 分析 Retain size 大的对象
* 分析 OOM -> 对象剪裁，不全部加载到内存

### **线上监控完整方案**

* 待机内存、重点模块内存、OOM率
* 整体及重点模块GC次数、GC时间
* 增强的 LeakCanary 自动化内存泄漏分析


### **优化细节**

* LargeHeap 属性
* onTrimMemory / onLowMemory,根据不同的回调登记做不同的事情，最严重等级直接清理掉图片和Activity跳转到主界面
* 使用优化过的集合：SparseArray
* 谨慎使用 SharedPreference，一次性 load 所有数据到内存，如果内容过多，会占用大量内存
* 谨慎使用外部库(没有大规模验证，性能有隐患)，避免使用多个同类库
* 业务架构设计合理





























