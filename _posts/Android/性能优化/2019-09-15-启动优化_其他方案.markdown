---
layout: post
title:  "启动优化_其他方案"
date:   2019-09-15 13:49:00 +0800
categories: Android
tags: 性能优化
author: pepe
description: 『 启动优化_其他方案 』
---

优化总方针：

* 异步、延迟、懒加载

* 技术、业务相结合

注意事项：

* wall time 与 cpu time
	
	。 cpu time 才是优化方向
	。 按照 systrace 及 cpu time 跑满 cpu

* 监控的完善

	。 线上监控多阶段时间(App、Activity、生命周期间隔时间)
	。 处理聚合看趋势
	
* 收敛启动代码修改权限

	。 结合 Ci 修改启动代码需要 Review 或通知
	
* 注意延迟初始化的优化(Feed 之后 IdleHandler)


> 持续集成(Continuous integration，CI):指的是在开发过程中持续地将所有开发人员的代码合并到代码库的主线上，然后对该主线代码进行编译、测试运行等操作对代码进行检验，其目的是尽可能早的发现代码集成后导致的问题。
　　实现持续集成的要点主要有：共享的代码库、自动化编译、自动化测试等，同时要保证合理的集成频率，一般持续集成的时机在于开发人员将代码提交到代码库时自动进行，但是如果提交过于频繁，那么应该使用时间间隔的形式进行持续集成。
　　持续发布(Continuous delivery,CD)实际上是持续集成上的一个拓展，在持续集成的基础上将发布工作自动化，避免人为操作从而减少发布时间和发布时人为造成的错误。


其他方案

* 1、提前加载 SharedPreferences

	。 Multidex 之前加载，利用此阶段 CPU
	。 覆写 getApplicationContext() 返回 this

* 2、启动阶段不启动子进程

	。 子进程会共享 CPU 资源，导致主进程 CPU 紧张
	。 注意启动顺序：App onCreate 之前是 ContentProvider
	
* 3、类加载优化：提前异步类加载

	。 Class.forName() 只加载类本身及其静态变量的引用类
	。 new 类实例 可以额外加载类成员变量的引用类
	
* 4、启动阶段抑制 GC，native hook

* 5、CPU 锁频
	






































