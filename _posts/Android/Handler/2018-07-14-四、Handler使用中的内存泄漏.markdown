---
layout: post
title:  "四、Handler使用中的内存泄漏"
date:   2018-07-14 10:30:00 +0800
categories: Android
tags: Handler
author: pepe
description: 『 Handler使用中的内存泄漏 』
---

### `Handler`学习系列

* [一、Handler、Message、MessageQueue、Looper调用过程](
https://494778200pepe.github.io/android/2018/07/14/%E4%B8%80-Handler-Message-MessageQueue-Looper%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B.html)
* [二、Handler 线程切换的原理](https://494778200pepe.github.io/android/2018/07/14/%E4%BA%8C-Handler-%E7%BA%BF%E7%A8%8B%E5%88%87%E6%8D%A2%E7%9A%84%E5%8E%9F%E7%90%86.html)
* [三、什么是ThreadLocal？](https://494778200pepe.github.io/android/2018/07/14/%E4%B8%89-%E4%BB%80%E4%B9%88%E6%98%AFThreadLocal.html)
* [四、Handler使用中的内存泄漏](https://494778200pepe.github.io/android/2018/07/14/%E5%9B%9B-Handler%E4%BD%BF%E7%94%A8%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F.html)
* [五、Handler的消息驱动模型](https://494778200pepe.github.io/android/2018/07/14/%E4%BA%94-Handler%E7%9A%84%E6%B6%88%E6%81%AF%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9E%8B.html)
* [六、单向链表](https://494778200pepe.github.io/android/2018/07/14/%E5%85%AD-%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8.html)
* [七、HandlerThread 使用](https://494778200pepe.github.io/android/2018/07/14/%E4%B8%83-HandlerThread-%E4%BD%BF%E7%94%A8.html)


### **一、什么是内存泄露？**

> `Java`使用有向图机制，通过GC自动检查内存中的对象（什么时候检查由虚拟机决定），如果GC发现一个或一组对象为不可到达状态，则将该对象从内存中回收。也就是说，一个对象不被任何引用所指向，则该对象会在被GC发现的时候被回收；另外，如果一组对象中只包含互相的引用，而没有来自它们外部的引用（例如有两个对象A和B互相持有引用，但没有任何外部对象持有指向A或B的引用），这仍然属于不可到达，同样会被GC回收。

`Android`中使用`Handler`造成内存泄露的原因

```
private Handler handler = new Handler()
 {
      public void handleMessage(android.os.Message msg)
　　　　 {
            if (msg.what == 1) 
　　　　　　　　{
                noteBookAdapter.notifyDataSetChanged();
             }
        }
 };
```

　　上面是一段简单的`Handler`的使用。当使用内部类（包括匿名类）来创建`Handler`的时候，`Handler`对象会隐式地持有一个外部类对象（通常是一个`Activity`）的引用（不然你怎么可能通过`Handler`来操作`Activity`中的`View`？）。而`Handler`通常会伴随着一个耗时的后台线程（例如从网络拉取图片）一起出现，这个后台线程在任务执行完毕（例如图片下载完毕）之后，通过消息机制通知`Handler`，然后`Handler`把图片更新到界面。然而，如果用户在网络请求过程中关闭了`Activity`，正常情况下，`Activity`不再被使用，它就有可能在GC检查时被回收掉，但由于这时线程尚未执行完，而该线程持有`Handler`的引用（不然它怎么发消息给`Handler`？），这个`Handler`又持有`Activity`的引用，就导致该`Activity`无法被回收（即内存泄露），直到网络请求结束（例如图片下载完毕）。另外，如果你执行了`Handler`的`postDelayed()`方法，该方法会将你的`Handler`装入一个`Message`，并把这条`Message`推到`MessageQueue`中，那么在你设定的`delay`到达之前，会有一条`MessageQueue -> Message -> Handler -> Activity`的链，导致你的`Activity`被持有引用而无法被回收。


### **二、内存泄露的危害**

* 内存泄露的危害就是会使虚拟机占用内存过高，导致`OOM（内存溢出）`，程序出错。
* 系统给每一个应用分配的内存是固定的，一旦发生了内存泄露，就会导致该应用可用内存越来越小，严重时会发生`OOM`导致`Force Close`。
* 对于Android应用来说，就是你的用户打开一个`Activity`，使用完之后关闭它，内存泄露；又打开，又关闭，又泄露；几次之后，程序占用内存超过系统限制，`Force Close`。

### **解决方法**
#### 1、使用弱引用

首先我们需要理解一下相关概念：

> 强引用：强引用是使用最普遍的引用。如果一个对象具有强引用，那垃圾回收器绝不会回收它。当内存空间不足，Java虚拟机宁愿抛出`OutOfMemoryError`错误，使程序异常终止，也不会靠随意回收具有强引用的对象来解决内存不足的问题。

> 软应用：如果一个对象只具有软引用，则内存空间足够，垃圾回收器就不会回收它；如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高速缓存。

> 弱引用：弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象。


用更直白的语言描述就是，java对于 强引用 的对象,就绝不收回，对于 软引用 的对象，是能不收回就不收回，这里的能不收回就是指内存足够的情况，对于 弱引用 的对象，是发现就收回，但是一般情况下不会发现。

很显然，出现内存泄露问提的原因，就是`Handler`对`Activity`是强引用，导致`GC`在回收`Activity`时无法回收。为了解决这个问题，我们可以把`Handler`对`Activity`弱引用，这样`GC`就能把`Activity`及时的回收，从而杜绝了内存泄露的问题。
```
public class NoLeakActivity extends AppCompatActivity {

    private NoLeakHandler mHandler;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        mHandler = new NoLeakHandler(this);

        Message message = Message.obtain();

        mHandler.sendMessageDelayed(message,10*60*1000);
    }

    private static class NoLeakHandler extends Handler{
        private WeakReference<NoLeakActivity> mActivity;

        public NoLeakHandler(NoLeakActivity activity){
            mActivity = new WeakReference<>(activity);
        }

        @Override
        public void handleMessage(Message msg) {
            if (mActivity.get() == null) {
                return;
            }
            // mActivity.get().todo();
        }
    }
}
```

#### 2、及时清除消息

在原因中我们说到，正是因为被延时处理的`message`持有`Handler`的引用，`Handler`持有对`Activity`的引用，形成了`message – handler – activity`这样一条引用链，导致`Activity` 的泄露。因此我们可以尝试在当前界面结束时将消息队列中未被处理的消息清除，从源头上解除了这条引用链，从而使`Activity`能被及时的回收。

通过查看`Handler`的API，它有几个方法：`removeCallbacks(Runnable r)`和`removeMessages(int what)`等：
```
@Override
public void onDestroy() {
    mHandler.removeMessages(MESSAGE_1);
    mHandler.removeMessages(MESSAGE_2);
    mHandler.removeMessages(MESSAGE_3);
 
    // ... ...
 
    mHandler.removeCallbacks(mRunnable);
    //  If null, all callbacks and messages will be removed.
    mHandler.removeCallbacksAndMessages(null);
}

```

申明 static 是为了解决内部类持有宿主类的引用问题，由于Handler 是 static 的，为了 Handler 能够方便的调用 activity 的方法就持有 activity 的引用，并用 WeakReference 包裹一下。 如果 Handler 不是以内部类的形式出现，那么 static 是不需要的。 为什么用 static 和 为什么用 WeakReference 是逻辑是这样的，并不是没有用。


参考：

[Handler造成Activity泄漏，用弱引用真的有用么? ](https://www.freesion.com/article/4442246797/)

[Handler内存泄露原理及解决方法 - 简书](https://www.jianshu.com/p/f2f186e3dd3e)

[Android App 内存泄露之Handler - CSDN博客](https://blog.csdn.net/zhuanglonghai/article/details/38233069)

[square/leakcanary: A memory leak detection library for Android and Java.内存泄漏检测库](https://github.com/square/leakcanary)
