---
layout: post
title:  "六、单向链表"
date:   2018-07-14 11:00:00 +0800
categories: Android
tags: Handler
author: pepe
description: 『 单向链表 』
---

### `Handler`学习系列

* [一、Handler、Message、MessageQueue、Looper调用过程](
https://494778200pepe.github.io/android/2018/07/14/%E4%B8%80-Handler-Message-MessageQueue-Looper%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B.html)
* [二、Handler 线程切换的原理](https://494778200pepe.github.io/android/2018/07/14/%E4%BA%8C-Handler-%E7%BA%BF%E7%A8%8B%E5%88%87%E6%8D%A2%E7%9A%84%E5%8E%9F%E7%90%86.html)
* [三、什么是ThreadLocal？](https://494778200pepe.github.io/android/2018/07/14/%E4%B8%89-%E4%BB%80%E4%B9%88%E6%98%AFThreadLocal.html)
* [四、Handler使用中的内存泄漏](https://494778200pepe.github.io/android/2018/07/14/%E5%9B%9B-Handler%E4%BD%BF%E7%94%A8%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F.html)
* [五、Handler的消息驱动模型](https://494778200pepe.github.io/android/2018/07/14/%E4%BA%94-Handler%E7%9A%84%E6%B6%88%E6%81%AF%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9E%8B.html)
* [六、单向链表](https://494778200pepe.github.io/android/2018/07/14/%E5%85%AD-%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8.html)
* [七、HandlerThread 使用](https://494778200pepe.github.io/android/2018/07/14/%E4%B8%83-HandlerThread-%E4%BD%BF%E7%94%A8.html)


`MessageQueue`中维护了一个单向链表。

> 单向链表的链表对象维护了一个`first引用`，该引用指向节点链表中的第一个节点对象，每个节点对象维护一个`next引用`，`next引用`指向下一个节点对象；（这里注意：是引用指向的是节点对象：节点对象包含存储的数据和`next引用`）

![Handler3]({{ site.baseurl }}/assets/images/android/Handler/handler3.png)

```
public class LinkedListDemo1 { //表示整个链表对象

    private Node first;        //链表对象的第一个引用
    
    public LinkedListDemo1(){
        
    }
    
    
    public Node getFirst() {
        return first;
    }


    public void setFirst(Node first) {
        this.first = first;
    }


    class Node{              //节点对象
        Item item;          //存储的数据对象
        Node next;          //下一个节点对象的引用
        
        public Item getItem() {
            return item;
        }
        public void setItem(Item item) {
            this.item = item;
        }
        public Node getNext() {
            return next;
        }
        public void setNext(Node next) {
            this.next = next;
        }
        
        
    }
}
```

参考：

[链表数据结构图解 和 代码实现 - beppezhang - 博客园](https://www.cnblogs.com/beppezhang/p/6564633.html)

