---
layout: post
title:  "多渠道打包"
date:   2020-05-02 18:18:00 +0800
categories: Android
tags: 混淆
author: pepe
description: 『 多渠道打包 』
---

### VasDolly 使用

1.在根工程的`build.gradle`中，添加对`打包Plugin`的依赖：

```
dependencies {
        classpath 'com.android.tools.build:gradle:3.0.0'
        classpath 'com.leon.channel:plugin:2.0.3'
}
```
2.引用`VasDolly Plugin`

在主App工程的`build.gradle`中，添加对`VasDolly Plugin`的引用：
```
apply plugin: 'channel'
```

3.添加对`VasDolly helper`类库的依赖

在主App工程的`build.gradle`中，添加读取渠道信息的helper类库依赖：

```
dependencies {
    api 'com.leon.channel:helper:2.0.3'
}
```

4.配置渠道列表

目前有两种方式配置渠道列表，最终的渠道列表是两者的累加之和：

* 第一种：在`gradle.properties`文件指定渠道文件名称，该渠道文件必须位于根工程目录下，一行一个渠道信息。

```
channel_file=channel.txt
```

* 第二种：在`channel`或者`rebuildChannel`属性中通过`channelFile`属性指定渠道文件，一行一个渠道信息。
```
channel{
    //指定渠道文件
    channelFile = file("/Users/leon/Downloads/testChannel.txt")
     //多渠道包的输出目录，默认为new File(project.buildDir,"channel")
    baseOutputDir = new File(project.buildDir,"xxx")
    //多渠道包的命名规则，默认为：${appName}-${versionName}-${versionCode}-${flavorName}-${buildType}
    apkNameFormat ='${appName}-${versionName}-${versionCode}-${flavorName}-${buildType}'
    //快速模式：生成渠道包时不进行校验（速度可以提升10倍以上，默认为false）
    isFastMode = false
    //buildTime的时间格式，默认格式：yyyyMMdd-HHmmss
    buildTimeDateFormat = 'yyyyMMdd-HH:mm:ss'
    //低内存模式（仅针对V2签名，默认为false）：只把签名块、中央目录和EOCD读取到内存，不把最大头的内容块读取到内存，在手机上合成APK时，可以使用该模式
    lowMemory = false
}
rebuildChannel{
    //指定渠道文件
    channelFile = file("/Users/leon/Downloads/testReChannel.txt")
}
```

5.通过Gradle生成多渠道包

若是直接编译生成多渠道包，首先要配置渠道文件、渠道包的输出目录和渠道包的命名规则：

```
channel{
    //指定渠道文件
    channelFile = file("/Users/leon/Downloads/testChannel.txt")
     //多渠道包的输出目录，默认为new File(project.buildDir,"channel")
    baseOutputDir = new File(project.buildDir,"xxx")
    //多渠道包的命名规则，默认为：${appName}-${versionName}-${versionCode}-${flavorName}-${buildType}
    apkNameFormat ='${appName}-${versionName}-${versionCode}-${flavorName}-${buildType}'
    //快速模式：生成渠道包时不进行校验（速度可以提升10倍以上，默认为false）
    isFastMode = false
    //buildTime的时间格式，默认格式：yyyyMMdd-HHmmss
    buildTimeDateFormat = 'yyyyMMdd-HH:mm:ss'
    //低内存模式（仅针对V2签名，默认为false）：只把签名块、中央目录和EOCD读取到内存，不把最大头的内容块读取到内存，在手机上合成APK时，可以使用该模式
    lowMemory = false
}
```

其中，多渠道包的命名规则中，可使用以下字段：

```
appName ： 当前project的name
versionName ： 当前Variant的versionName
versionCode ： 当前Variant的versionCode
buildType ： 当前Variant的buildType，即debug or release
flavorName ： 当前的渠道名称
appId ： 当前Variant的applicationId
buildTime ： 当前编译构建日期时间，时间格式可以自定义，默认格式：yyyyMMdd-HHmmss
然后，通过gradle channelDebug、gradle channelRelease命令分别生成Debug和Release的多渠道包。

```

为了方便临时生成渠道包进行测试，我们从v2.0.0开始支持添加渠道参数：`gradle channelDebug(channelRelease) -Pchannels=yingyongbao,gamecenter`，这里通过属性`channels`指定的渠道列表拥有更高的优先级，且和原始的文件方式是互斥的。

6.读取渠道信息

通过`helper`类库中的`ChannelReaderUtil`类读取渠道信息。

```
String channel = ChannelReaderUtil.getChannel(getApplicationContext());
```

7.打包出来之后，进行加固，会导致渠道信息丢失

可以使用cmd 命令，通过指定渠道文件添加渠道信息
```
java -jar VasDolly.jar put -c channel.txt /home/user/base.apk /home/user/
```

VasDolly/README.md at master · Tencent/VasDolly
https://github.com/Tencent/VasDolly/blob/master/command/README.md

8.根据已有基础包重新生成多渠道包
若是根据已有基础包重新生成多渠道包，首先要配置渠道文件、基础包的路径和渠道包的输出目录：

rebuildChannel {
  //指定渠道文件
  channelFile = file("/Users/leon/Downloads/testReChannel.txt")
  baseDebugApk = 已有Debug APK    
  baseReleaseApk = 已有Release APK
  //默认为new File(project.buildDir, "rebuildChannel/debug")
  debugOutputDir = Debug渠道包输出目录   
  //默认为new File(project.buildDir, "rebuildChannel/release")
  releaseOutputDir = Release渠道包输出目录
  //快速模式：生成渠道包时不进行校验（速度可以提升10倍以上，默认为false）
  isFastMode = false
  //低内存模式（仅针对V2签名，默认为false）：只把签名块、中央目录和EOCD读取到内存，不把最大头的内容块读取到内存，在手机上合成APK时，可以使用该模式
  lowMemory = false
}
然后，通过gradle rebuildChannel命令生成多渠道包。

为了方便临时生成渠道包进行测试，我们从v2.0.0开始支持添加渠道参数：gradle rebuildChannel -Pchannels=yingyongbao,gamecenter，这里通过属性channels指定的渠道列表拥有更高的优先级，且和原始的文件方式是互斥的。









### 原理：

借腾讯开源VasDolly，说说Android签名和多渠道打包的原理
https://mp.weixin.qq.com/s?__biz=MzIxNjc0ODExMA==&mid=2247485235&idx=1&sn=21e3c291f9ee4f8b8a3f7579ca8a9888&chksm=97851e12a0f2970489b61a6cc1d9ff3b1d4162cbce1860bf49f3731342040a34d01bbe23f284&scene=38#wechat_redirect

腾讯开源 多渠道打包 VasDolly实现原理-玩Android - wanandroid.com
https://www.wanandroid.com/blog/show/2045
带你了解腾讯开源的多渠道打包技术 VasDolly源码解析-玩Android - wanandroid.com
https://www.wanandroid.com/blog/show/2113

### 美团方案
Android-V1、V2签名包和快速集成美团多渠道打包（原创） - 简书
https://www.jianshu.com/p/332525b09a88
Walle —— Android多渠道打包神器
https://mp.weixin.qq.com/s/gb2S1IMKTQFfPVqtzqT8rQ
Python多渠道打包的脚本-玩Android - wanandroid.com
https://www.wanandroid.com/blog/show/2475



### 友盟多渠道：
Android友盟统计的集成与使用（包含多渠道打包配置） - 简书
https://www.jianshu.com/p/e4da2f477cd8
Android友盟多渠道统计 - 简书
https://www.jianshu.com/p/523db6ba9c42
Android Studio 使用Gradle多渠道打包
https://mp.weixin.qq.com/s/yKfesG8lodfhJVA-rPfyRg
Android Gradle 多渠道打包
https://mp.weixin.qq.com/s?__biz=MzIxNzU1Nzk3OQ==&mid=2247486694&idx=1&sn=f6114223b83e15921ec68fd7a577713d&chksm=97f6b252a0813b44413b908796e4d41846c79ba374cd1af5f198db9f7c08812a05f638794400&scene=38#wechat_redirect


### productFlavors 
Gradle多渠道打包(动态设定App名称，应用图标，替换常量，更改包名，变更渠道) - 简书
https://www.jianshu.com/p/533240d222d3

### 360加固保
Android 加固和多渠道打包自动化实践 - 简书
https://www.jianshu.com/p/7980004c6b06
Gradle实现自动化加固与多渠道打包 - 掘金
https://juejin.im/post/5e9eb95a6fb9a03c840d787b


### 其他
android插件自定义之多渠道打包插件（支持微信资源混淆andResGuard） - 简书
https://www.jianshu.com/p/3e56303fb375
热修复技术的实践之旅——微信TinkerPatch热修复结合Walle多渠道打包的详解
https://mp.weixin.qq.com/s?__biz=MzIxNzU1Nzk3OQ==&mid=2247487017&idx=1&sn=8abaad1612f871980c042f0fd214975d&chksm=97f6b09da081398b63c2dcd7642b858229ea7c82246af493041ff325c25beb01879bf24d6a0b&scene=38#wechat_redirect
多渠道打包方案调研思考 - Cc1over的博客 | C1☆ Blog
https://cc1over.github.io/2019/07/31/%E5%A4%9A%E6%B8%A0%E9%81%93%E6%89%93%E5%8C%85%E6%96%B9%E6%A1%88%E8%B0%83%E7%A0%94%E6%80%9D%E8%80%83/

