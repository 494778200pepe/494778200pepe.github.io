---
layout: post
title:  "Proguard混淆 常用规则"
date:   2019-07-18 18:23:00 +0800
categories: Android
tags: 混淆
author: pepe
description: 『 常用规则 』
---

* 1、四大组件不建议混淆
    
    。四大组件声明必须在 manifest 中注册,如果混淆后类名更改,而混淆后的类名没有在 manifest 注册,是不符合 Android 组件注册机制的.

    。这些子类都有可能被外部程序调用,如果类名混淆,可能导致出现异常
  
* 2、GSON的序列化与反序列化

    反序列化创建对象本质还是利用反射,会根据 json 字符串的 key 作为属性名称,value 则对应属性值.
    [为什么 GSON的序列化与反序列化 使用到的J avaBean 不能混淆](https://494778200pepe.github.io/android/2019/07/21/Proguard混淆-GSON的序列化与反序列化.html)

* 3、保持测试相关的代码
* 4、Android support 包等

* 5、反射中使用的元素



### **通用配置**
```
#代码混淆压缩比，在0~7之间，默认为5，一般不做修改
-optimizationpasses 5

#把混淆类中的方法名也混淆了
-useuniqueclassmembernames

#优化时允许访问并修改有修饰符的类和类的成员
-allowaccessmodification

# 不跳过非公共的库的类成员
-dontskipnonpubliclibraryclassmembers

# 指定混淆时采用的算法，后面的参数是一个过滤器
# 这个过滤器是谷歌推荐的算法，一般不改变
-optimizations !code/simplification/artithmetic,!field/*,!class/merging/*

# 包含有类名->混淆后类名的映射关系
# 然后使用printmapping指定映射文件的名称
-printmapping priguardMapping.txt

#重命名抛出异常时的文件名称为"SourceFile"
-renamesourcefileattribute SourceFile

#抛出异常时保留代码行号
-keepattributes SourceFile,LineNumberTable

# 自定义混淆字典配置
-obfuscationdictionary ../proguard-tradition.txt
-packageobfuscationdictionary ../proguard-tradition.txt
-classobfuscationdictionary ../proguard-tradition.txt

#保留我们使用的四大组件，自定义的Application等等这些类不被混淆
#因为这些子类都有可能被外部调用
-keep public class * extends android.app.Activity
-keep public class * extends android.app.Appliction
-keep public class * extends android.app.Service
-keep public class * extends android.content.BroadcastReceiver
-keep public class * extends android.content.ContentProvider
-keep public class * extends android.app.backup.BackupAgentHelper
-keep public class * extends android.preference.Preference
-keep public class com.android.vending.licensing.ILicensingService


# 保留Serializable 序列化的类不被混淆
-keepclassmembers class * implements java.io.Serializable {
    static final long serialVersionUID;
    private static final java.io.ObjectStreamField[] serialPersistentFields;
    private void writeObject(java.io.ObjectOutputStream);
    private void readObject(java.io.ObjectInputStream);
    java.lang.Object writeReplace();
    java.lang.Object readResolve();
}

# 保留 json 中用到的 JavaBean
-keep public class **.bean.** {
   *;
}

# 避免混淆内部类、泛型、匿名类
-keepattributes InnerClasses,Signature,EnclosingMethod

# 异常
-keepattributes Exceptions

#Fragment不需要在AndroidManifest.xml中注册，需要额外保护下
-keep public class * extends android.support.v4.app.Fragment
-keep public class * extends android.app.Fragment

#保留support下的所有类及其内部类
-keep class android.support.** {*;}

# 保留继承的support类
-keep public class * extends android.support.v4.**
-keep public class * extends android.support.v7.**
-keep public class * extends android.support.annotation.**

# 如果有引用android-support-v4.jar包，可以添加下面这行
-keep public class com.null.test.ui.fragment.** {*;}

# 对于带有回调函数onXXEvent的，不能混淆
-keepclassmembers class * {
    void *(**On*Event);
}

# 保持测试相关的代码
-dontnote junit.framework.**
-dontnote junit.runner.**
-dontwarn android.test.**
-dontwarn android.support.test.**
-dontwarn org.junit.**

# webview
-keepclassmembers class fqcn.of.javascript.interface.for.webview {
    public *;
}
-keepclassmembers class * extends android.webkit.WebViewClient {
    public void *(android.webkit.WebView, java.lang.String, android.graphics.Bitmap);
    public boolean *(android.webkit.WebView, java.lang.String);
}
-keepclassmembers class * extends android.webkit.WebViewClient {
    public void *(android.webkit.WebView, java.lang.String);
}

# JavaScript
-keepclassmembers class com.null.test.MainActivity$JSInterfacel {
     <methods>;
}
```

### **1. 实体类需要保留**
我们需要保留实体类的get和set方法(反射会用到)，boolean类型的get方法是isXXX，不要忘记保留。
```
 -keep public class com.dev.example.entity.** {
    public void set*(***);
    public *** get*();
    public *** is*();
  }
```
如果所有的实体类在一个包下的话，上面的配置只用写一遍就可以了。可是实际中我们更多的是以业务来划分包名的，于是我们还可以这样配置(实体类的类名一定要含有"Model")
```
-keep public class **.*Model*.** {
    public void set*(***);
    public *** get*();
    public *** is*();
}
```
### **2. 对内部类的处理**
如果项目中使用了内部类，要对其进行保留。

1. **保留写在某个类里面的所有内部类。**下面表示写在类A里面的内部类都会被保留($符号是用来分割内部类与其母体的标志），什么意思呢，比如类A里面有一个内部类B,而B里面也有个内部类C，这时，B和C都会被保留，以此类推，对多重嵌套的情况，都会被保留(当然我们写代码也不会写出这么深层级的内部类出来)，这里的内部类包含静态内部类，非静态内部类，不包含匿名内部类，如果是匿名内部类，只会保留其方法和成员变量（其继承的类或实现的接口的名字会被混淆），另外如果对应的类被保留，在该类里面定义的接口也会被保留，{*;}匹配该类里面的所有部分。
```
-keep class com.dev.example.A$* { *; }
```
2. **保留写在某个内部类里面所有的内部类。**这话听着有点绕口，举个例子，类A里面有个内部类B，下面表示写在类B里面的内部类都会被保留。此时，类B像上面第一点所举得类A一样，有点递归意思在里面。还有就是此时类B的名字不会被混淆，但里面的方法和成员变量会被混淆，如果其它地方没有对类B的方法和成员变量进行保留的话。
```
-keep class com.dev.example.A$B$* { *; }
```

### **3. 对webView进行处理**
```
-keepclassmembers class fqcn.of.javascript.interface.for.webview {
    public *;
}
-keepclassmembers class * extends android.webkit.webViewClient {
    public void *(android.webkit.WebView, java.lang.String, android.graphics.Bitmap);
    public boolean *(android.webkit.WebView, java.lang.String);
}
-keepclassmembers class * extends android.webkit.webViewClient {
    public void *(android.webkit.webView, jav.lang.String);
}
```
### **4. 保留js调用的原生方法**
如果我们的app中涉及到和h5交互，需要保留js调用的原生方法。
```
# Keep JavascriptInterface
-keepclassmembers class ** {
    @android.webkit.JavascriptInterface public *;
}
```
### **5. 对含有反射类的处理**
有时候项目中有些类不是实体类，但仍然用到反射功能,如Class.forName("xxx")，这是我们需要保留的。比如这些类在com.dev.example包下，可以通过下面的配置进行保留。
```
-keep class com.dev.example.* { *; }
```
另外上面只是保留了该包下的类，如果该包下还有子包，则子包的类仍然会被混淆，
如果想保留该包下子包的类，我们可以如下配置（**能匹配本包和所含子包，其中子包也可以含有子包）
```
-keep class com.dev.example.**{ *; }
```

### **6. 常见的自定义的配置**
1.保留某个特定的类
```
#保留Test类
-keep public class com.dev.example.Test { *; }
```
2.保留某个类的子类
```
#保留继承了AbstractClass的子类
-keep class * extends com.dev.example.AbstractClass{*;}
```
3.保留接口的实现类
```
#保留实现了Callable接口的类
-keep class * implements Callable{*;}
```
4.保留类的特定部分
保留TaskRepository类的所有构造方法，变量和普通方法。
```
-keep class com.dev.example.TaskRepository{
 <init>;     //匹配所有构造器
 <fields>;   //匹配所有域
 <methods>;  //匹配所有方法
}
```
还可以保留的更具体一点，如下所示
```
-keepclassmembers com.dev.example.TaskRepository{
 // 保留该类的修饰符是public且有一个参数(类型是String)的构造方法
 public <init>(java.lang.String);
 // 保留该类的所有修饰符是public且返回类型void的方法
 public void *(**); 
 // 保留该类的具体某一个方法                 
 public String getUserName();       
}
```






































参考：

[Android 开发应该掌握的 Proguard 技巧](https://mp.weixin.qq.com/s/sFPnK_nvNQOWRK3rd3XnZw)

[android 防破解, 代码混淆，代码保护 - 晕菜一员 - 博客园](https://www.cnblogs.com/CharlesGrant/p/7544311.html)
 
[混淆规则(常用) - 简书](https://www.jianshu.com/p/b1fede1a7edf)

[关于Android代码混淆的详细讲解 - 码农教程](http://www.manongjc.com/article/1598.html)

