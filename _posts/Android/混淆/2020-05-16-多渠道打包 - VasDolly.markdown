---
layout: post
title:  "多渠道打包 - VasDolly"
date:   2020-05-16 14:02:00 +0800
categories: Android
tags: 混淆
author: pepe
description: 『 VasDolly 』
---

项目地址：

[Tencent/VasDolly: Android V1 and V2 Signature Channel Package Plugin](https://github.com/Tencent/VasDolly)

### VasDolly 使用

1.在根工程的`build.gradle`中，添加对`打包Plugin`的依赖：

```
dependencies {
        classpath 'com.android.tools.build:gradle:3.0.0'
        classpath 'com.leon.channel:plugin:2.0.3'
}
```
2.引用`VasDolly Plugin`

在主App工程的`build.gradle`中，添加对`VasDolly Plugin`的引用：
```
apply plugin: 'channel'
```

3.添加对`VasDolly helper`类库的依赖

在主App工程的`build.gradle`中，添加读取渠道信息的helper类库依赖：

```
dependencies {
    api 'com.leon.channel:helper:2.0.3'
}
```

4.配置渠道列表

目前有两种方式配置渠道列表，最终的渠道列表是两者的累加之和：

* 第一种：在`gradle.properties`文件指定渠道文件名称，该渠道文件必须位于根工程目录下，一行一个渠道信息。

```
channel_file=channel.txt
```

* 第二种：在`channel`或者`rebuildChannel`属性中通过`channelFile`属性指定渠道文件，一行一个渠道信息。
```
channel{
    //指定渠道文件
    channelFile = file("/Users/leon/Downloads/testChannel.txt")
     //多渠道包的输出目录，默认为new File(project.buildDir,"channel")
    baseOutputDir = new File(project.buildDir,"xxx")
    //多渠道包的命名规则，默认为：${appName}-${versionName}-${versionCode}-${flavorName}-${buildType}
    apkNameFormat ='${appName}-${versionName}-${versionCode}-${flavorName}-${buildType}'
    //快速模式：生成渠道包时不进行校验（速度可以提升10倍以上，默认为false）
    isFastMode = false
    //buildTime的时间格式，默认格式：yyyyMMdd-HHmmss
    buildTimeDateFormat = 'yyyyMMdd-HH:mm:ss'
    //低内存模式（仅针对V2签名，默认为false）：只把签名块、中央目录和EOCD读取到内存，不把最大头的内容块读取到内存，在手机上合成APK时，可以使用该模式
    lowMemory = false
}
rebuildChannel{
    //指定渠道文件
    channelFile = file("/Users/leon/Downloads/testReChannel.txt")
}
```

5.通过Gradle生成多渠道包

若是直接编译生成多渠道包，首先要配置渠道文件、渠道包的输出目录和渠道包的命名规则：

```
channel{
    //指定渠道文件
    channelFile = file("/Users/leon/Downloads/testChannel.txt")
     //多渠道包的输出目录，默认为new File(project.buildDir,"channel")
    baseOutputDir = new File(project.buildDir,"xxx")
    //多渠道包的命名规则，默认为：${appName}-${versionName}-${versionCode}-${flavorName}-${buildType}
    apkNameFormat ='${appName}-${versionName}-${versionCode}-${flavorName}-${buildType}'
    //快速模式：生成渠道包时不进行校验（速度可以提升10倍以上，默认为false）
    isFastMode = false
    //buildTime的时间格式，默认格式：yyyyMMdd-HHmmss
    buildTimeDateFormat = 'yyyyMMdd-HH:mm:ss'
    //低内存模式（仅针对V2签名，默认为false）：只把签名块、中央目录和EOCD读取到内存，不把最大头的内容块读取到内存，在手机上合成APK时，可以使用该模式
    lowMemory = false
}
```

其中，多渠道包的命名规则中，可使用以下字段：

```
appName ： 当前project的name
versionName ： 当前Variant的versionName
versionCode ： 当前Variant的versionCode
buildType ： 当前Variant的buildType，即debug or release
flavorName ： 当前的渠道名称
appId ： 当前Variant的applicationId
buildTime ： 当前编译构建日期时间，时间格式可以自定义，默认格式：yyyyMMdd-HHmmss
然后，通过gradle channelDebug、gradle channelRelease命令分别生成Debug和Release的多渠道包。

```

为了方便临时生成渠道包进行测试，我们从v2.0.0开始支持添加渠道参数：`gradle channelDebug(channelRelease) -Pchannels=yingyongbao,gamecenter`，这里通过属性`channels`指定的渠道列表拥有更高的优先级，且和原始的文件方式是互斥的。

6.读取渠道信息

通过`helper`类库中的`ChannelReaderUtil`类读取渠道信息。

```
String channel = ChannelReaderUtil.getChannel(getApplicationContext());
```

7.打包出来之后，进行加固，会导致渠道信息丢失

可以使用cmd 命令，通过指定渠道文件添加渠道信息
```
java -jar VasDolly.jar put -c channel.txt /home/user/base.apk /home/user/
```

[VasDolly/README.md at master · Tencent/VasDolly](https://github.com/Tencent/VasDolly/blob/master/command/README.md)

8.根据已有基础包重新生成多渠道包

若是根据已有基础包重新生成多渠道包，首先要配置渠道文件、基础包的路径和渠道包的输出目录：

```
rebuildChannel {
  //指定渠道文件
  channelFile = file("/Users/leon/Downloads/testReChannel.txt")
  baseDebugApk = 已有Debug APK    
  baseReleaseApk = 已有Release APK
  //默认为new File(project.buildDir, "rebuildChannel/debug")
  debugOutputDir = Debug渠道包输出目录   
  //默认为new File(project.buildDir, "rebuildChannel/release")
  releaseOutputDir = Release渠道包输出目录
  //快速模式：生成渠道包时不进行校验（速度可以提升10倍以上，默认为false）
  isFastMode = false
  //低内存模式（仅针对V2签名，默认为false）：只把签名块、中央目录和EOCD读取到内存，不把最大头的内容块读取到内存，在手机上合成APK时，可以使用该模式
  lowMemory = false
}
```
然后，通过`gradle rebuildChannel`命令生成多渠道包。

为了方便临时生成渠道包进行测试，我们从v2.0.0开始支持添加渠道参数：`gradle rebuildChannel -Pchannels=yingyongbao,gamecenter`，这里通过属性`channels`指定的渠道列表拥有更高的优先级，且和原始的文件方式是互斥的。




