---
layout: post
title:  "Camera2"
date:   2018-12-08 13:50:00 +0800
categories: Android
tags: Camera
author: pepe
description: 『 Camera2 』
---

android5.0之后支持的API，主要功能都在`android.hardware.camera2`中。相关的类有： 

* 1：`CameraManager`(以及两个回调 `AvailabilityCallback`和`TorchCallback`) 
* 2：`CameraDevice`(以及回调`StateCallback`) 
* 3：`CameraCaptureSession`(以及两个回调：`CaptureCallback`和`StateCallback`) 
* 4：`CaptureRequest`(以及`CaptureRequest.Builder`类)+`CaptureResult+TotalCaptureResult`+`CameraCharacteristics`，这四个类都继承了基类`CameraMetadata` 
* 5：接收数据类`android.media.ImageReader`
* 6：`xml`布局类：`TextureView` (google demo推荐)或`SurfaceView`


### **1`CameraManager`**

> 用于管理系统摄像头。

`CameraManager manager = (CameraManager)context.getSystemService(Context.CAMERA_SERVICE);`

* 1、`getCameraIdList()`:获取可用摄像头列表

```
private void getCameraId() {
        mCameraManager = (CameraManager) mContext.getSystemService(Context.CAMERA_SERVICE);
        try {
            //获取可用摄像头列表
            for (String cameraId : mCameraManager.getCameraIdList()) {
                //获取相机的相关参数
                CameraCharacteristics characteristics = mCameraManager.getCameraCharacteristics(cameraId);
                Integer facing = characteristics.get(CameraCharacteristics.LENS_FACING);
                if (facing != null) {
                    if (facing == CameraCharacteristics.LENS_FACING_FRONT) {
                        // 后置摄像头的id
                        cameraBackId = String.valueOf(facing);
                    } else if (facing == CameraCharacteristics.LENS_FACING_BACK) {
                        // 前置摄像头的id
                        cameraFrontId = String.valueOf(facing);
                    }
                }
            }
        } catch (CameraAccessException e) {
            e.printStackTrace();
        } catch (NullPointerException e) {
            //不支持Camera2API
        }
    }
```

* 2、`getCameraCharacteristics(String cameraId)`:获取摄像头的详细参数和支持的功能

* 3、`openCamera(String cameraId, CameraDevice.StateCallback callback, Handler handler)`打开指定Id的摄像头

```
mCameraManager.openCamera(cameraId, mStateCallback, "@Handler");
```

### **2`CameraCharacteristics`**

> 描述`Cameradevice`属性的对象，可以使用`CameraManager`通过`getCameraCharacteristics（String cameraId）`进行查询。

### **3`CameraDevice`**

> `CameraDevice`是`Camera2`中抽象出来的一个对象，直接与系统硬件摄像头相联系。因为不可能所有的摄像头都会支持高级功能（即摄像头功能可被分为`limit`和`full`两个级别），当摄像头处于`limited`级别时候，此时`Camera2`和早期的`Camera`功能差不多，除此之外在`Camera2`架构中，`CameraDevice`还承担其他两项重要任务：

* 可以通过`CameraDevice.StateCallback`监听摄像头(`CameraDevice`)的状态（主要包括`onOpened、onClosed(非抽象方法)、onDisconnected、onErro`四种状态）,`StateCallback `是在`CameraManager.openCamera()`时传入的回调。

```
private CameraDevice.StateCallback mStateCallback = new CameraDevice.StateCallback() {


        @Override
        public void onOpened(@NonNull CameraDevice cameraDevice) {
            // 当相机完成打开操作后，这个方法就被调用
            Log.d("pepe", "StateCallback    onOpened");
            mCameraDevice = cameraDevice;
            startPreview();
            mCameraOpenCloseLock.release();
            if (null != mTextureView) {
                configureTransform(mTextureView.getWidth(), mTextureView.getHeight());
            }
        }

        @Override
        public void onDisconnected(@NonNull CameraDevice cameraDevice) {
            // 当相机设备不再可用时，这个方法就被调用
            Log.d("pepe", "StateCallback    onDisconnected");
            mCameraOpenCloseLock.release();
            cameraDevice.close();
            mCameraDevice = null;
        }

        @Override
        public void onError(@NonNull CameraDevice cameraDevice, int error) {
            Log.d("pepe", "StateCallback    onError");
            // 当相机设备遇到严重错误时，这种方法就被调用了，错误见下面的说明
            // ERROR_CAMERA_DEVICE	由CameraDevice.StateCallback的onError(CameraDevice, int)报告的错误代码，表明相机设备遇到了一个致命错误
            //	ERROR_CAMERA_DISABLED	由CameraDevice.StateCallback的onError(CameraDevice, int)报告的错误代码，这表明由于设备的政策，相机设备无法打开。
            //	ERROR_CAMERA_IN_USE	由onError(CameraDevice, int)报告的错误代码，表明摄像机设备已经在使用中了
            //	ERROR_CAMERA_SERVICE	由onError(CameraDevice, int)报告的错误代码，表明摄像机服务遇到了一个致命错误。
            //	ERROR_MAX_CAMERAS_IN_USE	由onError(CameraDevice, int)报告的错误代码，表明相机设备无法打开，因为有太多其他的开放相机设备。

            mCameraOpenCloseLock.release();
            cameraDevice.close();
            mCameraDevice = null;
            finish();
        }

        @Override
        public void onClosed(CameraDevice camera){
            // 当一个相机设备CameraDevice的close()方法时，这个方法就被调用
        }
    };
```

* 创建`CameraCaptureSession`，-通过方法`createCaptureSession(List outputs, CameraCaptureSession.StateCallback callback, Handler handler)`方法和`createReprocessableCaptureSession(InputConfiguration inputConfig, List outputs, CameraCaptureSession.StateCallback callback, Handler handler)`方法创建会话 （其中第三个参数： `The handler on which the callback should be invoked, or null to use the current thread’s looper.`），通常会在`CameraDevice.StateCallback`中调用对应方法创建预览会话。

```
mCameraDevice.createCaptureSession(surfaces, new CameraCaptureSession.StateCallback() {

                @Override
                public void onConfigured(@NonNull CameraCaptureSession cameraCaptureSession) {
                    mPreviewSession = cameraCaptureSession;
                    updatePreview();
                    runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            // UI
                            mButtonVideo.setText(R.string.stop);
                            mIsRecordingVideo = true;

                            // Start recording
                            mMediaRecorder.start();
                        }
                    });
                }

                @Override
                public void onConfigureFailed(@NonNull CameraCaptureSession cameraCaptureSession) {
                    Toast.makeText(mContext, "Failed", Toast.LENGTH_SHORT).show();
                }
            }, mBackgroundHandler);
```

* 创建`CaptureRequest`，主要包括通过`createCaptureRequest（int templateType）`创建捕获请求，在需要预览、拍照、再次预览的时候都需要通过创建请求来完成。

```
mPreviewBuilder = mCameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_RECORD);
```

#### **常量：用于创建CaptureRequest**

* TEMPLATE_MANUAL：	一个用于直接应用控制捕获参数的基本模板。
* TEMPLATE_PREVIEW：	创建一个适合于相机预览窗口的请求。
* TEMPLATE_RECORD：	创建一个适合于视频录制的请求。
* TEMPLATE_STILL_CAPTURE：	创建一个适合于静态图像捕获的请求。
* TEMPLATE_ZERO_SHUTTER_LAG：	创建一个适用于零快门延迟的请求。
* TEMPLATE_VIDEO_SNAPSHOT：	在录制视频时创建一个适合静态图像捕捉的请求。

#### **方法说明**

* `close()`：返回void,尽可能快地关闭与这个相机设备的连接。
* `createCaptureRequest(int templateType)`：返回`CaptureRequest.Builder`,创建一个`CaptureRequest.Builder`用于新捕获请求的，初始化为目标用例的模板。
* `createCaptureSession(List Surface outputs, CameraCaptureSession.StateCallback callback, Handler handler)`：返回void,	通过向相机设备提供`Surfaces`的目标输出集，创建一个新的相机捕捉会话。
* `createCaptureSessionByOutputConfigurations(List OutputConfiguration outputConfigurations, CameraCaptureSession.StateCallback callback, Handler handler)`：返回void,	通过为相机设备提供表面的目标输出集和相应的表面配置来创建一个新的相机捕捉会话。
* `createConstrainedHighSpeedCaptureSession(List Surface outputs, CameraCaptureSession.StateCallback callback, Handler handler)`：返回void,	创建一个新的受限的高速捕捉会话。
* `getId()`：返回String,	获取相机设备的ID，string类型


### **4`CameraRequest`和`CameraRequest.Builder`**

> `CameraRequest`代表了一次捕获请求，而`CameraRequest.Builder`用于描述捕获图片的各种参数设置，包含捕获硬件（传感器，镜头，闪存），对焦模式、曝光模式，处理流水线，控制算法和输出缓冲区的配置。，然后传递到对应的会话中进行设置，`CameraRequest.Builder`则负责生成`CameraRequest`对象。当程序调用`setRepeatingRequest()`方法进行预览时，或调用capture()方法进行拍照时，都需要传入`CameraRequest`参数。`CameraRequest`可以通过`CameraRequest.Builder`来进行初始化，通过调用`createCaptureRequest`来获得。

```
mPreviewSession.setRepeatingRequest(mPreviewBuilder.build(), "@CaptureCallback", mBackgroundHandler);
```

### **5`CameraCaptureSession`**

> 系统向摄像头发送`Capture`请求，而摄像头会返回`CameraMetadata`，这一切都是在由对应的`CameraDevice`创建的`CameraCaptureSession`会话完成，当程序需要预览、拍照、再次预览时，都需要先通过会话。

* CameraCaptureSession一旦被创建，直到对应的CameraDevice关闭才会死掉.

* 虽然CameraCaptureSession会话用于从摄像头中捕获图像，但是只有同一个会话才能再次从同一摄像头中捕获图像。

* 创建会话是一项耗时的异步操作，可能需要几百毫秒，因为它需要配置相机设备的内部管道并分配内存缓冲区以将图像发送到所需的目标，因而createCaptureSession和createReprocessableCaptureSession会将随时可用的CameraCaptureSession发送到提供的监听器的onConfigured回调中。如果无法完成配置，则触发onConfigureFailed回调，并且会话将不会变为活动状态。

* 如果摄像头设备创建了一个新的会话，那么上一个会话是被关闭的，并且会回调与其关联的onClosed，如果不处理好，当会话关闭之后再次调用会话的对应方法那么所有方法将会跑出IllegalStateException异常。关闭的会话清除任何重复的请求（和调用了stopRepeating()方法类似），但是在新创建的会话接管并重新配置摄像机设备之前，关闭的会话仍然会正常完成所有正在进行的捕获请求。


#### **功能**

* 1、管理CameraCaptureSession.StateCallback状态回调，用于接收有关CameraCaptureSession状态的更新的回调对象，主要回调方法有两个当CameraDevice 完成配置，对应的会话开始处理捕获请求时触发onConfigured(CameraCaptureSession session)方法，反之配置失败时候触发onConfigureFailed(CameraCaptureSession session)方法。

* 2、管理CameraCaptureSession.CaptureCallback捕获回调，用于接收捕获请求状态的回调，当请求触发捕获已启动时；捕获完成时；在捕获图像时发生错误的情况下；都会触发该回调对应的方法。

* 3、通过调用方法capture(CaptureRequest request, CameraCaptureSession.CaptureCallback listener, Handler handler)提交捕获图像请求（Submit a request for an image to be captured by the camera device.）即拍照


### **6`CaptureResult`**

> `CaptureRequest`描述是从图像传感器捕获单个图像的结果的子集的对象。（`CaptureResults are produced by a CameraDevice after processing a CaptureRequest`）当`CaptureRequest`被处理之后由`CameraDevice`生成。



参考：

[Android进阶——你所知道的Camera2和你所不知道的Camera2完全解析 - 最美不过，心中有梦，身旁有你！ - CSDN博客](https://blog.csdn.net/CrazyMo_/article/details/78182243?locationNum=7&fps=1)

[Android基础总结： Camera2详解之一 API学习 - sjy0118的博客 - CSDN博客](https://blog.csdn.net/sjy0118/article/details/78748941)





[Android Camera2 使用总结 - 简书](https://www.jianshu.com/p/73fed068a795)

[android.hardware.camera2 使用指南 - Android 实战技巧 - 极客学院Wiki](http://wiki.jikexueyuan.com/project/android-actual-combat-skills/android-hardware-camera2-operating-guide.html)

[android.hardware.camera2  -  Android Developers](https://developer.android.google.cn/reference/android/hardware/camera2/package-summary)

[android-Camera2Video/AutoFitTextureView.java at master · googlesamples/android-Camera2Video](https://github.com/googlesamples/android-Camera2Video/blob/master/Application/src/main/java/com/example/android/camera2video/AutoFitTextureView.java)

[android-Camera2Basic/Camera2BasicFragment.java at master · googlesamples/android-Camera2Basic](https://github.com/googlesamples/android-Camera2Basic/blob/master/Application/src/main/java/com/example/android/camera2basic/Camera2BasicFragment.java)

[googlesamples/android-Camera2Raw](https://github.com/googlesamples/android-Camera2Raw)

[pinguo-yuyidong/Camera2: Android L Camera2 Demo](https://github.com/pinguo-yuyidong/Camera2)
