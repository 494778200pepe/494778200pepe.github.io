---
layout: post
title:  "Android开发规范"
date:   2018-05-24 15:40:00 +0800
categories: Android
tags: Android
author: pepe
description: 『 Android开发规范 』
---

### **包的划分**

> 推荐采用 PBF（按功能分包 Package By Feature）。

```
com
└── domain
    └── app
        ├── App.java 定义 Application 类
        ├── Config.java 定义配置数据（常量）
        ├── base 基础组件
        ├── custom_view 自定义视图
        ├── data 数据处理
        │   ├── DataManager.java 数据管理器，
        │   ├── local 来源于本地的数据，比如 SP，Database，File
        │   ├── model 定义 model（数据结构以及 getter/setter、compareTo、equals 等等，不含复杂操作）
        │   └── remote 来源于远端的数据
        ├── feature 功能
        │   ├── feature0 功能 0
        │   │   ├── feature0Activity.java
        │   │   ├── feature0Fragment.java
        │   │   ├── xxAdapter.java
        │   │   └── ... 其他 class
        │   └── ...其他功能
        ├── injection 依赖注入
        ├── util 工具类
        └── widget 小部件
```

## **命名规范**
### **类名**

类名都以 `UpperCamelCase` 风格编写。

<table width="800" border="2" cellspacing="0" cellpadding="2">
<tbody>
    <tr>
        <td>类</td>
        <td>描述</td>
        <td>例如</td>
    </tr>
    <tr>
        <td><font color="Hotpink">Activity</font> 类</td>
        <td><font color="Hotpink">Activity</font> 为后缀标识</td>
        <td><font color="Hotpink">Activity</font> 欢迎页面类 <font color="Hotpink">WelcomeActivity</font></td>
    </tr>
   <tr>
        <td><font color="Hotpink">Adapter</font> 类</td>
        <td><font color="Hotpink">Adapter</font> 为后缀标识</td>
        <td>新闻详情适配器 <font color="Hotpink">NewsDetailAdapter</font></td>
    </tr>
   <tr>
        <td>解析类</td>
        <td><font color="Hotpink">Parser</font> 为后缀标识</td>
        <td>首页解析类 <font color="Hotpink">HomePosterParser</font></td>
    </tr> 
    <tr>
        <td>工具方法类</td>
        <td><font color="Hotpink">Utils</font> 或 <font color="Hotpink">Manager</font> 为后缀标识</td>
        <td>线程池管理类：<font color="Hotpink">ThreadPoolManager</font>日志工具类：<font color="Hotpink">LogUtils</font>（<font color="Hotpink">Logger</font> 也可）打印工具类：<font color="Hotpink">PrinterUtils</font></td>
    </tr>
    <tr>
        <td>数据库类</td>
        <td>以 <font color="Hotpink">DBHelper</font> 后缀标识</td>
        <td>新闻数据库：<font color="Hotpink">NewsDBHelper</font></td>
    </tr>
    <tr>
        <td><font color="Hotpink">Service</font> 类</td>
        <td>以 <font color="Hotpink">Service</font> 为后缀标识</td>
        <td>时间服务 <font color="Hotpink">TimeService</font></td>
    </tr>
    <tr>
        <td><font color="Hotpink">BroadcastReceiver</font> 类</td>
        <td>以 <font color="Hotpink">Receiver</font> 为后缀标识</td>
        <td>推送接收 <font color="Hotpink">JPushReceiver</font></td>
    </tr>
    <tr>
        <td><font color="Hotpink">ContentProvider</font> 类</td>
        <td>以 <font color="Hotpink">Provider</font> 为后缀标识</td>
        <td><font color="Hotpink">ShareProvider</font></td>
    </tr>
    <tr>
        <td>自定义的共享基础类</td>
        <td>以 <font color="Hotpink">Base</font>开头</td>
        <td><font color="Hotpink">BaseActivity</font>, <font color="Hotpink">BaseFragment</font></td>
    </tr>
</tbody>
</table>


测试类的命名以它要测试的类的名称开始，以 Test 结束。例如：`HashTest` 或 `HashIntegrationTest`。

接口（interface）：命名规则与类一样采用大驼峰命名法，多以 able 或 ible 结尾，如 `interface Runnable`、`interface Accessible`。

> 注意：如果项目采用 `MVP`，所有 `Model`、`View、Presenter` 的接口都以 I 为前缀，不加后缀，其他的接口采用上述命名规则。


### **方法名**

方法名都以 `lowerCamelCase` 风格编写。

<table width="800" border="2" cellspacing="0" cellpadding="2">
<tbody> 
    <tr>
        <td>方法</td>
        <td>说明</td>
    </tr>
    <tr>
        <td><font color="Hotpink">initXX()</font> </td>
        <td>初始化相关方法，使用 init 为前缀标识，如初始化布局 <font color="Hotpink">initView()</font></td>
    </tr>
    <tr>
        <td><font color="Hotpink">isXX()</font>, <font color="Hotpink">checkXX()</font></td>
        <td>方法返回值为 boolean 型的请使用 is/check 为前缀标识</td>
    </tr>
    <tr>
        <td><font color="Hotpink">getXX()</font></td>
        <td>返回某个值的方法，使用 get 为前缀标识</td>
    </tr>
    <tr>
        <td><font color="Hotpink">setXX()</font></td>
        <td>设置某个属性值</td>
    </tr>
    <tr>
        <td><font color="Hotpink">handleXX()</font>, <font color="Hotpink">processXX()</font></td>
        <td>对数据进行处理的方法</td>
    </tr>
    <tr>
        <td><font color="Hotpink">displayXX()</font>, <font color="Hotpink">showXX()</font></td>
        <td>弹出提示框和提示信息，使用 display/show 为前缀标识</td>
    </tr>
    <tr>
        <td><font color="Hotpink">updateXX()</font></td>
        <td>更新数据</td>
    </tr>
    <tr>
        <td><font color="Hotpink">saveXX()</font>, <font color="Hotpink">insertXX()</font></td>
        <td>保存或插入数据</td>
    </tr>
    <tr>
        <td><font color="Hotpink">resetXX()</font></td>
        <td>重置数据</td>
    </tr>
    <tr>
        <td><font color="Hotpink">clearXX()</font></td>
        <td>清除数据</td>
    </tr>
    <tr>
        <td><font color="Hotpink">removeXX()</font>, <font color="Hotpink">deleteXX()</font></td>
        <td>移除数据或者视图等，如 <font color="Hotpink">removeView()</font></td>
    </tr>
    <tr>
        <td><font color="Hotpink">drawXX()</font></td>
        <td>绘制数据或效果相关的，使用 draw 前缀标识</td>
    </tr>
</tbody>
</table>

### **常量名**

常量名命名模式为 `CONSTANT_CASE`，全部字母大写，用下划线分隔单词。

### **非常量字段名**

> 非常量字段名以 `lowerCamelCase` 风格的基础上改造为如下风格：基本结构为 `scope{Type0}VariableName{Type1}`、`type0VariableName{Type1}`、`variableName{Type1}`。

#### **1、scope（范围）**

* 非公有，非静态字段命名以 m 开头。
* 静态字段命名以 s 开头。
* 其他字段以小写字母开头。

例如：

```
public class MyClass {
    public int publicField;
    private static MyClass sSingleton;
    int mPackagePrivate;
    private int mPrivate;
    protected int mProtected;
}
```

#### **2、Type0（控件类型）**

例如：`mIvAvatar`、`rvBooks`、`flContainer`。

UI 控件缩写表

<table width="400" border="2" cellspacing="0" cellpadding="2">
<tbody> 
    <tr>
        <td>名称</td>
        <td>缩写</td>
    </tr>
    <tr>
        <td>Button</td>
        <td>btn</td>
    </tr>
    <tr>
        <td>CheckBox</td>
        <td>cb</td>
    </tr>
    <tr>
        <td>EditText</td>
        <td>et</td>
    </tr>
    <tr>
        <td>FrameLayout</td>
        <td>fl</td>
    </tr>
    <tr>
        <td>GridView</td>
        <td>gv</td>
    </tr>
    <tr>
        <td>ImageButton</td>
        <td>ib</td>
    </tr>
    <tr>
        <td>ImageView</td>
        <td>iv</td>
    </tr>
    <tr>
        <td>LinearLayout</td>
        <td>ll</td>
    </tr>
    <tr>
        <td>ListView</td>
        <td>lv</td>
    </tr>
    <tr>
        <td>ProgressBar</td>
        <td>pb</td>
    </tr>
    <tr>
        <td>RadioButtion</td>
        <td>rb</td>
    </tr>
    <tr>
        <td>RecyclerView</td>
        <td>rv</td>
    </tr>
    <tr>
        <td>RelativeLayout</td>
        <td>rl</td>
    </tr>
    <tr>
        <td>ScrollView</td>
        <td>sv</td>
    </tr>
    <tr>
        <td>SeekBar</td>
        <td>sb</td>
    </tr>
    <tr>
        <td>Spinner</td>
        <td>spn</td>
    </tr>
    <tr>
        <td>TextView</td>
        <td>tv</td>
    </tr>
    <tr>
        <td>ToggleButton</td>
        <td>tb</td>
    </tr>
    <tr>
        <td>VideoView</td>
        <td>vv</td>
    </tr>
    <tr>
        <td>WebView</td>
        <td>wv</td>
    </tr>
</tbody>
</table>

#### **3、VariableName（变量名）**

变量名中可能会出现量词，我们需要创建统一的量词，它们更容易理解，也更容易搜索。
例如：mFirstBook、mPreBook、curBook。

<table width="500" border="2" cellspacing="5" cellpadding="2">
<tbody> 
    <tr>
        <td>量词列表</td>
        <td>量词后缀说明</td>
    </tr>
    <tr>
        <td>First</td>
        <td>一组变量中的第一个</td>
    </tr>
    <tr>
        <td>Last</td>
        <td>一组变量中的最后一个</td>
    </tr>
    <tr>
        <td>Next</td>
        <td>一组变量中的下一个</td>
    </tr>
    <tr>
        <td>Pre</td>
        <td>一组变量中的上一个</td>
    </tr>
    <tr>
        <td>Cur</td>
        <td>一组变量中的当前变量</td>
    </tr>
</tbody>
</table>

#### **4、Type1（数据类型）**

对于表示集合或者数组的非常量字段名，我们可以添加后缀来增强字段的可读性，比如：
集合添加如下后缀：List、Map、Set。
数组添加如下后缀：Arr。
例如：`mIvAvatarList`、`userArr`、`firstNameSet`。

> 注意：如果数据类型不确定的话，比如表示的是很多书，那么使用其复数形式来表示也可，例如 `mBooks`。

### **参数名，局部变量名，临时变量**

* 参数名：`lowerCamelCase`

* 局部变量名：`lowerCamelCase`

* 临时变量：临时变量通常被取名为 `i`、`j`、`k`、`m` 和 `n`，它们一般用于整型；`c`、`d`、`e`，它们一般用于字符型。 如：`for (int i = 0; i < len; i++)`。

## **代码样式规范**
### **类成员的顺序**

这并没有唯一的正确解决方案，但如果都使用一致的顺序将会提高代码的可读性，推荐使用如下排序：

* 1、常量
* 2、字段
* 3、构造函数
* 4、重写函数和回调
* 5、公有函数
* 6、私有函数
* 7、内部类或接口

如果类继承于 Android 组件（例如 `Activity` 或 `Fragment`），那么把重写函数按照他们的生命周期进行排序是一个非常好的习惯，例如，`Activity` 实现了 `onCreate()`、`onDestroy()`、`onPause()`、`onResume()`，它的正确排序如下所示：
```
public class MainActivity extends Activity {
    //Order matches Activity lifecycle
    @Override
    public void onCreate() {}

    @Override
    public void onResume() {}

    @Override
    public void onPause() {}

    @Override
    public void onDestroy() {}
}
```

### **函数参数的排序**
在 Android 开发过程中，`Context` 在函数参数中是再常见不过的了，我们最好把 `Context` 作为其第一个参数。
正相反，我们把回调接口应该作为其最后一个参数。

### **字符串常量的命名和值**

Android SDK 中的很多类都用到了键值对函数，比如SharedPreferences、Bundle、Intent，所以，即便是一个小应用，我们最终也不得不编写大量的字符串常量。
当时用到这些类的时候，我们 必须 将它们的键定义为 static final 字段，并遵循以下指示作为前缀。

<table width="500" border="2" cellspacing="5" cellpadding="2">
<tbody> 
    <tr>
        <td>类</td>
        <td>字段名前缀</td>
    </tr>
    <tr>
        <td>SharedPreferences</td>
        <td><font color="Hotpink">PREF_</font></td>
    </tr>
    <tr>
        <td>Bundle</td>
        <td><font color="Hotpink">BUNDLE_</font></td>
    </tr>
    <tr>
        <td>FragmentArguments</td>
        <td><font color="Hotpink">ARGUMENT_</font></td>
    </tr>
    <tr>
        <td>Intent Extra</td>
        <td><font color="Hotpink">EXTRA_</font></td>
    </tr>
    <tr>
        <td>Intent Action</td>
        <td><font color="Hotpink">ACTION_</font></td>
    </tr>
</tbody>
</table>

说明：虽然 `Fragment.getArguments()` 得到的也是 `Bundle` ，但因为这是 `Bundle` 的常用用法，所以特意为此定义一个不同的前缀。
例如：
```
// 注意：字段的值与名称相同以避免重复问题
static final String PREF_EMAIL = "PREF_EMAIL";
static final String BUNDLE_AGE = "BUNDLE_AGE";
static final String ARGUMENT_USER_ID = "ARGUMENT_USER_ID";

// 与意图相关的项使用完整的包名作为值的前缀
static final String EXTRA_SURNAME = "com.myapp.extras.EXTRA_SURNAME";
static final String ACTION_OPEN_USER = "com.myapp.action.ACTION_OPEN_USER";
```

### **Activities 和 Fragments 的传参**
当 `Activity` 或 `Fragment` 启动需要传递参数时，那么它需要提供一个 `public static` 的函数来帮助启动或创建它。
这方面，AS 已帮你写好了相关的 Live Templates，启动相关 `Activity` 的只需要在其内部输入 `starter` 即可生成它的启动器，如下所示：
```
public static void start(Context context, User user) {
      Intent starter = new Intent(context, MainActivity.class);
      starter.putParcelableExtra(EXTRA_USER, user);
      context.startActivity(starter);
}
```
同理，启动相关 Fragment 在其内部输入 newInstance 即可，如下所示：
```
public static MainFragment newInstance(User user) {
      Bundle args = new Bundle();
      args.putParcelable(ARGUMENT_USER, user);
      MainFragment fragment = new MainFragment();
      fragment.setArguments(args);
      return fragment;
}
```

> 注意：这些函数需要放在 onCreate() 之前的类的顶部；如果我们使用了这种方式，那么 extras 和 arguments 的键应该是 private 的，因为它们不再需要暴露给其他类来使用。

### **换行策略**
```
// 赋值操作符的换行，放在后面
int longName =
        anotherVeryLongVariable + anEvenLongerOne - thisRidiculousLongOne + theFinalOne;
// 其他操作符的换行，放在前面
int longName = anotherVeryLongVariable + anEvenLongerOne - thisRidiculousLongOne
        + theFinalOne;
        
// 函数链的换行
Picasso.with(context)
        .load("https://blankj.com/images/avatar.jpg")
        .into(ivAvatar);

// 多参数的换行
loadPicture(context,
        "https://blankj.com/images/avatar.jpg",
        ivAvatar,
        "Avatar of the user",
        clickListener);

// RxJava 链式的换行
// RxJava 的每个操作符都需要换新行，并且把换行符插入在 . 之前。
public Observable<Location> syncLocations() {
    return mDatabaseHelper.getAllLocations()
            .concatMap(new Func1<Location, Observable<? extends Location>>() {
                @Override
                 public Observable<? extends Location> call(Location location) {
                     return mRetrofitService.getLocation(location.id);
                 }
            })
            .retry(new Func2<Integer, Throwable, Boolean>() {
                 @Override
                 public Boolean call(Integer numRetries, Throwable throwable) {
                     return throwable instanceof RetrofitError;
                 }
            });
}        
```

## **资源文件规范**
### **资源文件分包**
```
android {
    ...
    sourceSets {
        main {
            res.srcDirs('src/main/res', 'src/main/res_core', 'src/main/res_sub')
        }
    }
}
```
### **动画资源文件（anim/ 和 animator/）**

安卓主要包含属性动画和视图动画，其视图动画包括补间动画和逐帧动画。属性动画文件需要放在 `res/animator/` 目录下，视图动画文件需放在 `res/anim/` 目录下。
命名规则：`{模块名_}逻辑名称`。
说明：`{}` 中的内容为可选，`逻辑名称` 可由多个单词加下划线组成。
例如：`refresh_progress.xml`、`market_cart_add.xml`、`market_cart_remove.xml`。
如果是普通的补间动画或者属性动画，可采用：`动画类型_方向` 的命名方式。
例如：

<table width="500" border="2" cellspacing="5" cellpadding="2">
<tbody> 
    <tr>
        <td>名称</td>
        <td>说明</td>
    </tr>
    <tr>
        <td><font color="Hotpink">fade_in</font></td>
        <td>淡入</td>
    </tr>
    <tr>
        <td><font color="Hotpink">fade_out</font></td>
        <td>淡出</td>
    </tr>
    <tr>
        <td><font color="Hotpink">push_down_in</font></td>
        <td>从下方推入</td>
    </tr>
    <tr>
        <td><font color="Hotpink">push_down_out</font></td>
        <td>Intent 从下方推出</td>
    </tr>
    <tr>
        <td><font color="Hotpink">push_left</font></td>
        <td>推向左方</td>
    </tr>
    <tr>
        <td><font color="Hotpink">slide_in_from_top</font></td>
        <td>从头部滑动进入</td>
    </tr>
    <tr>
        <td><font color="Hotpink">zoom_enter</font></td>
        <td>变形进入</td>
    </tr>
    <tr>
        <td><font color="Hotpink">slide_in</font></td>
        <td>滑动进入</td>
    </tr>
    <tr>
        <td><font color="Hotpink">shrink_to_middle</font></td>
        <td>中间缩小</td>
    </tr>
</tbody>
</table>

### **颜色资源文件（color/）**

专门存放颜色相关的资源文件。

命名规则：`类型_逻辑名称`。

例如：`sel_btn_font.xml`。

颜色资源也可以放于 `res/drawable/` 目录，引用时则用 `@drawable` 来引用，但不推荐这么做，最好还是把两者分开。

### **图片资源文件（drawable/ 和 mipmap/）**

`res/drawable/` 目录下放的是位图文件（.png、.9.png、.jpg、.gif）或编译为可绘制对象资源子类型的 XML 文件，而 `res/mipmap/` 目录下放的是不同密度的启动图标，所以 `res/mipmap/` 只用于存放启动图标，其余图片资源文件都应该放到 `res/drawable/` 目录下。
命名规则：`类型{_模块名}_逻辑名称`、`类型{_模块名}_颜色`。
说明：`{}` 中的内容为可选；`类型` 可以是`可绘制对象资源类型`，也可以是控件类型；最后可加后缀 `_small` 表示小图，`_big` 表示大图。
例如：

<table width="500" border="2" cellspacing="5" cellpadding="2">
<tbody> 
    <tr>
        <td>名称</td>
        <td>说明</td>
    </tr>
    <tr>
        <td><font color="Hotpink">btn_main_about.png</font></td>
        <td>主页关于按键 <font color="Hotpink">类型_模块名_逻辑名称</font></td>
    </tr>
    <tr>
        <td><font color="Hotpink">btn_back.png</font></td>
        <td>返回按键 <font color="Hotpink">类型_逻辑名称</font></td>
    </tr>
    <tr>
        <td><font color="Hotpink">divider_maket_white.png</font></td>
        <td>商城白色分割线 <font color="Hotpink">类型_模块名_颜色</font></td>
    </tr>
    <tr>
        <td><font color="Hotpink">ic_edit.png</font></td>
        <td>Intent 编辑图标 <font color="Hotpink">类型_逻辑名称</font></td>
    </tr>
    <tr>
        <td><font color="Hotpink">bg_main.png</font></td>
        <td>主页背景 <font color="Hotpink">类型_逻辑名称</font></td>
    </tr>
    <tr>
        <td><font color="Hotpink">btn_red.png</font></td>
        <td>红色按键 <font color="Hotpink">类型_颜色</font></td>
    </tr>
    <tr>
        <td><font color="Hotpink">btn_red_big.png</font></td>
        <td>红色大按键 <font color="Hotpink">类型_颜色</font></td>
    </tr>
    <tr>
        <td><font color="Hotpink">ic_head_small.png</font></td>
        <td>小头像图标 <font color="Hotpink">类型_逻辑名称</font></td>
    </tr>
    <tr>
        <td><font color="Hotpink">bg_input.png</font></td>
        <td>输入框背景 <font color="Hotpink">类型_逻辑名称</font></td>
    </tr>
    <tr>
        <td><font color="Hotpink">divider_white.png</font></td>
        <td>白色分割线 <font color="Hotpink">类型_颜色</font></td>
    </tr>
    <tr>
        <td><font color="Hotpink">bg_main_head.png</font></td>
        <td>主页头部背景 <font color="Hotpink">类型_模块名_逻辑名称</font></td>
    </tr>
    <tr>
        <td><font color="Hotpink">def_search_cell.png</font></td>
        <td>搜索页面默认单元图片 <font color="Hotpink">类型_模块名_逻辑名称</font></td>
    </tr>
    <tr>
        <td><font color="Hotpink">ic_more_help.png</font></td>
        <td>更多帮助图标 <font color="Hotpink">类型_逻辑名称</font></td>
    </tr>
    <tr>
        <td><font color="Hotpink">divider_list_line.png</font></td>
        <td>列表分割线 <font color="Hotpink">类型_逻辑名称</font></td>
    </tr>
    <tr>
        <td><font color="Hotpink">sel_search_ok.xml</font></td>
        <td>搜索界面确认选择器 <font color="Hotpink">类型_模块名_逻辑名称</font></td>
    </tr>
    <tr>
        <td><font color="Hotpink">shape_music_ring.xml</font></td>
        <td>音乐界面环形形状 <font color="Hotpink">类型_模块名_逻辑名称</font></td>
    </tr>
</tbody>
</table>

如果有多种形态，如按钮选择器：`sel_btn_xx.xml`，采用如下命名：

<table width="500" border="2" cellspacing="5" cellpadding="2">
<tbody> 
    <tr>
        <td>名称</td>
        <td>说明</td>
    </tr>
    <tr>
        <td><font color="Hotpink">sel_btn_xx</font></td>
        <td>作用在<font color="Hotpink">btn_xx</font>上的<font color="Hotpink">selector</font></td>
    </tr>
    <tr>
        <td><font color="Hotpink">btn_xx_normal</font></td>
        <td>默认状态效果</td>
    </tr>
    <tr>
        <td><font color="Hotpink">btn_xx_pressed</font></td>
        <td><font color="Hotpink">state_pressed</font>点击效果</td>
    </tr>
    <tr>
        <td><font color="Hotpink">btn_xx_focused</font></td>
        <td><font color="Hotpink">state_focused</font>聚焦效果</td>
    </tr>
    <tr>
        <td><font color="Hotpink">btn_xx_disabled</font></td>
        <td><font color="Hotpink">state_enabled</font>不可用效果</td>
    </tr>
    <tr>
        <td><font color="Hotpink">btn_xx_checked</font></td>
        <td><font color="Hotpink">state_checked</font>选中效果</td>
    </tr>
    <tr>
        <td><font color="Hotpink">btn_xx_selected</font></td>
        <td><font color="Hotpink">state_selected</font>选中效果</td>
    </tr>
    <tr>
        <td><font color="Hotpink">btn_xx_hovered</font></td>
        <td><font color="Hotpink">state_hovered</font>悬停效果</td>
    </tr>
    <tr>
        <td><font color="Hotpink">btn_xx_checkable</font></td>
        <td><font color="Hotpink">state_checkable</font>可选效果</td>
    </tr>
    <tr>
        <td><font color="Hotpink">btn_xx_activated</font></td>
        <td><font color="Hotpink">state_activated</font>激活效果</td>
    </tr>
    <tr>
        <td><font color="Hotpink">btn_xx_window_focused</font></td>
        <td><font color="Hotpink">state_window_focused</font>窗口聚焦效果</td>
    </tr>
</tbody>
</table>

### **布局资源文件（layout/）**


### **菜单资源文件（menu/）**

### **values 资源文件（values/）**

#### **colors.xml**

#### **dimens.xml**

#### **strings.xml**

#### **styles.xml**

#### **id 命名**

























参考：

[Android 开发规范](https://www.jianshu.com/p/45c1675bec69)

[Android Studio 下对资源进行分包 - Blankj's Blog](
https://blankj.com/2016/09/21/android-studio-classify-src-package/)

[Blankj/AndroidStandardDevelop: :star2: Best practices in Android develop(final).](https://github.com/Blankj/AndroidStandardDevelop)
