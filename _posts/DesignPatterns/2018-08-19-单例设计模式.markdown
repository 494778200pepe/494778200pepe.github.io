---
layout: post
title:  "单例设计模式一"
date:   2018-08-19 23:43:00 +0800
categories: Java
tags: 设计模式
author: pepe
description: 『 单例设计模式一 』
---

单例的必要条件：

* 1、构造函数私有，防止在外部 new 对象

* 2、内部必须提供一个静态的方法，让外部调用

### **双重判空（懒汉式）**

```
public class Singleton1 {
        private volatile static Singleton1 instance;
 
        private Singleton1() {
        }
 
        public static Singleton1 newInstance() {
            if (instance == null) {
                synchronized (Singleton1.class) {
                    if (instance == null) {
                        instance = new Singleton1();
                    }
                }
            }
            return instance;
        }
    }
```

volatile 关键字：

* 1、防止重排序(1、开辟一块内存空间；2、初始化对象值；3、给变量赋值，将对象的地址指向变量)，不加 volatile，2 和 3 的顺序可能颠倒，那么访问的时候，对象并没有初始化好，但变量却有一个地址值了。就有可能出现问题。

* 2、线程可见性 - 某一个线程改了公用对象（变量），短时间内另一个线程可能是不可见的，因为每一个线程都有自己的缓存区（线程工作区）

> 在Java中，每个线程都有一个独立的内存空间，称为工作内存; 它保存了用于执行操作的不同变量的值。在执行操作之后，线程将变量的更新值复制到主存储器，这样其他线程可以从那里读取最新值。
简单地说，volatile 关键字标记一个变量，在多个线程访问它的情况下，总是转到主内存，读取和写入。当多个线程访问同一个变量x时，线程1修改了变量x的值，线程1、线程2...线程n能够立即读取到线程1修改后的值。

[Java中volatile关键字的最全总结 - 夏日清风 - CSDN博客](https://blog.csdn.net/u012723673/article/details/80682208)

### **静态内部类（比较常用）**

```
public class Singleton2 {
    private Singleton2() {
    }

    public static Singleton2 getInstance(){
        return SingletonHolder.mInstance;
    }

    public static class SingletonHolder{
        // 加上 volatile 的用处是什么？
        private static volatile Singleton2 mInstance = new Singleton2();
    }
}

```

### **枚举**

```
public enum  Singleton3 {

    //枚举元素本身就是单例
    INSTANCE;

    User loggedUser;
    AuthUser authUser;
    Locale systemDefaultLocal;

    //添加自己需要的操作
    public User getLoggedUser() {
        return loggedUser;
    }

    public void setLoggedUser(User loggedUser) {
        this.loggedUser = loggedUser;
    }

    public AuthUser getAuthUser() {
        return authUser;
    }

    public void setAuthUser(AuthUser authUser) {
        this.authUser = authUser;
    }

    @Nullable public String getAccessToken() {
        return authUser == null ? null : authUser.getAccessToken();
    }

    public Locale getSystemDefaultLocal() {
        if(systemDefaultLocal == null){
            systemDefaultLocal = Locale.getDefault();
        }
        return systemDefaultLocal;
    }

}
```

### **容器管理 系统的服务就是用的这种**

```
public class Singleton4 {
    private static Map<String,Object> mSingleMap = new HashMap<>();

    static {
        mSingleMap.put("activity_manager",new Singleton4());
    }

    private Singleton4() {

    }

    public static Object getService(String serviceName){
        return mSingleMap.get(serviceName);
    }
}
```

### **静态对象（饿汉式）**

```
public class Singleton5 {
    private static Singleton5 mInstance;

    static {
        mInstance = new Singleton5();
    }

    private Singleton5() {

    }

    public static Singleton5 getInstance(){
        return mInstance;
    }
}
```












