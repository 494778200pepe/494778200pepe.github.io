---
layout: post
title:  "原型设计模式"
date:   2019-11-14 10:04:00 +0800
categories: designpatterns
tags: 设计模式
author: pepe
description: 『 原型设计模式 』
---

### **深拷贝和浅拷贝区别是什么？**

* 浅拷贝：基本类型的属性，复制值；引用类型的属性，复制地址，不复制堆内存中的对象。（Object类的clone方法只会拷贝对象中的基本的数据类型，对于数组、集合、容器对象、引用对象等都不会拷贝。）

* 深拷贝：基本类型的属性，复制值；引用类型的属性，复制堆内存中的对象。

![DesignPatterns_Prototype1]({{ site.baseurl }}/assets/images/DesignPatterns/DesignPatterns_Prototype1.png)

![DesignPatterns_Prototype2]({{ site.baseurl }}/assets/images/DesignPatterns/DesignPatterns_Prototype2.png)

### **保护性拷贝(defensive copy)**

何为保护性拷贝？看一个例子：

```
public class Person {
 
	private String name;
	private Date birth;
 
	public Person(String name, Date birth) {
		this.name = name;
		this.birth = birth;
	}
 
	public Date getBirth() {
		return birth;
	}
 
	public String getName() {
		return name;
	}
}
```

我们定义了一个Person类，该类的字段均为私有的，同时没有添加可以修改字段的方法(mutator)。这似乎就是一个不可变类(immutable class)，事实真的是这样吗？我们来测试一下。

```
	public static void main(String[] args) {
 
		Person p = new Person("Benson",new Date(1990, 4, 13));
		System.out.println(p.getName());
		System.out.println(p.getBirth().getYear());
		
		Date hole = p.getBirth();
		hole.setYear(2013);
		
		System.out.println(p.getName());
		System.out.println(p.getBirth().getYear());
	}
```

我们看看输出:

```
Benson
1990
Benson
2013
```

从输出可以看出该类并不是一个不可变类。因为该类的内部状态被修改了。问题出在哪呢？关键在于Date类是一个可变类（而String是一个不可变类，可放心使用），当我们在客户端获取Date类的实例引用时，如果就可以对其内部状态进行修改。如上代码所示。
一个解决办法就是使用保护性拷贝。

```
public class Person {
 
...
	public Date getBirth() {
		return new Date(birth.toString());		//保护性拷贝
	}
...
}
```

这里我们修改了getBirth方法，返回一个同原来值相同的新对象。这样，即使客户端获得了该对象的引用，也无法修改person对象的内部状态，从而使该对象不可变。
再次运行测试类:
```
Benson
1990
Benson
1990
```

### **Android源码中的原型模式**

#### **Intent** 

比如有三个activity，从activity1启动到activity2，在启动activity3，而数据需要从activity1中传递到activity3中

activity1:
```
		Intent intent = new Intent(this,Activity2.class);

        intent.putExtra("Params1","Params1");
        intent.putExtra("Params2","Params2");
        intent.putExtra("Params3","Params3");

        startActivity(intent);   
```

activity2:
```
		//默认
		String Params1 = getIntent().getStringExtra("Params1");
        String Params2 = getIntent().getStringExtra("Params2");
        String Params3 = getIntent().getStringExtra("Params3");
        // 又 new 一个 intent

        // 把参数传递
        Intent intent = new Intent(this,Activity3.class);

        intent.putExtra("Params1",Params1);
        intent.putExtra("Params2",Params2);
        intent.putExtra("Params3",Params3);*/
        //原型设计模式拷贝
        Intent intent = (Intent) getIntent().clone();
        intent.setClass(this, Activity3.class);
        startActivity(intent);    
```

源码
```
    @Override
    public Object clone() {
        return new Intent(this);
    }
	
	public Intent(Intent o) {
        //赋值
        this.mAction = o.mAction;
        this.mData = o.mData;
        this.mType = o.mType;
        this.mPackage = o.mPackage;
        this.mComponent = o.mComponent;
        this.mFlags = o.mFlags;
        this.mContentUserHint = o.mContentUserHint;
    }
```

#### **2 . ArrayList**

```
ArrayList list=new ArrayList();
// 有很多数据
ArrayList copyList = (ArrayList) list.clone();
```

源码:
```
  public Object clone() {
        try {
            ArrayList<?> v = (ArrayList<?>) super.clone();
            //数组拷贝
            v.elementData = Arrays.copyOf(elementData, size);
            v.modCount = 0;//重置修改次数
            return v;
        } catch (CloneNotSupportedException e) {
            // this shouldn't happen, since we are Cloneable
            throw new InternalError(e);
        }
    }
```

#### **3 . OkHttp**

```
OkHttpClient client = new OkHttpClient();
client.newBuilder();
```

源码：

```
Builder(OkHttpClient okHttpClient) {
      this.dispatcher = okHttpClient.dispatcher;
      this.proxy = okHttpClient.proxy;
      this.protocols = okHttpClient.protocols;
      this.connectionSpecs = okHttpClient.connectionSpecs;
      this.interceptors.addAll(okHttpClient.interceptors);
      this.networkInterceptors.addAll(okHttpClient.networkInterceptors);
      this.eventListenerFactory = okHttpClient.eventListenerFactory;
      this.proxySelector = okHttpClient.proxySelector;
      this.cookieJar = okHttpClient.cookieJar;
      this.internalCache = okHttpClient.internalCache;
      this.cache = okHttpClient.cache;
      this.socketFactory = okHttpClient.socketFactory;
      this.sslSocketFactory = okHttpClient.sslSocketFactory;
      this.certificateChainCleaner = okHttpClient.certificateChainCleaner;
      this.hostnameVerifier = okHttpClient.hostnameVerifier;
      this.certificatePinner = okHttpClient.certificatePinner;
      this.proxyAuthenticator = okHttpClient.proxyAuthenticator;
      this.authenticator = okHttpClient.authenticator;
      this.connectionPool = okHttpClient.connectionPool;
      this.dns = okHttpClient.dns;
      this.followSslRedirects = okHttpClient.followSslRedirects;
      this.followRedirects = okHttpClient.followRedirects;
      this.retryOnConnectionFailure = okHttpClient.retryOnConnectionFailure;
      this.connectTimeout = okHttpClient.connectTimeout;
      this.readTimeout = okHttpClient.readTimeout;
      this.writeTimeout = okHttpClient.writeTimeout;
      this.pingInterval = okHttpClient.pingInterval;
    }
```

### **原型模式概念**

#### **介绍**

　　原型模式是一个创建型的模式。原型二字表明了改模式应该有一个样板实例，用户从这个样板对象中复制一个内部属性一致的对象，这个过程也就是我们称的“克隆”。被复制的实例就是我们所称的“原型”，这个原型是可定制的。原型模式多用于创建复杂的或者构造耗时的实例，因为这种情况下，复制一个已经存在的实例可使程序运行更高效。

#### **定义**
　　用原型实例指定创建对象的种类，并通过拷贝这些原型创建新的对象。

#### **使用场景**

* （1）类初始化需要消化非常多的资源，这个资源包括数据、硬件资源等，通过原型拷贝避免这些消耗。 

* （2）通过new产生的一个对象需要非常繁琐的数据准备或者权限，这时可以使用原型模式。 

* （3）一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用，即保护性拷贝。

### **原型模式UML类图（通用）**

![DesignPatterns_Prototype]({{ site.baseurl }}/assets/images/DesignPatterns/DesignPatterns_Prototype.png)

原型模式主要用于对象的复制，它的核心是就是类图中的原型类Prototype。Prototype类需要具备以下两个条件： 

* （1）实现Cloneable接口。在java语言有一个Cloneable接口，它的作用只有一个，就是在运行时通知虚拟机可以安全地在实现了此接口的类上使用clone方法。在java虚拟机中，只有实现了这个接口的类才可以被拷贝，否则在运行时会抛出CloneNotSupportedException异常。 

* （2）重写Object类中的clone方法。Java中，所有类的父类都是Object类，Object类中有一个clone方法，作用是返回对象的一个拷贝，但是其作用域protected类型的，一般的类无法调用，因此Prototype类需要将clone方法的作用域修改为public类型。

### **总结**

#### **优点**

* （1）原型模式是在内存中二进制流的拷贝，要比直接new一个对象性能好很多，特别是要在一个循环体内产生大量对象时，原型模式可能更好的体现其优点。 

* （2）还有一个重要的用途就是保护性拷贝，也就是对某个对象对外可能是只读的，为了防止外部对这个只读对象的修改，通常可以通过返回一个对象拷贝的形式实现只读的限制。

#### **缺点**

* （1）这既是它的优点也是缺点，直接在内存中拷贝，构造函数是不会执行的，在实际开发中应该注意这个潜在问题。优点是减少了约束，缺点也是减少了约束，需要大家在实际应用时考虑。 

* （2）通过实现Cloneable接口的原型模式在调用clone函数构造实例时并不一定比通过new操作速度快，只有当通过new构造对象较为耗时或者说成本较高时，通过clone方法才能够获得效率上的提升。



参考：

[保护性拷贝(defensive copy) - Benson的专栏 - CSDN博客](https://blog.csdn.net/tounaobun/article/details/8607174)

[原型设计模式 - 奋斗&努力 - CSDN博客](https://blog.csdn.net/qq_24675479/article/details/79725799)

[设计模式之原型模式 - chenliguan的博客 - CSDN博客](https://blog.csdn.net/chenliguan/article/details/69855738)

















