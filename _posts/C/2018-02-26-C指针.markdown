---
layout: post
title:  "C指针"
date:   2018-02-26 15:10:00 +0800
categories: C
tags: C
author: pepe
description: C指针.
---

### **什么是指针？**

指针是一个变量，其值为另一个变量的地址，即，内存位置的直接地址。
以下是有效的指针声明：
```
int    *ip;    /* 一个整型的指针 */
double *dp;    /* 一个 double 型的指针 */
float  *fp;    /* 一个浮点型的指针 */
char   *ch;     /* 一个字符型的指针 */
```

* 所有指针的值的实际数据类型，不管是整型、浮点型、字符型，还是其他的数据类型，都是一样的，都是一个代表内存地址的长的十六进制数。
* 不同数据类型的指针之间唯一的不同是，指针所指向的变量或常量的数据类型不同。

### **如何使用指针？**
常用的指针操作有：
 * 定义一个指针变量
 * 把变量地址赋值给指针
 * 访问指针变量中可用地址的值

实例
```
#include <stdio.h>
 
int main ()
{
   int  var = 20;   /* 实际变量的声明 */
   int  *ip;        /* 指针变量的声明 */
 
   ip = &var;  /* 在指针变量中存储 var 的地址 */
 
   printf("Address of var variable: %p\n", &var  );
 
   /* 在指针变量中存储的地址 */
   printf("Address stored in ip variable: %p\n", ip );
 
   /* 使用指针访问值 */
   printf("Value of *ip variable: %d\n", *ip );
 
   return 0;
}
```
当上面的代码被编译和执行时，它会产生下列结果：
```
Address of var variable: bffd8b3c
Address stored in ip variable: bffd8b3c
Value of *ip variable: 20
```

### **NULL指针**

* 在变量声明的时候，如果没有确切的地址可以赋值，为指针变量赋一个 NULL 值是一个良好的编程习惯。
* 赋为 NULL 值的指针被称为空指针。
* NULL 指针是一个定义在标准库中的值为零的常量。

实例
```
#include <stdio.h>
 
int main ()
{
   int  *ptr = NULL;
 
   printf("ptr 的值是 %p\n", ptr  );
 
   return 0;
}
```
当上面的代码被编译和执行时，它会产生下列结果：
```
ptr 的值是 0
```

* 在大多数的操作系统上，程序不允许访问地址为 0 的内存，因为该内存是操作系统保留的。
* 然而，内存地址 0 有特别重要的意义，它表明该指针不指向一个可访问的内存位置。
* 但按照惯例，如果指针包含空值（零值），则假定它不指向任何东西。

如需检查一个空指针，您可以使用 if 语句，如下所示：
```
if(ptr)     /* 如果 p 非空，则完成 */
if(!ptr)    /* 如果 p 为空，则完成 */
```

### **C指针详解**
在 C 中，有很多指针相关的概念，这些概念都很简单，但是都很重要。
下面列出了 C 程序员必须清楚的一些与指针相关的重要概念：

|概念-------------------|描述|
| :---------------------| :---- |
|指针的算术运算	        |可以对指针进行四种算术运算：++、--、+、-|
|指针数组	            |可以定义用来存储指针的数组。|
|指向指针的指针	        |允许指向指针的指针。|
|传递指针给函数	        |通过引用或地址传递参数，使传递的参数在调用函数中被改变。|
|从函数返回指针	        |C 允许函数返回指针到局部变量、静态变量和动态内存分配。|

### **函数指针**

函数指针是指向函数的指针变量。
函数指针可以像一般函数一样，用于调用函数、传递参数。
函数指针变量的声明：
```
typedef int (*fun_ptr)(int,int); // 声明一个指向同样参数、返回值的函数指针类型
```

实例
以下实例声明了函数指针变量 p，指向函数 max：
```
#include <stdio.h>
 
int max(int x, int y)
{
    return x > y ? x : y;
}
 
int main(void)
{
    /* p 是函数指针 */
    int (* p)(int, int) = &max; // &可以省略
    int a, b, c, d;
 
    printf("请输入三个数字:");
    scanf("%d %d %d", &a, &b, &c);
    
    getchar();
 
    /* 与直接调用函数等价，d = max(max(a, b), c) */
    d = p(p(a, b), c); 
 
    printf("最大的数字是: %d\n", d);
 
    getchar();
 
    return 0;
}
```
编译执行，输出结果如下：
```
请输入三个数字:1 2 3
最大的数字是: 3
```

### **回调函数**

* 函数指针作为某个函数的参数
* 函数指针变量可以作为某个函数的参数来使用的，回调函数就是一个通过函数指针调用的函数。
* 简单来说就是，指针p既然可以指向函数A，并使用该指针来调用函数A
* 同时，指针p又可以作为函数B的参数，那么在函数B里面就可以使用p来使用函数A
* 简单讲：回调函数是由别人的函数执行时调用你实现的函数。
* 也就是说的在函数B中的指针p

实例
```
#include <stdlib.h>  
#include <stdio.h>

// 回调函数
// size_t 是一种数据类型，近似于无符号整型，但容量范围一般大于 int 和 unsigned。这里使用 size_t 是为了保证 arraysize
// 变量能够有足够大的容量来储存可能大的数组。
void populate_array(int *array, size_t arraySize, int (*getNextValue)(void))
{
	for (size_t i=0; i<arraySize; i++)
		array[i] = getNextValue();
}

// 获取随机值
int getNextRandomValue(void)
{
	return rand();
}

int main(void)
{
	int myarray[10];
	populate_array(myarray, 10, getNextRandomValue);
	for(int i = 0; i < 10; i++) {
		printf("%d ", myarray[i]);
	}
	printf("\n");
	getchar();
	return 0;
}
```
编译执行，输出结果如下：
```
16807 282475249 1622650073 984943658 1144108930 470211272 101027544 1457850878 1458777923 2007237709 
```


























