---
layout: post
title:  "C指针"
date:   2018-02-26 15:10:00 +0800
categories: C
tags: C
author: pepe
description: C指针.
---

### **什么是指针？**

指针是一个变量，其值为另一个变量的地址，即，内存位置的直接地址。
以下是有效的指针声明：
```
int    *ip;    /* 一个整型的指针 */
double *dp;    /* 一个 double 型的指针 */
float  *fp;    /* 一个浮点型的指针 */
char   *ch;     /* 一个字符型的指针 */
```

* 所有指针的值的实际数据类型，不管是整型、浮点型、字符型，还是其他的数据类型，都是一样的，都是一个代表内存地址的长的十六进制数。
* 不同数据类型的指针之间唯一的不同是，指针所指向的变量或常量的数据类型不同。

### **如何使用指针？**
常用的指针操作有：
 * 定义一个指针变量
 * 把变量地址赋值给指针
 * 访问指针变量中可用地址的值

实例
```
#include <stdio.h>
 
int main ()
{
   int  var = 20;   /* 实际变量的声明 */
   int  *ip;        /* 指针变量的声明 */
 
   ip = &var;  /* 在指针变量中存储 var 的地址 */
 
   printf("Address of var variable: %p\n", &var  );
 
   /* 在指针变量中存储的地址 */
   printf("Address stored in ip variable: %p\n", ip );
 
   /* 使用指针访问值 */
   printf("Value of *ip variable: %d\n", *ip );
 
   return 0;
}
```
当上面的代码被编译和执行时，它会产生下列结果：
```
Address of var variable: bffd8b3c
Address stored in ip variable: bffd8b3c
Value of *ip variable: 20
```

### **外部函数**

如果在定义函数时，在函数的首部的最左端加关键字 extern，则此函数是外部函数，可供其它文件调用。
如函数首部可以为
```
extern int max (int a,int b)
```

* C 语言规定，如果在定义函数时省略 extern，则默认为外部函数。
* 在需要调用此函数的其他文件中，需要对此函数作声明（不要忘记，即使在本文件中调用一个函数，也要用函数原型来声明）。
* 在对此函数作声明时，要加关键字 extern，表示该函数是在其他文件中定义的外部函数。
* 在函数中，是可以申明外部函数的，然后使用，并不一定非要在程序顶部声明。


### **内联函数**

内联函数 —— C 中关键字 inline 用法解析 - 知秋一叶 - CSDN博客
http://blog.csdn.net/zqixiao_09/article/details/50877383


### **参数的作用域**

* 在程序中，局部变量和全局变量的名称可以相同，但是在函数内，局部变量的值会覆盖全局变量的值。
* 函数的参数，形式参数，被当作该函数内的局部变量，它们会优先覆盖全局变量。


