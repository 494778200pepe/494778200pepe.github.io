---
layout: post
title:  "C字符串"
date:   2018-02-27 10:52:00 +0800
categories: C
tags: C
author: pepe
description: C字符串.
---

### **字符串处理常见函数**

|函数------------------ |目的|
| :--------             | :---- |
|strcpy(s1, s2)	        |复制字符串 s2 到字符串 s1|
|strcat(s1, s2)	        |连接字符串 s2 到字符串 s1 的末尾|
|strlen(s1)	            |返回字符串 s1 的长度|
|strcmp(s1, s2)	        |如果 s1 和 s2 是相同的，则返回 0；如果 s1<s2 则返回小于 0；如果 s1>s2 则返回大于 0|
|strchr(s1, ch)	        |返回一个指针，指向字符串 s1 中字符 ch 的第一次出现的位置|
|strstr(s1, s2)	        |返回一个指针，指向字符串 s1 中字符串 s2 的第一次出现的位置|

### **C结构体**

结构体是 C 编程中另一种用户自定义的可用的数据类型，它允许您存储不同类型的数据项。

#### 定义结构
struct 语句定义了一个包含多个成员的新的数据类型，struct 语句的格式如下：
```
struct [structure tag]
{
   member definition;
   member definition;
   ...
   member definition;
} [one or more structure variables];
```

* `structure tag` 是可选的，每个 member definition 是标准的变量定义，比如 int i; 或者 float f; 或者其他有效的变量定义。
* 在结构定义的末尾，最后一个分号之前，您可以指定一个或多个结构变量，这是可选的。

下面是声明 Book 结构的方式：
```
struct Books
{
   char  title[50];
   char  author[50];
   char  subject[100];
   int   book_id;
} book;
```

#### 访问结构成员

定义： `struct Books Book1; ` 

使用： `Book1.title`

#### 结构作为函数参数
```
/* 函数声明 */
void printBook( struct Books book );
```

#### 指向结构的指针

定义： `struct Books *struct_pointer;`

赋值： `struct_pointer = &Book1;`

使用： `struct_pointer->title;`


实例
```
#include <stdio.h>
#include <string.h>
 
struct Books
{
   char  title[50];
   char  author[50];
   char  subject[100];
   int   book_id;
};
 
/* 函数声明 */
void printBook( struct Books *book );
int main( )
{
   struct Books Book1;        /* 声明 Book1，类型为 Books */
   struct Books Book2;        /* 声明 Book2，类型为 Books */
 
   /* Book1 详述 */
   strcpy( Book1.title, "C Programming");
   strcpy( Book1.author, "Nuha Ali"); 
   strcpy( Book1.subject, "C Programming Tutorial");
   Book1.book_id = 6495407;
 
   /* Book2 详述 */
   strcpy( Book2.title, "Telecom Billing");
   strcpy( Book2.author, "Zara Ali");
   strcpy( Book2.subject, "Telecom Billing Tutorial");
   Book2.book_id = 6495700;
 
   /* 通过传 Book1 的地址来输出 Book1 信息 */
   printBook( &Book1 );
 
   /* 通过传 Book2 的地址来输出 Book2 信息 */
   printBook( &Book2 );
 
   return 0;
}
void printBook( struct Books *book )
{
   printf( "Book title : %s\n", book->title);
   printf( "Book author : %s\n", book->author);
   printf( "Book subject : %s\n", book->subject);
   printf( "Book book_id : %d\n", book->book_id);
}
```
当上面的代码被编译和执行时，它会产生下列结果：
```
Book title : C Programming
Book author : Nuha Ali
Book subject : C Programming Tutorial
Book book_id : 6495407
Book title : Telecom Billing
Book author : Zara Ali
Book subject : Telecom Billing Tutorial
Book book_id : 6495700
```

### **C共用体**

* 与结构体类似，不同的是：共用体在同一时间内只能存储一个成员的值。
* 后面的赋值，会造成前面的值损坏。

### **位域**

* 有些信息在存储时，并不需要占用一个完整的字节，而只需占几个或一个二进制位。
* 例如在存放一个开关量时，只有 0 和 1 两种状态，用 1 位二进位即可。
* 为了节省存储空间，并使处理简便，C 语言又提供了一种数据结构，称为"位域"或"位段"。
* 所谓"位域"是把一个字节中的二进位划分为几个不同的区域，并说明每个区域的位数。
* 每个域有一个域名，允许在程序中按域名进行操作。这样就可以把几个不同的对象用一个字节的二进制位域来表示。

```
struct packed_struct {
  unsigned int f1:1;
  unsigned int f2:1;
  unsigned int f3:1;
  unsigned int f4:1;
  unsigned int type:4;
  unsigned int my_int:9;
} pack;
```
在这里，packed_struct 包含了 6 个成员：四个 1 位的标识符 f1..f4、一个 4 位的 type 和一个 9 位的 my_int。

### **C typedef**

C 语言提供了 typedef 关键字，您可以使用它来为类型取一个新的名字。下面的实例为单字节数字定义了一个术语 BYTE：
```
typedef unsigned char BYTE;
```
在这个类型定义之后，标识符 BYTE 可作为类型 unsigned char 的缩写，例如：
```
BYTE  b1, b2;
```










































